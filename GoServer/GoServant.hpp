// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.6.6
// Generated from `GoServant.jce'
// **********************************************************************

#include "jce/wup.h"
#include "servant/BaseF.h"
#include "ServantGlue.h"

using namespace wup;

namespace HUYA
{

    inline taf::Int32 GoServantProxy::getRankGo(const HUYA::ActivityRankReq &tReq, HUYA::ActivityRankRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"getRankGo", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    inline taf::Int32 GoServantProxy::await_getRankGo(const HUYA::ActivityRankReq &tReq, HUYA::ActivityRankRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke_await(taf::JCENORMAL,"getRankGo", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    inline void GoServant::async_response_getRankGo(taf::JceCurrentPtr current, taf::Int32 _ret, const HUYA::ActivityRankRsp &tRsp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tRsp", tRsp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tRsp, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void GoServantProxy::async_getRankGo(GoServantPrxCallbackPtr callback,const HUYA::ActivityRankReq &tReq,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"getRankGo", _os.getByteBuffer(), context, _mStatus, callback);
    }

    inline taf::Int32 GoServantProxy::getRankListGo(const HUYA::ActivityRankListReq &tReq, HUYA::ActivityRankListRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"getRankListGo", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    inline taf::Int32 GoServantProxy::await_getRankListGo(const HUYA::ActivityRankListReq &tReq, HUYA::ActivityRankListRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke_await(taf::JCENORMAL,"getRankListGo", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    inline void GoServant::async_response_getRankListGo(taf::JceCurrentPtr current, taf::Int32 _ret, const HUYA::ActivityRankListRsp &tRsp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tRsp", tRsp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tRsp, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void GoServantProxy::async_getRankListGo(GoServantPrxCallbackPtr callback,const HUYA::ActivityRankListReq &tReq,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"getRankListGo", _os.getByteBuffer(), context, _mStatus, callback);
    }

    inline taf::Int32 GoServantProxy::updateRankGo(const HUYA::UpdateActivityRankReq &tReq, HUYA::ActivityRankRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"updateRankGo", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    inline taf::Int32 GoServantProxy::await_updateRankGo(const HUYA::UpdateActivityRankReq &tReq, HUYA::ActivityRankRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke_await(taf::JCENORMAL,"updateRankGo", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    inline void GoServant::async_response_updateRankGo(taf::JceCurrentPtr current, taf::Int32 _ret, const HUYA::ActivityRankRsp &tRsp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tRsp", tRsp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tRsp, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void GoServantProxy::async_updateRankGo(GoServantPrxCallbackPtr callback,const HUYA::UpdateActivityRankReq &tReq,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"updateRankGo", _os.getByteBuffer(), context, _mStatus, callback);
    }

    inline GoServantProxy* GoServantProxy::taf_hash(int64_t key)
    {
        return (GoServantProxy*)ServantProxy::taf_hash(key);
    }

    static ::std::string __HUYA__GoServant_all[]=
    {
        "getRankGo",
        "getRankListGo",
        "updateRankGo"
    };

    inline int GoServantPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__HUYA__GoServant_all, __HUYA__GoServant_all+3, msg->request.sFuncName);
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __HUYA__GoServant_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getRankGo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                HUYA::ActivityRankRsp tRsp;
                _is.read(tRsp, 2, true);
                callback_getRankGo(_ret, tRsp);
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getRankListGo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                HUYA::ActivityRankListRsp tRsp;
                _is.read(tRsp, 2, true);
                callback_getRankListGo(_ret, tRsp);
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_updateRankGo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                HUYA::ActivityRankRsp tRsp;
                _is.read(tRsp, 2, true);
                callback_updateRankGo(_ret, tRsp);
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int GoServant::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__HUYA__GoServant_all, __HUYA__GoServant_all+3, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        if(_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
        {
            assert(false);
            return JCESERVERNOSERVANTERR;
        }
        else
        {
            int iFuncId = r.first - __HUYA__GoServant_all;
            char* reqBuf = const_cast<char*>(&((_current->getRequestBuffer())[0]));
            int reqSize = _current->getRequestBuffer().size();
            char* rspBuf = NULL;
            int rspSize = 0;
            int iRet = OnDispatch4HUYAGoServant(iFuncId, reqBuf, reqSize, &rspBuf, &rspSize);
            if(_current->isResponse())
            {
                _sResponseBuffer.assign(rspBuf, rspBuf+rspSize);
            }
            return iRet;
        }

    }


}

