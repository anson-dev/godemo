// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.6.6
// Generated from `GoServant.jce'
// **********************************************************************

#ifndef __GOSERVANT_H_
#define __GOSERVANT_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "ActivityRankServant.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "servant/TafCallbacks.h"
#include "servant/Coroutine.h"


namespace HUYA
{
    struct TestSt : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "HUYA.TestSt";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        TestSt(taf::Int32 iNum,const std::string &sName)
            :iNum(iNum),sName(sName)
        {
        }
        TestSt()
        :iNum(0),sName("")
        {
        }
        void resetDefautlt()
        {
            iNum = 0;
            sName = "";
        }
        template<typename WriterT>
        void writeTo(WriterT& _os) const
        {
            _os.write(iNum, 0);
            _os.write(sName, 1);
        }
        template<typename ReaderT>
        void readFrom(ReaderT& _is)
        {
            resetDefautlt();
            _is.read(iNum, 0, false);
            _is.read(sName, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iNum,"iNum");
            _ds.display(sName,"sName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iNum, true);
            _ds.displaySimple(sName, false);
            return _os;
        }
    public:
        taf::Int32 iNum;
        std::string sName;
    };
    inline bool operator==(const TestSt&l, const TestSt&r)
    {
        return l.iNum == r.iNum && l.sName == r.sName;
    }
    inline bool operator!=(const TestSt&l, const TestSt&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class GoServantPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~GoServantPrxCallback(){}
        virtual void callback_getRankGo(taf::Int32 ret, const HUYA::ActivityRankRsp& tRsp)
        { throw std::runtime_error("callback_getRankGo() overloading incorrect."); }
        virtual void callback_getRankGo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getRankGo_exception() overloading incorrect."); }

        virtual void callback_getRankListGo(taf::Int32 ret, const HUYA::ActivityRankListRsp& tRsp)
        { throw std::runtime_error("callback_getRankListGo() overloading incorrect."); }
        virtual void callback_getRankListGo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getRankListGo_exception() overloading incorrect."); }

        virtual void callback_updateRankGo(taf::Int32 ret, const HUYA::ActivityRankRsp& tRsp)
        { throw std::runtime_error("callback_updateRankGo() overloading incorrect."); }
        virtual void callback_updateRankGo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_updateRankGo_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<GoServantPrxCallback> GoServantPrxCallbackPtr;

    /* callback of lambda_async support proxy for client */
    template<typename ...Args>
    class GoServantPrxCallbackImp:public GoServantPrxCallback,public tafAsync::TafCallback<Args...>
    {
    public:
        virtual void callback_getRankGo(taf::Int32 ret, const HUYA::ActivityRankRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getRankGo_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getRankListGo(taf::Int32 ret, const HUYA::ActivityRankListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getRankListGo_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_updateRankGo(taf::Int32 ret, const HUYA::ActivityRankRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_updateRankGo_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

    };
    /* proxy for client */
    class GoServantProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        typedef GoServantPrxCallbackImp<taf::Int32, const HUYA::ActivityRankRsp&> taf_getRankGoCb;
        typedef GoServantPrxCallbackImp<taf::Int32, const HUYA::ActivityRankListRsp&> taf_getRankListGoCb;
        typedef GoServantPrxCallbackImp<taf::Int32, const HUYA::ActivityRankRsp&> taf_updateRankGoCb;

        taf::Int32 getRankGo(const HUYA::ActivityRankReq & tReq,HUYA::ActivityRankRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getRankGo(GoServantPrxCallbackPtr callback,const HUYA::ActivityRankReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        taf::Int32 await_getRankGo(const HUYA::ActivityRankReq & tReq,HUYA::ActivityRankRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getRankGoCb> async_getRankGo(const HUYA::ActivityRankReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getRankGoCb> cb=new taf_getRankGoCb; async_getRankGo(cb,tReq,context);return cb; }

        taf::Int32 getRankListGo(const HUYA::ActivityRankListReq & tReq,HUYA::ActivityRankListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getRankListGo(GoServantPrxCallbackPtr callback,const HUYA::ActivityRankListReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        taf::Int32 await_getRankListGo(const HUYA::ActivityRankListReq & tReq,HUYA::ActivityRankListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getRankListGoCb> async_getRankListGo(const HUYA::ActivityRankListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getRankListGoCb> cb=new taf_getRankListGoCb; async_getRankListGo(cb,tReq,context);return cb; }

        taf::Int32 updateRankGo(const HUYA::UpdateActivityRankReq & tReq,HUYA::ActivityRankRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_updateRankGo(GoServantPrxCallbackPtr callback,const HUYA::UpdateActivityRankReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        taf::Int32 await_updateRankGo(const HUYA::UpdateActivityRankReq & tReq,HUYA::ActivityRankRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_updateRankGoCb> async_updateRankGo(const HUYA::UpdateActivityRankReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_updateRankGoCb> cb=new taf_updateRankGoCb; async_updateRankGo(cb,tReq,context);return cb; }

        GoServantProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<GoServantProxy> GoServantPrx;

    /* servant for server */
    class GoServant : public taf::Servant
    {
    public:
        virtual ~GoServant(){}
        virtual taf::Int32 getRankGo(const HUYA::ActivityRankReq & tReq,HUYA::ActivityRankRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getRankGo(taf::JceCurrentPtr current, taf::Int32 _ret, const HUYA::ActivityRankRsp &tRsp);

        virtual taf::Int32 getRankListGo(const HUYA::ActivityRankListReq & tReq,HUYA::ActivityRankListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getRankListGo(taf::JceCurrentPtr current, taf::Int32 _ret, const HUYA::ActivityRankListRsp &tRsp);

        virtual taf::Int32 updateRankGo(const HUYA::UpdateActivityRankReq & tReq,HUYA::ActivityRankRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_updateRankGo(taf::JceCurrentPtr current, taf::Int32 _ret, const HUYA::ActivityRankRsp &tRsp);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define HUYA_TestSt_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iNum,b.iNum);jce_copy_struct(a.sName,b.sName);



#include "GoServant.hpp"
#endif
