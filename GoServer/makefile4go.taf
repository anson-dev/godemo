TAF_PATH    :=/home/pangjinwei/taf

#-------------------------------------------------------------------------------

#export LC_ALL   = zh_CN.GB2312
#export LANG     = zh_CN.GB2312

#-------------------------------------------------------------------------------

CC          = gcc
CXX         = g++
CFLAGS      += -g -std=c++0x -Wno-deprecated -Wall
#-pg

#-------------------------------------------------------------------------------

#JCE2CPP     := ${TAF_PATH}/bin/jce2cpp ${J2CPP_FLAG}

J2CPP_FLAG  += --with-hpp --go
JCE2CPP     := ${TAF_PATH}/bin/jce2cpp
HCE2CPP     := ${TAF_PATH}/bin/hce2cpp

#-------------------------------------------------------------------------------

JCE_SRC     := $(wildcard *.jce)
JCE_H       := $(patsubst %.jce,%.h, $(JCE_SRC))
JCE_PURE_H  := $(patsubst %.jce,%.h, $(JCE_SRC))
JCE_GCH     := $(wildcard *.gch)
JCE_INTER   := $(if $(JCE_SRC), $(shell grep -ls interface $(JCE_SRC)))

ifneq ($(findstring --with-hpp,$(J2CPP_FLAG)),)
JCE_H       += $(patsubst %.jce,%.hpp, $(JCE_INTER))
JCE_CLEAN   := $(patsubst %.jce,%.cpp, $(JCE_INTER))
else
JCE_CPP     := $(patsubst %.jce,%.cpp, $(JCE_INTER))
JCE_OBJ     := $(patsubst %.jce,%.o, $(JCE_INTER))
JCE_CLEAN   += $(patsubst %.jce,%.hpp, $(JCE_INTER))
endif

HCE_SRC     := $(wildcard *.hce)
HCE_H       := $(patsubst %.hce,%.h, $(HCE_SRC))
HCE_CPP     := $(patsubst %.hce,%.cpp, $(HCE_SRC))
HCE_OBJ     := $(patsubst %.hce,%.o, $(HCE_SRC))

LOCAL_SRC   += $(sort $(wildcard *.cpp *.c) $(JCE_CPP) $(HCE_CPP))

LOCAL_OBJ   += $(patsubst %.cpp,%.o, $(patsubst %.c,%.o, $(LOCAL_SRC)))
DEP_FILE    := $(foreach obj, $(LOCAL_OBJ), $(dir $(obj)).$(basename $(notdir $(obj))).d)

PRX_GLUE_OBJ 	:= $(patsubst %.cpp,%.o, $(PRX_GLUE_FILE))
TARGET_PRX_GLUE := $(patsubst %.cpp,lib%.so, $(PRX_GLUE_FILE))
#TODO 需要获得所有依赖的go文件
GO_SRC 			:= $(shell find -name "*.go")

#-------------------------------------------------------------------------------

INCLUDE     += -I${TAF_PATH}/include -I./ -I/usr/include/mysql
#LIB         += -L${TAF_PATH}/lib -lpthread -ltaf -lutil -lmysqlclient -lz -ldl -lrt ${LIB_DIR}
LIB_32       += -L${TAF_PATH}/lib32 -lpthread -ltaf -lutil -lmysqlclient -lz -ldl -lrt ${LIB_DIR}
LIB_64       += -L${TAF_PATH}/lib64 -lpthread -ltaf -lutil -lmysqlclient -lz -ldl -lrt ${LIB_DIR}

#-----------------------------------------------------------------------------

include ${TAF_PATH}/make.rules.lp64

#-------------------------------------------------------------------------------

all : $(JCE_H) $(JCE_CPP) $(LOCAL_OBJ) $(TARGET) $(TARGETS) glue FORSTRIP

#-------------------------------------------------------------------------------

glue:${TARGET_GLUE}

${TARGET_GLUE} : ${GO_SRC} ${TARGET_PRX_GLUE}
	go build -buildmode=c-archive -o ${TARGET_GLUE} *.go

${TARGET_PRX_GLUE} : ${PRX_GLUE_OBJ} 
	$(CC) -m$(MFLAGS) $(LFLAGS) -shared -o $@ $^ $(LIB_$(MFLAGS))

#-------------------------------------------------------------------------------
ifeq ($(MFLAGS),all)

$(filter %.a,$(TARGET_32)) : $(LOCAL_OBJ_32) $(REMOTE_OBJ_32)
	ar r $@ $(LOCAL_OBJ_32)
$(filter %.a,$(TARGET_64)) : $(LOCAL_OBJ_64) $(REMOTE_OBJ_64)
	ar r $@ $(LOCAL_OBJ_64)

$(filter %.so,$(TARGET_32)) : $(LOCAL_OBJ_32) $(REMOTE_OBJ_32)
	$(CC) -m32 $(LFLAGS) -shared -o $@ $(LOCAL_OBJ_32) $(LIB_32)
$(filter %.so,$(TARGET_64)) : $(LOCAL_OBJ_64) $(REMOTE_OBJ_64)
	$(CC) -m64 $(LFLAGS) -shared -o $@ $(LOCAL_OBJ_64) $(LIB_64)

$(filter-out %.so %.a,$(TARGET_32)) : $(LOCAL_OBJ_32) $(REMOTE_OBJ_32)
	$(CXX) -m32 $(CFLAGS) -o $@ $^ $(INCLUDE) $(LIB_32)
$(filter-out %.so %.a,$(TARGET_64)) : $(LOCAL_OBJ_64) $(REMOTE_OBJ_64)
	$(CXX) -m64 $(CFLAGS) -o $@ $^ $(INCLUDE) $(LIB_64)

$(filter-out %.so %.a %.y,$(TARGETS_32)) : % : %.$(MFLAGS).o
	$(CXX) -m32 $(CFLAGS) -o $@ $^ $(INCLUDE) $(LIB_32)
$(filter-out %.so %.a %.y,$(TARGETS_64)) : % : %.$(MFLAGS).o
	$(CXX) -m64 $(CFLAGS) -o $@ $^ $(INCLUDE) $(LIB_64)
    
FORSTRIP:$(TARGET_32) $(TARGETS_64)
ifeq ($(STRIP_FLAG),Y)
	@strip $(TARGET_32) $(TARGETS_64)
endif

else

$(filter %.a,$(TARGET)) : $(LOCAL_OBJ) $(REMOTE_OBJ)
	ar r $@ $(LOCAL_OBJ)

$(filter %.so,$(TARGET)) : $(LOCAL_OBJ) $(REMOTE_OBJ)
	$(CC) -m$(MFLAGS) $(LFLAGS) -shared -o $@ $(LOCAL_OBJ) $(LIB)

$(filter-out %.so %.a,$(TARGET)) : $(LOCAL_OBJ) $(REMOTE_OBJ)
	$(CXX) -m$(MFLAGS) $(CFLAGS) -o $@ $^ $(INCLUDE) $(LIB)

$(filter-out %.so %.a %.y,$(TARGETS)) : % : %.$(MFLAGS).o
	$(CXX) -m$(MFLAGS) $(CFLAGS) -o $@ $^ $(INCLUDE) $(LIB)

FORSTRIP:$(TARGET) $(TARGETS)
ifeq ($(STRIP_FLAG),Y)
	@strip $(TARGET) $(TARGETS)
endif

endif

#----------------------------------------------------------------------------------

copyfile =  if test -z "$(APP)" || test -z "$(TARGET)"; then \
                echo "['APP' or 'TARGET' option is empty.]"; exit 1; \
            else \
                if test ! -d $(2); then \
                    echo "[No such dir:$(2), now we create it.]";\
                    mkdir -p $(2);\
                fi; \
                echo "[Copy file $(1) -> $(2)]"; \
                cp -v $(1) $(2); \
            fi;
#----------------------------------------------------------------------------------

#ifneq ($(JCE_SRC),)
$(JCE_H) $(JCE_CPP) : $(JCE_SRC)
	@echo "jce2cpp ${J2CPP_FLAG} "
	rm -vf $(JCE_H) $(JCE_CPP) $(JCE_OBJ)
	@echo "jce2cpp ${J2CPP_FLAG} "
	$(JCE2CPP) ${J2CPP_FLAG} $(JCE_SRC)
ifeq ($(GCH_FLAG),Y)
	@echo "gen gch..."
	$(CXX) -m64 $(CFLAGS) $(INCLUDE) $(JCE_PURE_H)
endif

#endif
#----------------------------------------------------------------------------------

ifneq ($(HCE_SRC),)
$(HCE_H) $(HCE_CPP) : $(HCE_SRC)
	rm -vf $(HCE_H) $(HCE_CPP) $(HCE_OBJ)
	$(HCE2CPP) $(HCE_SRC)

endif

tar: $(TARGET) $(CONFIG)
	@if [ -d $(TARGET)_tmp_dir ]; then \
		echo "dir has exist:$(TARGET)_tmp_dir, abort."; \
		exit 1; \
	else \
		mkdir $(TARGET)_tmp_dir $(TARGET)_tmp_dir/$(TARGET);\
		cp -rf $(TARGET) $(TARGET_PRX_GLUE) $(CONFIG) $(TARGET)_tmp_dir/$(TARGET)/; \
		cd $(TARGET)_tmp_dir; tar --exclude=".svn" --exclude="_svn" -czvf $(TARGET).tgz $(TARGET)/; cd ..; \
		if [ -f "$(TARGET).tgz" ]; then \
			mv -vf $(TARGET).tgz $(TARGET).`date +%Y%m%d%H%M%S`.tgz; \
		fi; \
		mv $(TARGET)_tmp_dir/$(TARGET).tgz ./; \
		rm -rf $(TARGET)_tmp_dir; \
		echo "tar cvfz $(TARGET).tgz ..."; \
	fi

upload: tar
	@echo "$(TARGET).tgz --- $(APP).$(TARGET).tgz"
	@myscp $(TARGET).tgz mqq@172.27.208.171:/usr/local/app/patch2test/$(APP).$(TARGET).tgz mqq2005
	@wget -O /tmp/$(APP).$(TARGET).wget.out "http://213.taf.wsd.com/pages/taf_server/doUpload.xjsp?SERVER=$(APP).$(TARGET)&TGZ=/usr/local/app/patch2test/$(APP).$(TARGET).tgz"
	@cat /tmp/$(APP).$(TARGET).wget.out

upload2hktest: tar
	@echo "$(TARGET).tgz --- $(APP).$(TARGET).tgz"
	@myscp $(TARGET).tgz mqq@172.27.194.159:/usr/local/app/patch2test/$(APP).$(TARGET).tgz mqq2005
	@wget -O /tmp/$(APP).$(TARGET).wget.out "http://159.taf.wsd.com/pages/taf_server/doUpload.xjsp?SERVER=$(APP).$(TARGET)&TGZ=/usr/local/app/patch2test/$(APP).$(TARGET).tgz"
	@cat /tmp/$(APP).$(TARGET).wget.out


#10.129.143.246 147.taf.wsd.com

upload2test: tar
	@echo "$(TARGET).tgz --- $(APP).$(TARGET).tgz"
	@myscp $(TARGET).tgz mqq@10.130.92.81:/usr/local/app/patch2test/$(APP).$(TARGET).tgz mqq2005
	@wget -O /tmp/$(APP).$(TARGET).wget.out "http://147.taf.wsd.com/pages/taf_server/doUpload.xjsp?SERVER=$(APP).$(TARGET)&TGZ=/usr/local/app/patch2test/$(APP).$(TARGET).tgz"
	@cat /tmp/$(APP).$(TARGET).wget.out

upload2testgrid: tar
	@echo "$(TARGET).tgz --- $(APP).$(TARGET).tgz"
	@myscp $(TARGET).tgz mqq@10.130.92.81:/usr/local/app/patch2test/$(APP).$(TARGET).tgz mqq2005
	@wget -O /tmp/$(APP).$(TARGET).wget.out "http://147.taf.wsd.com/pages/taf_server/doUpload.xjsp?SERVER=$(APP).$(TARGET)&TGZ=/usr/local/app/patch2test/$(APP).$(TARGET).tgz&grid=1"
	@cat /tmp/$(APP).$(TARGET).wget.out
	
HELP += $(HELP_TAR)

ifneq ($(JCE_SRC),)

ifeq ($(PLATFORM),x86_64)
JCE_OBJ		:= $(JCE_OBJ_32) $(JCE_OBJ_64)
endif

SERVER_NAME := $(TARGET)
SERVER_DIR  := /home/tafjce/$(APP)/$(SERVER_NAME)
SERVER_OBJ  := $(foreach file, $(JCE_OBJ),$(SERVER_DIR)/$(basename $(file)).o)
SERVER_OBJ	:= $(patsubst %.32.o,%.o,$(patsubst %.64.o,%.o, $(SERVER_OBJ)))
SERVER_OBJ	:= $(sort $(SERVER_OBJ))
RELEASE_JCE += $(JCE_SRC) $(JCE_H)

release: $(JCE_OBJ) $(JCE_H)
	@$(call copyfile, $(RELEASE_JCE) $(JCE_OBJ) $(JCE_GCH) [Mm]akefile , $(SERVER_DIR))
	echo "INCLUDE += -I$(SERVER_DIR)"  >  $(SERVER_DIR)/$(SERVER_NAME).mk;
	echo "REMOTE_OBJ += $(SERVER_OBJ)" >> $(SERVER_DIR)/$(SERVER_NAME).mk;

HELP += $(HELP_RELEASE)
endif
#----------------------------------------------------------------------------------

clean:
	rm -vf $(LOCAL_OBJ) $(TARGET) $(TARGETS) ${CLEANFILE} ${JCE_GCH} .*.d.tmp gmon.out

cleanall:
	rm -vf $(LOCAL_OBJ) $(JCE_H) $(JCE_CPP) $(JCE_CLEAN) $(HCE_H) $(HCE_CPP) $(TARGET) $(TARGETS) $(DEP_FILE) ${CLEANFILE} $(JCE_GCH) *.o .*.d.tmp .*.d gmon.out

HELP += $(HELP_CLEAN)
HELP += $(HELP_CLEANALL)

ifneq ($(DEP_FILE),)
-include $(DEP_FILE)
endif

HELP_RELEASE  = "\n\e[1;33mrelease\e[0m:\t[copy '\e[1;32m$(ICE_SRC) $(ICE_H) $(ICE_OBJ)\e[0m' -> '/home/tafjce/$(APP)/$(TARGET)']"
HELP_CLEAN    = "\n\e[1;33mclean\e[0m:\t\t[remove $(LOCAL_OBJ) $(TARGET)]"
HELP_CLEANALL = "\n\e[1;33mcleanall\e[0m:\t[clean & rm .*.d]"
HELP_TAR      = "\n\e[1;33mtar\e[0m:\t\t[will do 'tar $(TARGET).tgz $(RELEASE_FILE)']"

help:
	@echo -e $(HELP)"\n"

#-------------------------------------------------------------------------------

.%.32.d: %.cpp $(JCE_H) $(JCE_CPP)
	@echo "update $@ ..."; \
	echo -n $< | sed s/\.cpp/\.32.o:/ > $@; \
	$(CXX) $(CFLAGS) $(INCLUDE) -MM $< | sed '1s/.*.://' >> $@;

%.32.o: %.cpp
	$(CXX) -m32 $(CFLAGS) $(INCLUDE) -o $@ -c $<

.%.32.d: %.c
	@echo "update $@ ..."; \
	echo -n $< | sed s/\.c/\.32.o:/ > $@; \
	$(CC) $(INCLUDE) -MM $< | sed '1s/.*.://' >> $@;

%.32.o: %.c
	$(CC) -m32 $(CFLAGS) $(INCLUDE) -o $@ -c $<

#-------------------------------------------------------------------------------

.%.64.d: %.cpp $(JCE_H) $(JCE_CPP)
	@echo "update $@ ..."; \
	echo -n $< | sed s/\.cpp/\.64.o:/ > $@; \
	$(CXX) $(CFLAGS) $(INCLUDE) -MM $< | sed '1s/.*.://' >> $@;

%.64.o: %.cpp
	$(CXX) -m64 $(CFLAGS) $(INCLUDE) -o $@ -c $<

.%.64.d: %.c
	@echo "update $@ ..."; \
	echo -n $< | sed s/\.c/\.64.o:/ > $@; \
	$(CC) $(INCLUDE) -MM $< | sed '1s/.*.://' >> $@;

%.64.o: %.c
	$(CC) -m64 $(CFLAGS) $(INCLUDE) -o $@ -c $<

#----------------------------------------------------------------------------------

.%.d: %.cpp $(JCE_H) $(JCE_CPP)
	@echo "update $@ ..."; \
	echo -n $< | sed s/\.cpp/\.o:/ > $@; \
	$(CXX) $(CFLAGS) $(INCLUDE) -MM $< | sed '1s/.*.://' >> $@;

%.o: %.cpp
	$(CXX) -m$(MFLAGS) $(CFLAGS) $(INCLUDE) -o $@ -c $<

.%.d: %.c
	@echo "update $@ ..."; \
	echo -n $< | sed s/\.c/\.o:/ > $@; \
	$(CC) $(INCLUDE) -MM $< | sed '1s/.*.://' >> $@;

%.o: %.c
	$(CC) -m$(MFLAGS) $(CFLAGS) $(INCLUDE) -o $@ -c $<

#----------------------------------------------------------------------------------

format: 
	@echo "Formating..."; \
	astyle --ascii --style=allman --indent-namespaces --pad-oper --align-pointer=name --align-reference=name --add-brackets --break-blocks --pad-paren-in --unpad-paren --fill-empty-lines $(wildcard *.hpp) $(wildcard *.h) $(wildcard *.cpp) $(wildcard *.c);
	@echo "Formated."; \

check:
	@echo "Checking..."; \
	cppcheck --check-config --platform=unix64 --std=posix -DDEBUG=1 -D__cplusplus --enable=all $(INCLUDE) $(wildcard *.cpp) $(wildcard *.c)
	@echo "Checked."; \

jce: $(JCE_OBJ) $(JCE_H)
