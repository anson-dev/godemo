// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.6.6
// Generated from `GameLiveBase.jce'
// **********************************************************************

package HUYA

import (
	"taf/jce"
)

const REDIS_CONNECT_FAIL = -100

const REDIS_COMMAND_FAIL = -101

const REDIS_RECORD_NOT_EXIST = -102

const UTSMD5KEY = "UI-TASK-USER,{8001EC79-E45F-4db7-9B82-9508463C3DCF}"

const kSecPackTypeNobleTips = 1000
const kSecPackTypeNewNobleNotice = 1001
const kSecPackTypeNobleEnterNotice = 1002
const kSecPackTypeNobleSpeak = 1003
const kSecPackTypeNobleSpeakNew = 1004
const kecPackTypeNobleEnterSingle = 1005
const kSecPackTypeNobleEnd = 1203
const kSecPackTypeMessageNotice = 1400
const kSecPackTypeAdsBegin = 1500
const kSecPackTypeAdsPush = 1501
const KSecPackTypeAdsChannelPush = 1502
const kSecPackTypeAdsEnd = 2000
const KSecPackTypeSubscribeBegin = 3100
const kSecPackTypeSubscribePresenterNotice = 3101
const kSecPackTypeSubscribeInfoNotice = 3102
const kSecPackTypeSubscribeEnd = 3199
const kSecPackTypeBlackWordBc = 10000
const kSecPackTypeBlackWordBcNew = 10001
const kSecPackTourFieldAudienceNotice = 5151
const kPSecPackTourFieldPresenterNotice = 5152
const kPSecPackStampUserListNotice = 5160
const kPSecPackPrincessUpgradeNotice = 5161
const kPSecPackTop10PrincessGlamourListNotice = 5162
const kPSecPackTop10RicherListNotice = 5163
const kPSecPackRicherWeekRank10ChangeNotice = 5164
const kPSecPackGlamourWeekRank10ChangeNotice = 5165
const kPSecPackTop10RicherEnterNotice = 5166
const kSecPackTypeRecptionRankListNotice = 5170
const kSecPackTypeUserCardNotice = 6001
const kSecPackTypeUserInfoChange = 6002
const kSecPackTypeWeekStarPropsWeekChanged = 6100
const kSecPackVipEnterBanner = 6110
const kSecPackEnterPushInfoNotice = 6200
const kSecPackGameAdvertisementNotice = 6201
const kSecPackAdvanceUserEnterNotice = 6202
const kSecPackVipBarListNotice = 6210
const kSecPackWeekRankListNotice = 6220
const kSecPackWeekRankEnterBanner = 6221
const kSecPackWeekRankChangeBanner = 6222
const kSecPackFansRankListNotice = 6230
const kSecPackFansUsingBadgeInfoNotice = 6231
const kSecPackFansBadgeScoreChangedNotice = 6232
const kSecPackFansInfoNotice = 6233
const kSecPackUserGetGiftNotice = 6234
const kSecPackGiftBarNotice = 6250
const kSecPackChampionPresenterEnterChannel = 6260
const kSecPackActivityStatusNotice = 6270
const kSecPackPKStartNotice = 6302
const kSecPackPKEndNotice = 6303
const kSecPackPKRoundStartNotice = 6304
const kSecPackPKRoundEndNotice = 6305
const kSecPackPKInviteeNotice = 6306
const kSecPackPKInviterRsp = 6307
const kSecPackPKOpponentMsg = 6308
const kSecPackPKInfoNotice = 6320
const kSecPackPKLotteryNotice = 6321
const kSecPackPKSpeakNotice = 6322
const kSecPackTypeItemConsumBegin = 6500
const kSecPackTypeItemConsumSubNotify = 6501
const kSecPackTypeItemConsumTopNotify = 6502
const kSecPackTypeItemUpdateNotify = 6503
const kSecPackTypeItemPresenterNotify = 6504
const kSecPackTypeItemReloadNotify = 6505
const kSecPackTypeTreasureLotteryResultNotice = 6600
const kSecPackTypeTreasureNotice = 6601
const kSecPackTypeTreasureResultBroadcast = 6602
const kSecPackTypeTreasureStatNotice = 6603
const kSecPackTypeTreasureSendNotice = 6604
const kSecPackTypeTreasureLotteryResultBroadCast = 6605
const KSecPackTypeHongBaoInfoNotify = 6610
const KSecPackTypeHongBaoSubChannelNotify = 6611
const KSecPackTypeHongBaoAllChannelNotify = 6612
const KSecPackTypeHongBaoFecthSubChannelNotify = 6613
const KSecPackTypeHongBaoFetchFinishNotify = 6614
const KSecPackTypeHongBaoTimeCountdownNotify = 6615
const kSecPackTypeContributionPresenterNotify = 6630
const kSecPackTypeContributionRankNotify = 6631
const kSecPackTypeContributionRankChangeBanner = 6632
const kSecPackTypeShowScreenSkinNotify = 6640
const kSecPackTypeHideScreenSkinNotify = 6641
const kSecPackTypeShowPrePictureNotify = 6642
const kSecPackTypeHidePrePictureNotify = 6643
const kSecPackTypeItemConsumEnd = 7000
const kSecPackTypeClickPraiseNotice = 7010
const kSecPackTypeUserStampNotice = 7011
const kSecPackTypeGambleResultNoticePacket = 7012
const kSecPackTypeUserStampListNoticePacket = 7013
const kSecPackTypeVideoModeNoticePacket = 7014
const kSecPackTypeGrantLuckBagNotice = 7015
const kSecPackTypeGrantBigLuckBagNotice = 7016
const kSecPackTypePetardPanelInfoNotice = 7017
const kSecPackTypePetardRankInfoNotice = 7018
const kSecPackTypeRankChangeNotice = 7019
const kSecPackTypeClickLuckBagNotice = 7020
const kSecPackTypeMonsterEntryNotice = 7021
const kSecPackTypeAwardNotice = 7022
const kSecPackTypeBeatMonstorResultNotice = 7023
const kSecPackTypeCountDownNotice = 7024
const kSecPackTypeStandingsTopThreeNotice = 7025
const kSecPackTypeEndMonstorNotice = 7026
const kSecPackTypeGetFreePropNotice = 7027
const kSecPackTypeIntegralTopThreeNotice = 7030
const kSecPackTypeTopicListNotice = 7050
const kSecPackTypeBatchGameInfoNotice = 7500
const kSecPackTypeGameInfoChangeNotice = 7501
const kSecPackTypeEndHistoryGameNotice = 7502
const kSecPackTypeGameSettlementNotice = 7503
const kSecPackTypePresenterEndGameNotice = 7504
const kSecPackTypeBuyBetNotice = 7505
const kSecPackTypePresenterEndBreakGameNotice = 7506
const kSecPackTypeActiveGameRspNotice = 7507
const kSecPackTypeSuspendGameRspNotice = 7508
const kSecPackTypeResumeGameRspNotice = 7509
const kSecPackTypePresenterEndGameRspNotice = 7510
const kSecPackTypePanelInfoNotice = 7600
const kSecPackTypeRankInfoNotice = 7601
const kSecPackTypePresenterPopupNotice = 7602
const kSecPackTypeDownPlaneNotice = 7603
const kSecPackTypePlanePopupNotice = 7604
const kSecPackTypePlayPlaneRankChangeNotice = 7605
const kSecPackTypeBeginLiveNotice = 8000
const kSecPackTypeEndLiveNotice = 8001
const kSecPackTypeStreamSetting = 8002
const kSecPackTypeStreamEndNotice = 8003
const kSecPackTypeLiveInfoChangedNotice = 8004
const kSecPackTypeForceChangeStreamSettingNotice = 8005
const kSecPackTypeAttendeeCountNotice = 8006
const kSecPackTypeRePushCdnNotice = 8900
const kSecPackTypeAddCdnLineNotice = 8901
const kSecPackTypeLinkMicPresenterMessage = 9000
const kSecPackTypeReplayPresenterInLive = 9010
const kSecPackTypeReplayMessage = 9011
const KSecPackTypeTelecomSpeedup = 9012
const kSecPackTypeBlackWordsNotice = 10010
const kSecPackTypeTransmitMsg = 10020
const kSecPackTypeWelcomeTextNotice = 10030
const kSecPackTypeEnterLivePushConfig = 10031
const kSecPackTypeCoverHostPushConfig = 10032
const kSecPackTypeAuditorEnterLiveNotice = 10040
const kSecPackTypeAuditorRoleChangeNotice = 10041
const kSecPackTypeRoomAuditConfNotice = 10042
const kSecPackTypeUploadLog = 100100
const kSecPackTypeLMInviteReq = 42005
const kSecPackTypeLMInviteResp = 42006
const kSecPackTypeLMStatusChangeNotice = 42008
const kSecPackTypeLMRemovePresenterReq = 42009
const kConfigurableChatNotice = 43000
const kSecPackTypeInterveneCountRsp = 44000
const KSecPackTypeMLiveComment = 1000001
const KSecPackTypeMLiveFavor = 1000002
const KSecPackTypeMLiveLiveInfo = 1000003
const KSecPackTypeMLiveEnterLive = 1000004
const KSecPackTypeMLiveLeaveLive = 1000005
const KSecPackTypeMLivePresentGift = 1000006
const KSecPackTypeMLiveUserInteraction = 1000007
const KSecPackTypeMLiveEndLive = 1000008
const kSecPackTypeMLinkMicSwitchNotify = 1000009
const kSecPackTypeMLinkMicSeatStatNotify = 1000010
const kSecPackTypeMLinkMicStatNotifyOld = 1000011
const kSecPackTypeMLinkMicStatNotify = 1000012
const kSecPackTypeMVideoLinkMicStatNotify = 1000031
const kSecPackTypeMVideoLinkMicActionNotify = 1000032
const kSecPackTypeLiveFavorNotify = 1000101
const kSecPackTypeUserEnter = 1000102
const kSecPackTypeUserLeave = 1000103
const kSecPackTypeCorpsMsg = 1010001
const kSecPackTypeActivityCommon = 1010002
const kSecPackTypeActivityUserInfo = 1010004
const kSecPackTypeGuardianNoticeInfoList = 1020000
const kSecPackTypeGuardianPresenterInfoNotice = 1020001
const kSecPackTypeDailyPresentNotice = 1020002
const kSecPackTypeUserTeaseRecordsBroadcast = 1020100
const kSecPackTypeGameInfoNotice = 1020101
const kSecPackTypeEndGameNotice = 1020102
const kSecPackTypeLuckyUserNotice = 1020103
const kSecPackTypeGameStartNotice = 1020104
const kSecPackTypeBoxTaskCleanBroadcast = 1020200
const kSecPackTypeTexasActionResp = 1021003
const kSecPackTypeTexasCardInfoNotice = 1021004
const kSecPackTypeTexasActionNotice = 1021005
const kSecPackTypeTexasGameResultNotify = 1021006
const kSecPackTypeTexasRoundOverNotice = 1021007
const kSecPackTypeTexasDealCardsNotice = 1021008
const kSecPackTypeTexasGameOverNotify = 1021009
const kSecPackTyperShowCardActionNotify = 1021010
const kSecPackTypeTexasDelPlayerBroadcast = 1021011
const kSecPackTypeTexasNewGameBroadcast = 1021012
const kSecPackTypeTexasLiveInfoBroadcast = 1021013
const kSecPackTypeTexasPlayerLeaveBroadcast = 1021014
const kSecPackTypeTexasJoinGameBroadcast = 1021015
const kSecPackTypeTexasPlayerStatusBroadcast = 1021016
const kSecPackTypeTexasSpeakerBanBroadcast = 1021017
const kSecPackTypeTexasCountdownBroadcast = 1021018
const kSecPackTypeTexasRechargeBankrollBroadcast = 1021019

const kCardPackageUseTypeGambling = 30
const kCardPackageUseTypeGBTransferWB = 31
const kCardPackageUseTypeUseItem = 32
const kCardPackageUseTypeCard = 33
const kCardPackageUseTypeTreasure = 34
const kCardPackageUseTypeGoldBTransferGB = 35
const kCardPackageUseTypeGetGBAfterSettle = 36
const kCardPackageUseTypeYBTransferGB = 37
const kCardPackageUseTypeGambleCommission = 38
const kCardPackageUseTypePresentation = 39
const kCardPackageUseTypeManual = 40
const kCardPackageUseTypeGoldBAutoTransferGB = 41
const kCardPackageUseTypeBackFromDeposit = 42
const kCardPackageUseTypeGuardianPresentaton = 43
const kCardPackageUseTypeWebSpecialTopic = 44
const kCardPackageUseTypeBindingGBTransferGB = 45
const kCardPackageUseTypeGBTransferBindingGB = 46
const kCardPackageUseTypeNewTask = 47
const kCardPackageUseTypeJackpotBuy = 48
const kCardPackageUseTypeJackpotCharge = 49
const kCardPackageUseTypeDealPrsente = 50
const kCardPackageUseTypeGoddessVote = 51
const kCardPackageUseTypeBuyCreditByGB = 52
const kCardPackageUseTypeFansProps = 53
const kCardPackageUseTypeGoldTicket = 54
const kCardPackageUseTypeYSL = 55
const kCardPackageUseTypeYSLGambling = 56
const kCardPackageUseTypeGamblingBet = 57
const kCardPackageUseTypeGamblingBuyBet = 58
const kCardPackageUseTypeGamblingBetBack = 59
const kCardPackageUseTypeGamblingBuyBetBack = 60
const kCardPackageUseTypeMatchGamblePay = 61
const kCardPackageUseTypeMatchGambleRecharge = 62
const kCardPackageUseTypeHuYaPlayPlane = 63
const kCardPackageUseTypeHuYaClickPraise = 64
const kCardPackageUseTypeHongBaoBet = 65
const kCardPackageUseTypeHongBaoRechnage = 66
const kCardPackageUseTypeHongBaoBetBack = 67
const kCardPackageUseTypeJieDaiRuning = 69
const kCardPackageUseTypeOldDriverActivityWhiteBean = 70
const kCardPackageUseTypeHandDeductionGoldTicket = 71
const kCardPackageUsergeErrorFix = 72
const kCardPackageUseairForBug = 73
const kCardPackageUseTypePKGift = 74
const kCardPackageUseTypeGamblePayDeposit = 81
const kCardPackageUseTypeGambleBackDeposit = 82
const kCardPackageUseTypeAnnualLottery = 6000
const kCardPackageUseTypeTreasureMap = 6001
const kCardPackageUseTypeHideBullet = 6002
const kCardPackageUseTypeDreamTicketPresentation = 6003
const kCardPackageUseTypeWangYiGameWithGB = 6004
const kCardPackageUseTypeWangYiGameWithWB = 6005
const kCardPackageUseTypeRewardGB = 6006
const kCardPackageUseTypePunishGB = 6007
const kCardPackageUseTypeTieBaWB = 6008
const kCardPackageUseTypeFreezGBForCredit = 6009
const kCardPackageUseTypeThawGbForCredit = 6010
const kCardPackageUseTypeBlackGoldGB = 6011
const kCardPackageUseTypeBlackGoldWB = 6012
const kCardPackageUseTypeWangYi2GB = 6013
const kCardPackageUseTypeWangYi2WB = 6014
const kCardPackageUseTypeWuHunGB = 6015
const kCardPackageUseTypeWuHunWB = 6016
const kCardPackageUseTypeQianNvWB = 6017
const kCardPackageUseTypeQianNvGB = 6018
const kCardPackageUseTypeJiangHuGB = 6019
const kCardPackageUseTypeZiZuan = 6020
const kCardPackageUseTypeWarWorld = 6021
const kCardPackageUseTypeCsOnline = 6022
const kCardPackageUseTypeRepaireFailedRecharge = 6023
const kCardPackageUseTypeJiuYin = 6024
const kCardPackageUseTypeZuiLiu = 6025
const kCardPackageUseTypeSheDiao = 6026
const kCardPackageUseTypeJianNvYouHui = 6027
const kCardPackageUseTypeWeiTeQuan = 6028
const kCardPackageUseTypeJinGDong = 6029
const kCardPackageUseTypeFBToGB = 6030
const kCardPackageUseTypeGBToFB = 6031
const kCardPackageUseTypeTexasPoker = 6032
const kCardPackageUseTypeLingYu1 = 6033
const kCardPackageUseTypeLingYu2 = 6034
const kCardPackageUseTypeLingYu3 = 6035
const kCardPackageUseTypeLingYu4 = 6036
const kCardPackageUseTypeLingYu5 = 6037
const kCardPackageUseTypeLingYu6 = 6038
const kCardPackageUseTypeLingYu7 = 6040
const kCardPackageUseTypeRechargeFunnybean = 6041
const kCardPackageUseTypeYearCeremony = 6042
const kCardPackageUseTypePhoneCardBaKengMeng = 6043
const kCardPackageUseTypeTexasPokerInOfficial = 6044
const kCardPackageUseTypeTexasPokerOutOfficial = 6045
const kCardPackageUseTypeLinYuPacket1 = 6046
const kCardPackageUseTypeLinYuPacket2 = 6047
const kCardPackageUseTypeLinYuPacket3 = 6048
const kCardPackageUseTypeLinYuPacket5 = 6049
const kCardPackageUseTypePhoneSpread = 6050
const kCardPackageUseTypeYule = 6051
const kCardPackageUseTypeLiYuZhuboPK = 6052
const kCardPackageUseType1206ReRecharge = 6053
const kCardPackageUseType1206ReActConsume = 6054
const kCardPackageUseTypeHuyaApp = 6055
const kCardPackageUseType5153Ba = 6056
const kCardPackageUseType5153Meng = 6057
const kCardPackageUseType5153Whitebean = 6058
const kCardPackageUseTypeChaojiZiZuanYueFei = 6059
const kCardPackageUseTypeChaojiZiZuanJiFei = 6060
const kCardPackageUseTypeChaojiZiZuanNianFei = 6061
const kCardPackageUseTypeJingCaiFix = 6062
const kCardPackageUseTypeLingYuApple = 6063
const kCardPackageUseTypeJiHuoMaDuiHuan = 6064
const kCardPackageUseTypeHuYaTexasPoker = 6065
const kCardPackageUseTypeHero = 6066
const kCardPackageUseTypeMinDaiTianXia3888 = 6067
const kCardPackageUseTypeMinDaiTianXia2000 = 6068
const kCardPackageUseTypeJiaJingWen = 6069
const kCardPackageUseTypeAvengers = 6070
const kCardPackageUseTypeDailyRegister = 6071
const kCardPackageUseTypeAppXiaoMi = 6072
const kCardPackageUseTypeGoldBeanMarketing = 6073
const kCardPackageUseTypeFirstRechargeCard = 6074
const kCardPackageUseTypeNobleWar = 6075
const kCardPackageUseTypepresenterecology = 6076
const kCardPackageUseTypeSpecialGoldBean = 6099
const kCardPackageUseTypeActivityRecharge = 6111
const kCardPackageUseTypeAwardHeart = 6112
const kCardPackageUseTypeMoveStore = 6113
const kCardPackageUseTypeOnlineWatchAwardBean1Pc = 7001
const kCardPackageUseTypeOnlineWatchAwardBean2Pc = 7002
const kCardPackageUseTypeOnlineWatchAwardBean3Pc = 7003
const kCardPackageUseTypeOnlineWatchAwardBean4Pc = 7004
const kCardPackageUseTypeOnlineWatchAwardProp3Pc = 7013
const kCardPackageUseTypeOnlineWatchAwardProp4Pc = 7014
const kCardPackageUseTypeHuYaTexasPokerTransGameMoney = 7070
const kCardPackageUseTypeHuYaTexasPokerServiceFee = 7076
const kCardPackageUseTypeHuYaTexasPokerReward = 7077
const kCardPackageUseTypeHuYaTexasPokerOfficalServiceFee = 7078
const kCardPackageUseTypeHuYaTexasPokerFreeBankroll = 7079
const kCardPackageUseTypeHuYaPcActivity = 7080
const kCardPackageUseTypeHuYaTexasPokerFinishTutorialReward = 7081
const kCardPackageUseTypeHuYaTexasPokerPlayerRankReward = 7082
const kCardPackageUseTypeTeaseMonkeyJackPot = 7083
const kCardPackageUseTypeTeaseMonkeyByProps = 7084
const kCardPackageUseTypeTeaseMonkeyUserBonus = 7085
const kCardPackageUseTypeTeaseMonkeyProfit = 7086
const kCardPackageUseTypeTeaseMonkeyOwProfit = 7087
const kCardPackageUseTypeOnlineWatchAwardBean1Mobile = 8001
const kCardPackageUseTypeOnlineWatchAwardBean2Mobile = 8002
const kCardPackageUseTypeOnlineWatchAwardBean3Mobile = 8003
const kCardPackageUseTypeOnlineWatchAwardBean4Mobile = 8004
const kCardPackageUseTypeOnlineWatchAwardProp3Mobile = 8013
const kCardPackageUseTypeOnlineWatchAwardProp4Mobile = 8014
const kCardPackageUseTypeOnlineWatchAwardBean1Web = 9001
const kCardPackageUseTypeOnlineWatchAwardBean2Web = 9002
const kCardPackageUseTypeOnlineWatchAwardBean3Web = 9003
const kCardPackageUseTypeOnlineWatchAwardBean4Web = 9004
const kCardPackageUseTypeOnlineWatchAwardProp3Web = 9013
const kCardPackageUseTypeOnlineWatchAwardProp4Web = 9014
const kCardPackageUseTypeBBXPC = 9015
const kCardPackageUseTypeBBXWEB = 9016
const kCardPackageUseTypeBBXAPP = 9017

const BC_BY_TOPSID = 0
const BC_BY_SUBSID = 1
const BC_BY_USERGROUP = 2
const UC_BY_UID = 3

const YY_PROTOCOL = 0
const TAF_PROTOCOL = 1
const JSON_PROTOCOL = 2

const MALE = 0
const FEMALE = 1

const PC_YY = 0
const PC_HUYA = 1
const MOBILE_HUYA = 2
const WEB_HUYA = 3

const ELiveSourceType_GameLive = 0
const ELiveSourceType_MMS = 1
const ELiveSourceType_ShangJing = 2
const ELiveSourceType_HuyaVideo = 3
const ELiveSourceType_ShangJingRecord = 4
const ELiveSourceType_YYLive = 5
const ELiveSourceType_MobileLive = 6
const ELiveSourceType_MobileDirector = 7
const ELiveSourceType_WSRtmp = 8

const E_ALL = 1
const E_SOMECHANNEL = 2
const E_HOT = 3
const E_GAMEID = 4
const E_GAMETYPE = 5
const E_RECTYPE = 6

const EC_UNKNOWN = -901
const EC_SYSTEM_BUSY = -902
const EC_OK = 0
const EC_UNAVAILABLE = 903
const EC_INVALID_ARGUMENT = 904
const EC_NO_PRIVILEGE = 905
const EC_OVER_LIMIT = 906
const EC_OVER_COUNT_LIMIT = 907
const EC_OVER_TIME_LIMIT = 908
const EC_OVER_FREQUENCY_LIMIT = 909
const EC_ALWAYS_EXISTS = 910
const EC_NO_ENOUGH_MONEY = 911
const EC_NO_ENOUGH_ITEM = 912
const EC_TARGET_NOT_FOUND = 913
const EC_GOAL_NOT_COMPLATE = 914
const EC_MYSQL = 915
const EC_REDIS = 916
const EC_JSON_DECODE = 917
const EC_NO_TASK = 918
const EC_HTTP = 919
const EC_THRIFT = 920
const EC_ALREADY_GOT = 921
const EC_HUYA_LIMIT = 922
const EC_ANTI_BRUSH = 923
const EC_AUDIT_TEXT_FAIL = 924

const HUYABI = 800001
const RESIGNCARD = 800002
const EXP = 800003

const INCR = 1
const DECR = 2

const ERR_BOX_SUCCESS = 0
const ERR_BOX_NOT_FINISH = 501
const ERR_BOX_WAIGUA = 502
const ERR_BOX_RECHARGE_FAIL = 503

const OVERALL = 0
const PCU = 1
const FAMLE = 2

const SUB_LEVEL = 1
const PRESENTER_EXP = 2
const PRESENTER_EXP_ONLY = 3

const RETCODE_FAIL = -1
const RETCODE_OK = 0
const RETCODE_PERMISSIONDENIED = 1
const RETCODE_NORESOURCE = 2
const RETCODE_EXIST = 3
const RETCODE_NOTFOUND = 4
const RETCODE_MAINTAIN = 5
const RETCODE_INVALIDSESSIONID = 6
const RETCODE_NOROOM = 7
const RETCODE_SESSIONNOTFOUND = 8
const RETCODE_PRESENTERBAN = 9
const RETCODE_CHANNELBAN = 10
const RETCODE_PARAMERR = 11
const RETCODE_NOTENOUGHMONEY = 12
const RETCODE_SYSTEMERR = 13
const RETCODE_BETCLOSE = 14
const RETCODE_BETAMOUNTNOENOUGH = 15
const RETCODE_BETBOUGHT = 16
const RETCODE_ONLYONCE = 17
const RETCODE_NOTENOUGHTWHITEBEAN = 18
const RETCODE_TREASUREALREADYEXISTS = 19
const RETCODE_ISZERO = 20
const RETCODE_DEPOSITSYSTEMERR = 21
const RETCODE_GAMBLEMAINTENANCE = 22
const RETCODE_PROPSMAINTENANCE = 23
const RETCODE_SPEAKERBANLIMIT = 24
const RETCODE_SPEAKERWASBANNED = 25
const RETCODE_MYBANNEDUSER = 26
const RETCODE_NOTASK = 27
const RETCODE_TASKTAKEFAILED = 28
const RETCODE_JACKPOTNOTFOUND = 29
const RETCODE_JACKPOTNOUSERBUY = 30
const RETCODE_JACKOTMAXNUM = 31
const RETCODE_PRESENTERUIDINVALID = 32
const RETCODE_PRESENTERDESKTOPBAN = 33
const RETCODE_PRESENTERFINGGERPRINTBAN = 34
const RETCODE_TASKHASTAKED = 35
const RETCODE_POPUPUNCOOLDOWN = 36
const RETCODE_BEANSTORAGEIDCARDEEE = 37
const RETCODE_BEANSRORAGEPWDERR = 38
const RETCODE_LMPresenterNOTBEGIN = 39
const RETCODE_LMPresenterNOTACCEPT = 40
const RETCODE_LMPRESENTERNOTINWHITELISTORLEVEL = 41
const RETCODE_LMPRESENTERALREADYLINKING = 42
const RETCODE_LMPRESENTERXP = 43
const RETCODE_LMCONFIGERR = 44
const RETCODE_REQERR = 47
const RETCODE_TICKET_ERR = 48
const RETCODE_UNKONOWN = 65535

const VOD_READ = 1
const VOD_WRITE = 2

const Live_APP_INVALID = 0
const Live_APP_MOB_LIVE = 1

const Live_APP_INVALID_PROXY = 0
const Live_APP_WUP_PROXY = 1
const Live_APP_YY_PROXY = 2
const Live_APP_ONLINE_WUP_PROXY = 3
const Live_APP_WUP_DIRECT = 4
const Live_WebSocket_Proxy = 5
const Live_WebSocket_Activity = 6
const Live_WebSocket_Others = 7

const Live_ACCESS_SERVICE = 0
const Live_ACCESS_HTTP = 1

const PRESENTER_OPERATION_ONAIR = 1
const PRESENTER_OPERATION_OFFLINE = 2

const USER_IN = 1
const USER_OUT = 2
const USER_MOVE = 3

const PRIMARY = 1
const RECEPTION = 2

const STREAM_LINE_OLD_YY = 0
const STREAM_LINE_WS = 1
const STREAM_LINE_NEW_YY = 2
const STREAM_LINE_CC = 3

const DADI = 6
const JUNWANG = 5
const GONGJUE = 4
const LINGZHU = 3
const QISHI = 2
const JIANSHI = 1

const FIRST = 1
const RENEW = 2

const ISNOT_NOBLE = 1
const IS_NOBLE = 2
const LESS_DAY_NOBLE = 3
const PROTECT_NOBLE = 4

const GET_NOBLE_INFO_SQL_FAILED = -1
const GET_NOBLE_INFO_UNKNOWN_FAILED = -2
const ADD_GOLD_TICKET_FAILED = -3
const SET_NOBLE_INFO_FAILED = -4
const ADD_NEW_NOBLE_FAILED = -5
const SUCCESS = 1

const NORMAL_NOBLE = 0
const ACTIVITY_NOBLE = 1

const DESC = -1
const NORMAL = 0
const ASC = 1

const AT_ACTIVITY = 0
const AT_CHANNEL = 1
const AT_PRESENTER = 2

const ST_USER = 1

const SA_SUBSCRIBE = 1
const SA_UNSUBSCRIBE = 2

const RETCODE_SUBOVERTIMES = -4
const RETCODE_UNKNOW = -3
const RETCODE_NOTEXIST = -2
const RETCODE_OVERTIMES = -1
const RETCODE_SUCESS = 0
const RETCODE_LASTTIMES = 1

const ER_PAYRESPCODE_OK = 0
const ER_PAYRESPCODE_CONFIRM = 1
const ER_PAYRESPCODE_FAIL = 2
const ER_PAYRESPCODE_NOTENOUGHMONEY = 3
const ER_PAYRESPCODE_NOTINLEVEL = 4
const ER_PAYRESPCODE_NOTALLOW = 5
const ER_PAYRESPCODE_CLOSE = 6
const ER_PAYRESPCODE_PAYINFORETURN = 7
const ER_PAYRESPCODE_INVAILDTYPE = 8
const ER_PAYRESPCODE_OVERLIMIT = 9
const ER_PAYRESPCODE_UDB = 10
const ER_PAYRESPCODE_ANTIBRUSH = 11
const ER_PAYRESPCODE_PARAM = 12
const ER_PAYRESPCODE_NORESOURCE = 13
const ER_PAYRESPCODE_YBDJ = 14
const ER_PAYRESPCODE_OVERFREQUENCY = 15
const ER_PAYRESPCODE_ORDEREXIST = 16
const ER_PAYRESPCODE_INBACKLIST = 17

const TempletType_Default = 0
const TempletType_Jiedai = 1
const TempletType_Match = 2
const TempletType_DeZhou = 3
const TempletType_App = 4
const TempletType_Web = 5
const TempletType_ShangJing = 6

const EFFECTTYPE_NULL = 0
const EFFECTTYPE_YJZQ = 1
const EFFECTTYPE_QTYH = 2
const EFFECTTYPE_XXXY = 3
const EFFECTTYPE_MAIN_LOW = 4
const EFFECTTYPE_MAIN_MID = 5
const EFFECTTYPE_MAIN_TOP = 6
const EFFECTTYPE_MAIN_BIGGIFT = 7

const EFFECTCOLORTYPE_GREEN = 0
const EFFECTCOLORTYPE_BLUE = 1
const EFFECTCOLORTYPE_RED = 2
const EFFECTCOLORTYPE_GOLD = 3

const DISPLAY_TALKZONE = 1
const DISPLAY_MARQUEE = 2
const DISPLAY_BANNER = 4
const DISPLAY_CHATBANNER = 8
const DISPLAY_ENDDEFINE = 16

const PAYPLOY_FLAG = 1
const PAYPLOY_FREEITEM = 2
const PAYPLOY_WHITEBEAN = 4
const PAYPLOY_GREENBEAN = 8
const PAYPLOY_GOLDTICKET = 16
const PAYPLOY_MIBI = 32

const PAY_BY_FREE = 0
const PAY_BY_YB = 1
const PAY_BY_GREENBEAN = 2
const PAY_BY_WHITEBEAN = 3
const PAY_BY_GOLDTICKE = 4
const PAY_BY_MIBI = 5

const ENUM_LOGIN_PC = 1
const ENUM_LOGIN_ANDROID = 2
const ENUM_LOGIN_IOS = 3
const ENUM_LOGIN_WIN_PHONE = 4
const ENUM_LOGIN_WEB = 5
const ENUM_LOGIN_SJIOS = 6
const ENUM_LOGIN_SJANDRIOD = 7
const ENUM_LOGIN_XIAOMI = 8

const PaymentCode_OK = 1
const PaymentCode_ParamterError = -10
const PaymentCode_SignError = -11
const PaymentCode_OrderNotExist = -22
const PaymentCode_Unauthorized = -30
const PaymentCode_UserCancelPay = -31
const PaymentCode_NotEnoughMoney = -32
const PaymentCode_TimeOut = -34
const PaymentCode_RequestFrequently = -38
const PaymentCode_RiskControlException = -80
const PaymentCode_UserFreeze = -82

const ItemType_Main_Begin = 0
const ItemType_Speaker = 1
const ItemType_BaQi = 2
const ItemType_Kengdie = 3
const ItemType_Meng = 4
const ItemType_FreeBaQi = 5
const ItemType_FreeKengdie = 6
const ItemType_FreeMeng = 7
const ItemType_WhiteBean = 8
const ItemType_GreenBean = 9
const ItemType_BloodBottle = 10
const ItemType_DiaoBao = 11
const ItemType_Treasure = 12
const ItemType_BlueHeart = 13
const ItemType_V12Speaker = 14
const ItemType_V520Speaker = 15
const ItemType_BannedSpeaker = 16
const ItemType_BindingGreenBean = 17
const ItemType_MoBai = 18
const ItemType_FreeMoBai = 19
const ItemType_BlueBottle = 20
const ItemType_TeaEgg = 21
const ItemType_FunnyBean = 22
const ItemType_GiftGoldenBean = 23
const ItemType_GoldTicket = 32
const ItemType_Main_End = 45
const ItemType_JieDai_Begin = 48
const ItemType_RedHeart = 49
const ItemType_Lollipop = 50
const ItemType_Clap = 51
const ItemType_Balloon = 52
const ItemType_LoveLetter = 53
const ItemType_MemeDa = 54
const ItemType_BearHug = 55
const ItemType_Date = 56
const ItemType_Banana = 57
const ItemType_Rose = 58
const ItemType_Chocolate = 59
const ItemType_Perfume = 60
const ItemType_Lipstick = 61
const ItemType_DiamondRing = 62
const ItemType_OceanHeart = 63
const ItemType_GameMoney = 68
const ItemType_JieDai_End = 200
const ItemType_GaiZhang_Begin = 201
const ItemType_Luoli = 202
const ItemType_RuanMei = 203
const ItemType_BaoBei = 204
const ItemType_Beauty = 205
const ItemType_DiaoShi = 206
const ItemType_LaoWang = 207
const ItemType_Marriage = 208
const ItemType_DouBi = 209
const ItemType_XiaoQingXin = 210
const ItemType_Flavors = 211
const ItemType_SmallMeat = 212
const ItemType_GuaiShuLi = 213
const ItemType_TuHao = 214
const ItemType_Boss = 215
const ItemType_ZhuanShiNan = 216
const ItemType_BaiDaoZhongChai = 217
const ItemType_NanShen = 218
const ItemType_NvShen = 219
const ItemType_GaoFuShuai = 220
const ItemType_BaiFuMei = 221
const ItemType_Husband = 222
const ItemType_Wife = 223
const ItemType_GaiZhang_End = 300
const ItemType_Main_GaiZhang_Begin = 301
const ItemType_Main_GaiZhang_End = 400
const ItemType_ActivePropLang = 20035
const ItemType_HuYaTexasPoker_Song = 2001
const ItemType_HuYaTexasPoker_Hao = 2002
const ItemType_HuYaTexasPoker_ThanksBoss = 2003
const ItemType_HuYaTexasPoker_Bankroll = 2006
const ItemType_HuYaTexasPoker_Love = 20041
const ItemType_HuYaTexasPoker_GodHand = 20042
const ItemType_ActivePropsIDBounds = 20000

const SeqType_25 = 0
const SeqType_32 = 1
const SeqType_64 = 2

const PrizeType_Whitebean200 = 1
const PrizeType_Whitebean500 = 2
const PrizeType_Whitebean1000 = 3
const PrizeType_Whitebean5000 = 4
const PrizeType_Whitebean10000 = 5
const PrizeType_Whitebean50000 = 6
const PrizeType_Greenbean500 = 7
const PrizeType_Greenbean1000 = 8
const PrizeType_Greenbean10000 = 9
const PrizeType_Mobai = 10
const PrizeType_YYBig = 11
const PrizeType_YYSmall = 12
const PrizeType_Speaker = 13
const PrizeType_QB100 = 14
const PrizeType_Lang = 15

const LUCKMONEY_TYPE_NULL = 0
const LUCKMONEY_TYPE_BEST = 1
const LUCKMONEY_TYPE_FIRST = 2
const LUCKMONEY_TYPE_LAST = 4

const LuckMoenyStat_Waitting = 1
const LuckMoenyStat_Normal = 2
const LuckMoneyStat_Finish = 3
const LuckMoneyStat_TimeOut = 4
const LuckMoneyStat_Delete = 5

const IOCPT_IN = 0
const IOCPT_OUT = 1

const PCPT_Permanent = 0
const PCPT_Temporary = 1

const H264 = 0
const NV_H265 = 1
const NV_H264 = 2
const MY_H264 = 3
const INTEL_H265 = 4
const INTEL_H264 = 5
const X265 = 6

const ELiveCompatibleFlag_360 = 1
const ELiveCompatibleFlag_3D = 2
const ELiveCompatibleFlag_3D_TOPBOTTOM = 4

const ECompatibleFlag_PerformanceRequired = 1
const ECompatibleFlag_Disable = 2

const Optimization_Full = 0
const Optimization_Hight = 1
const Optimization_low = 2
const Optimization_close = 3

const CommonWeekStar = 0
const FaceWeekStar = 1

const CPEC_SYSTEMERR = -1
const CPEC_OK = 0
const CPEC_UNKOWN = 1
const CPEC_MYCLIENT = 2
const CPEC_NOMEMORY = 4
const CPEC_PERMISSIONDENIED = 5
const CPEC_NOCLIENTID = 6
const CPEC_NOSHARD = 7
const CPEC_NOENOUGH = 8
const CPEC_INVALID = 9
const CPEC_FAILED = 10
const CPEC_NOTFOUND = 11
const CPEC_PARAMERROR = 100
const CPEC_ITEM_EXPIRED = 101
const CPEC_NOT_ENOUGH = 102
const CPEC_USEITEM_ERR = 103
const CPEC_GET_ITEM_ERR = 104
const CPEC_ITEM_OVERFLOW = 105
const CPEC_NOTALLSUCC = 106
const CPEC_REORDER = 107
const CPEC_ORDERINVALID = 108
const CPEC_DELITEM_ERR = 109
const CPEC_TRAN_TIMEOUT = 110
const CPEC_USE_TYPE_INVALID = 111
const CPEC_RECHARDFAILED = 20001
const CPEC_RECHARGEAGAIN = 30001
const CPEC_USEAGAIN = 30002
const CPEC_USERINBLACKLIST = 30003

const CET_DEFAULT = 1
const CET_FLOATINGTIME = 2
const CET_UNEXPIRE = 3

const CIDT_FREE = 0
const CIDT_DIVIDE = 1

const IP_UNUSED = 0
const IP_ISSTORAGE = 2

const IS_ALL = -1
const IS_NOTSTORAGE = 0
const IS_ISSTORAGE = 2

const CP_OPRECHARGE = 1
const CP_OPUSE = 2
const CP_OPINOFFICIAL = 3
const CP_OPOUTOFFICIAL = 4
const CP_OPEXPIRED = 5
const CP_TRANSLATION = 6

const CP_GAMBLEOFFICIAL = 0
const CP_HUYATEXASOFFICIAL = 2

const IOS_IN = 0
const IOS_OUT = 1

const IOF_IN = 0
const IOF_OUT = 1

const PopupPresenter = 0
const PopupActivity = 1

const PopupAll = 0
const PopupPC = 1
const PopupPhone = 2
const PopupBox = 3

const PopupUnknown = -1
const PopupOK = 0
const PopupTooMany = 1
const PopupParamErr = 2
const PopupNameFilter = 3
const PopupFetchSubscribe = 4

const LMOK = 0
const LMPresenterNotBegin = 1
const LMPresenterNotAccept = 2
const LMPresenterNotInWhiteListOrLevel = 3
const LMPresenterAlreadyLinking = 4
const LkMPresenterXP = 5
const LMConfigErr = 6
const LMPresenterNoAuth = 7
const LMPresenterNoDX11 = 8
const LMPresenterInReady = 9
const LMPresenterNotOwner = 10
const LMStatusErr = 11
const LMLess2 = 12
const LMHistoryErr = 13
const LMPresenterNotExist = 14
const LMPresenterNotInWhiteList = 15
const LMPresenterNotLevel = 16
const LMInvitedDeny = 17
const LMInviteCancle = 18
const LMMaxLimit = 19
const LMVersion = 20
const LMPlayingPK = 21
const LMPresenterPending = 42
const LMErr = 100

const LMSettingReq = 0
const LMSettingUpdate = 1

const LMHistoryReq = 0
const LMHistoryUpload = 1
const LMHistoryDelete = 2

const LMReady = 1
const LMStarting = 2
const LMEnd = 3

const LMSAddOrUpdate = 1
const LMSDel = 2

const RC_FAIL = -1
const RC_OK = 0
const RC_InvalidUseFlag = 1
const RC_StopTimeError = 2
const RC_InvalidStopTime = 3
const RC_ChannelIDListIsEmpty = 4

const ERaffle_SYSERR = -1
const ERaffle_OK = 0
const ERaffle_UIDLISTERR = 1
const ERaffle_NOTENOUGH = 2
const ERaffle_NOTENOUGHPRIZE = 3
const ERaffle_EVENTNOTEXIST = 4

const EMatchErr = -1
const EMatchOK = 0
const EMatchExsit = 1
const EMatchNotFound = 2
const EMatchBeanTypeErr = 3
const EMatchBeanNotEnough = 4
const EMatchRangeErr = 5
const EMatchPayFailed = 6
const EMatchTansClosed = 7
const EMatchReqParaErr = 8
const EMatchExpireErr = 9
const EMatchBuyBeanOverLimitErr = 10

const SDEFAULT = 0
const SONLINE = 1
const SOFFLINE = 2

const TWEB = 0
const TTOPIC = 1
const TCCombine = 2

const kSubscribeNotify = 1
const kGambleNotify = 2

const kNotifyOpen = 0
const kNotifyClose = 1

const kNotice = 1
const kFeedback = 2
const kInformation = 4
const kGuess = 8
const kSubNotice = 16
const kScript = 32

const kAll = 1
const kAllUids = 2

const EVideoListType_DEFAULT = 0
const EVideoListType_NEW = 1
const EVideoListType_HOT = 2
const EVideoListType_UID = 3
const EVideoListType_EXCLUDE_UID = 4
const EVideoListType_KEYWORD = 5

const MActivityTargetType_ALL = 0
const MActivityTargetType_GAME = 1
const MActivityTargetType_SUBCHANNEL = 2
const MActivityTargetType_PRESENTER = 3
const MActivityTargetType_TOPCHANNEL = 4

const MActivityType_HOME = 1
const MActivityType_ROOM = 2
const MACTIVITYType_NOBLE = 3

const E_EMPTY = 0
const E_RADIO = 1
const E_LARGE = 2

const HotFixType_DEFAULT = 0

const HotFixScene_NONE = 0
const HotFixScene_StartUp = 1
const HotFixScene_WakeUp = 2

const MGE_Err = -1
const MGE_OK = 0
const MGE_Exsit = 1
const MGE_NotFound = 2
const MGE_BeanTypeErr = 3
const MGE_BeanNotEnough = 4
const MGE_RangeErr = 5
const MGE_PayFailed = 6
const MGE_TansClosed = 7
const MGE_ReqParaErr = 8

const MGS_QUERYALL = -1
const MGS_DEFAULT = 0
const MGS_ONLINE = 1
const MGS_OFFLINE = 2

const MGBT_WEB = 0
const MGBT_ScheduleUnit = 1
const MGBT_CCombine = 2

const kNoble = 1
const kGuard = 2
const kFans = 4

const INFO_DOWN = -1
const INFO_UNCHANGED = 0
const INFO_UP = 1
const INFO_BADGE_COUNT_LIMIT = 2

const TIPS_NONE = 0
const BADGE_SCORE_WILL_DECREASE = 1
const BADGE_SCORE_DECREASE = 2
const BADGE_WILL_LOSE = 3

const (
	E_STOPPK_NORMAL = iota + 0
	E_STOPPK_FORCE_TO
	E_STOPPK_LINK_MIC_FAILED
	E_STOPPK_OTHERS
)

const (
	E_INVITE_PK = iota + 0
	E_CANCEL_INVITE_PK
)

const (
	E_INVITATION_ACCPECT_PK = iota + 0
	E_INVITATION_REJECT_PK
	E_INVITATION_PK_ING_ERR
	E_INVITATION_LIVE_TYPE_ERR
	E_INVITATION_NOT_ONLINE_ERR
	E_INVITATION_LINK_MIC_NOT_SUPPORTED_ERR
	E_INVITATION_LINKING_MIC_ERR
	E_INVITATION_VERSION_ERR
	E_INVITATION_OTHER_ERR
)

const (
	E_PK_MODE = iota + 0
	E_PK_READY
	E_PK_ROUND_GOING
	E_PK_ROUND_FINISH
	E_PK_ROUND_CDTOSTART
	E_PK_END
)

const EPK_LEFT_WIN = -1
const EPK_DRAW = 0
const EPK_RIGHT_WIN = 1

const (
	EPK_D = iota + 0
	EPK_C
	EPK_B
	EPK_A
	EPK_S
	EPK_SS
)

const (
	EPK_GIFT_NONE = iota + 0
	EPK_GIFT_WHITE_BEAN
	EPK_GIFT_GOLD_BEAN
	EPK_GIFT_MENG
	EPK_GIFT_BA
	EPK_GIFT_LANG
)

const UR_VIEWER = 0
const UR_PLAYER = 1
const UR_PRESENTER = 2
const UR_NOSESSION = 3

const EMULDT_NONE = 0
const EMULDT_BYUIDS = 1
const EMULDT_BYSID = 2

const ILLEGAL_OTHER = 0
const ILLEGAL_PLUGIN = 1
const ILLEGAL_CHEAT_AD = 2
const ILLEGAL_SEXY = 3
const ILLEGAL_COPYRIGHT = 4
const ILLEGAL_CURSE = 5
const ILLEGAL_VOICE = 6

const EWT_GAME = 0
const EWT_PROFILE_WITHTAG = 1
const EWT_TID = 2
const EWT_STID = 3

const IDT_TCID = 0
const IDT_SCID = 1
const IDT_UID = 2
const IDT_BJGH = 3

const OT_ADD = 0
const OT_DEL = 1
const OT_MODIFY = 2

const E_OK = 0
const E_NotFound = 100
const E_Unknow = 101

const ENT_NEW = 0
const ENT_ENTER = 1

const EMO_ON = 1
const EMO_OFF = 2

const AdvertStatus_PrePublish = 0
const AdvertStatus_OnLine = 1
const AdvertStatus_OffLine = 2
const AdvertStatus_OutTime = 3

const SMALL_LUCK_BAG = 1
const BIG_LUCK_BAG = 2

const TASK_TYPE = 0
const SMALL_LUCK_BAG_TYPE = 1
const BIG_LUCK_BAG_TYPE = 2

const WARM_UP_TYPE = 1
const BEGIN_TYPE = 2
const MONSTOR_TYPE = 3
const BONUS_TYPE = 4
const END_TYPE = 5

const EBT_NORMAL = 0
const EBT_THUMP = 1
const EBT_CRIT = 2
const EBT_MAX = 3

const E_PLAYING = 0
const E_BYPRESENTER = 1
const E_ENDSESSION = 2
const E_ENDTIME = 3
const E_NOJACKPOT = 4
const E_TIMEOUT = 5
const E_OTHER = 6
const E_ChangeFirstMic = 7

const ECGRT_OK = 0
const ECGRT_UnknowErr = 1
const ECGRT_NoPermission = 2
const ECGRT_OutOfJackpotRange = 3
const ECGRT_GamePlaying = 4
const ECGRT_OutOfDailyTimes = 5
const ECGRT_MySqlErr = 6

const ETRC_OK = 0
const ETRC_UnknowErr = 1
const ETRC_GameOver = 2
const ETRC_ErrPara = 3
const ETRC_NotEnough = 4
const ETRC_JackpotNotEnough = 5

const MPT_HUYA = 0
const MPT_FANSCIRCLE = 1
const MPT_VIDEO = 2
const MPT_SHANGJING = 3
const MPT_NONE = -1

const EWSPushProtoTypeLow = 0
const EWSPushProtoTypeYY = 1
const EWSPushProtoTypeTaf = 2
const EWSPushProtoTypeMax = 3

const EWSCmd_NULL = 0
const EWSCmd_RegisterReq = 1
const EWSCmd_RegisterRsp = 2
const EWSCmd_WupReq = 3
const EWSCmd_WupRsp = 4
const EWSCmdC2S_HeartBeat = 5
const EWSCmdS2C_HeartBeatAck = 6
const EWSCmdS2C_MsgPushReq = 7
const EWSCmdC2S_DeregisterReq = 8
const EWSCmdS2C_DeRegisterRsp = 9
const EWSCmdC2S_VerifyCookieReq = 10
const EWSCmdS2C_VerifyCookieRsp = 11
const EWSCmdC2S_VerifyHuyaTokenReq = 12
const EWSCmdS2C_VerifyHuyaTokenRsp = 13

const EWSPushMsgTypeBcByTid = 1
const EWSPushMsgTypeBcByTidExUid = 2
const EWSPushMsgTypeBcBySid = 3
const EWSPushMsgTypeBcBySidExUid = 4
const EWSPushMsgTypeBcByGroup = 5
const EWSPushMsgTypeBcByTmpId = 6
const EWSPushMsgTypeUcByUid = 7
const EWSPushMsgTypeMcByUids = 8

const EWSDeRegisterFlag_ALL = 7
const EWSDeRegisterFlag_UID = 1
const EWSDeRegisterFlag_CHANNEL = 2
const EWSDeRegisterFlag_GROUP = 4

const EAR_SUPER_MANAGER = 1
const EAR_NORMAL_MANAGER = 2
const EAR_MUTED_USER = 3
const EAR_NORMAL_USER = 4
const EAR_BLACK_USER = 5

const EMT_NULL = 0
const EMT_GLOBAL = 1
const EMT_PID = 2
const EMT_BLACKLIST = 3
const EMT_SPEAKCD = 4
const EMT_NORAMALNOSEAK = 5
const EMT_IP = 6
const EMT_IGNORE = 7

const EAA_ADD = 1
const EAA_REVOKE = 2

const EMA_MuteSpeak = 0
const EMA_AddBlackList = 1
const EMA_MuteIP = 2

const EItem_NormalNoSpeak = 1001
const EItem_TextLimit = 1002
const EItem_SpeakCD = 1003
const EItem_ResetNoSpeakConf = 1004

const EGroup_SpeakSwitchConf = 600

const CT_NONE = 0
const CT_HEART = 1
const CT_DIAMOND = 2
const CT_SPADE = 3
const CT_CLUB = 4

const CN_NONE = 0
const CN_FAKE_ACE = 1
const (
	CN_TWO = iota + 2
	CN_THREE
	CN_FOUR
	CN_FIVE
	CN_SIX
	CN_SEVEN
	CN_EIGHT
	CN_NINE
	CN_TEN
	CN_JACK
	CN_QUEEN
	CN_KING
	CN_ACE
)

const DM_MANUAL = 0
const DM_AUTO = 1
const DM_SYSTEM = 2

const DEMO_FLAG_FALSE = 0
const DEMO_FLAG_TRUE = 1

const ChipType_FreeBean = 1
const ChipType_WhiteBean = 8
const ChipType_GreenBean = 9

const GOT_NONE = 0
const GOT_NORMAL = 1
const GOT_EXECPTION = 2
const GOT_DEALER_TIMEOUT = 3
const GOT_SETTLE_FAILD = 4
const GOT_MANUAL = 5

const TGS_INIT = 0
const TGS_PREFLOP = 1
const TGS_FLOP = 2
const TGS_TURN = 3
const TGS_RIVER = 4
const TGS_SETTLE = 5
const TGS_SHOWCARD = 6
const TGS_OVER = 7
const TGS_NODATA = 8
const TGS_CHECK_COUNTDOWN = 10
const TGS_WAIT_SETTLE = 99
const TGS_ERROR = 100
const TGS_LOCK = 101
const TGS_COUNTDOWN = 102
const TGS_COUNTDOWN_FINISH = 103

const CST_UNDEFINED = 0
const (
	CST_HIGHCARD = iota + 1
	CST_ONEPAIR
	CST_TWOPAIR
	CST_THREEOFKIND
	CST_STRAIGHT
	CST_FLUSH
	CST_FULLHOUSE
	CST_FOUROFKIND
	CST_STRAIGHTFLUSH
	CST_ROYALSTRAIGHTFLUSH
)

const kAT_NONE = 0
const kAT_BET = 1
const kAT_CALL = 2
const kAT_FOLD = 4
const kAT_CHECK = 8
const kAT_RAISE = 16
const kAT_ALLIN = 32
const kAT_SMALL_BLIND = 33
const kAT_BIG_BLIND = 34
const kAT_NEWCOMER_BLIND = 35
const kAT_DEAL_CARD = 64
const kAT_ACTION_NOTIFY = 65
const kAT_DEALER_NOTIFY = 66
const kAT_GATHER_BET = 67
const kAT_GAME_RESULT = 68
const kAT_SHOW_PRICARD_REQ = 69
const kAT_SHOW_PRICARD = 70
const kAT_ERROR = 71
const kAT_RETURN_BET = 72

const kRespOK = 0
const kPackage_CPEC_MYCLIENT = 2
const kPackage_CPEC_NOMEMORY = 4
const kPackage_CPEC_PERMISSIONDENIED = 5
const kPackage_CPEC_NOCLIENTID = 6
const kPackage_CPEC_NOSHARD = 7
const kPackage_CPEC_NOENOUGH = 8
const kPackage_CPEC_INVALID = 9
const kPackage_CPEC_FAILED = 10
const kPackage_CPEC_NOTFOUND = 11
const kPackage_CPEC_PARAMERROR = 100
const kPackage_CPEC_ITEM_EXPIRED = 101
const kPackage_CPEC_NOT_ENOUGH = 102
const kPackage_CPEC_USEITEM_ERR = 103
const kPackage_CPEC_GET_ITEM_ERR = 104
const kPackage_CPEC_ITEM_OVERFLOW = 105
const kPackage_CPEC_NOTALLSUCC = 106
const kPackage_CPEC_REORDER = 107
const kPackage_CPEC_ORDERINVALID = 108
const kPackage_CPEC_DELITEM_ERR = 109
const kPackage_CPEC_TRAN_TIMEOUT = 110
const kPackage_CPEC_RECHARDFAILED = 20001
const kPackage_CPEC_RECHARGEAGAIN = 30001
const kPackage_CPEC_USEAGAIN = 30002
const kPackage_CPEC_USERINBLACKLIST = 30003
const kDroppedGame = 20002
const kNotEnoughBean = 20003
const kGameNotFinish = 20004
const kGameSettleError = 20006
const kSeatedBySomeone = 20007
const kErrorOperation = 20008
const kNoGameLiveFound = 20009
const kGameIsPlaying = 20010
const kBankrollNotCorrect = 20012
const kUserIsSeated = 20013
const kAllSeatsTaken = 20014
const kInvalidAccount = 20015
const kExceedMaxDemoModePlayTimes = 20016
const kCardInfoErr = 20017
const kDealCardIsForbidden = 20018
const kGameLevelError = 20019
const kNoAuthority = 20020
const kDeskModelError = 20021
const kNoGuessAuthority = 20022
const kDeskNotExistError = 20023
const kNotEnoughPeople = 20024
const kOutOfLimit = 20025
const kDBError = 20026
const kJoinGamePositionError = 20027
const kFreeTicketNotMatch = 20028
const kCardInfoError = 20029
const kProhibitDealCard = 20030
const kTransItemTypeErr = 20031
const kParameterErr = 20032
const kLivieIsNotFinish = 20033
const kNotFoundPlayerInDesk = 20034
const kOpPackageDBError = 20035
const kUnknowErr = 20036
const kTexasLogicRunErr = 20037
const kCDKeyErr = 20038
const kCDKeyInvalid = 20039
const kSecondTimeInSameBatch = 20040
const kIsNotNewPlayer = 20041
const kTicketIsExpired = 20042

const kStatus_Playing = 0
const kStatus_DroppedGame = 1
const kStatus_WaitForNextGame = 2
const kStatus_NotEnoughBankroll = 3
const kStatus_Ready = 4
const kStatus_NotReady = 5

const kPresenter = 0
const kGambler = 1

const kStatBet = 1
const kStatBuy = 2
const kStatCancel = 3
const kStatBought = 4

const AUTH_OK = 1
const NOT_PLATINUM_UNION = 2
const NOT_AUTH_LEVEL = 3
const NOT_AUTH_RETRIEVE = 4
const NOT_AUTH_FREEZE = 5
const NOT_AUTH_USER = 6

const AGPW_OK = 0
const AGPW_MonthErr = 1
const AGPW_OtherErr = 2

const MLINKMIC_ACTION_BEGIN = 0
const MLINKMIC_OPEN = 1
const MLINKMIC_CLOSE = 2
const MLINKMIC_LOCK_SEAT = 3
const MLINKMIC_UNLOCK_SEAT = 4
const MLINKMIC_INVITE_USER = 5
const MLINKMIC_KICK_USER = 6
const MLINKMIC_MUTE_USER = 7
const MLINKMIC_UNMUTE_USER = 8
const MLINKMIC_GET_SEAT = 9
const MLINKMIC_RELEASE_SEAT = 10
const MLINKMIC_SPEAK_BEGIN = 11
const MLINKMIC_SPEAK_END = 12
const MLINKMIC_SPEAK_HOLD = 13
const (
	MLINKMIC_INVITE_USER_BAT = iota + 14
	MLINKMIC_ACTION_END
)

const MVIDEOLINKMIC_ACTION_BEGIN = 0
const MVIDEOLINKMIC_OPEN = 1
const MVIDEOLINKMIC_CLOSE = 2
const MVIDEOLINKMIC_INVITE_USER = 3
const MVIDEOLINKMIC_INVITE_ACCEPT = 4
const MVIDEOLINKMIC_INVITE_REJECT = 5
const MVIDEOLINKMIC_HANGUP = 6
const MVIDEOLINKMIC_INVITE_HOLD = 7
const MVIDEOLINKMIC_CONVERSATION_HOLD = 8
const MVIDEOLINKMIC_INVITE_TIMEOUT = 9
const MVIDEOLINKMIC_CONVERSATION_TIMEOUT = 10
const (
	MVIDEOLINKMIC_USER_HANGUP = iota + 11
	MVIDEOLINKMIC_ACTION_END
)

const kDecorationAppTypeCommon = 100
const kDecorationAppTypeChannel = 10000
const kDecorationAppTypeAdmin = 10100
const kDecorationAppTypeNoble = 10200
const kDecorationAppTypeGuard = 10300
const kDecorationAppTypeFans = 10400
const kDecorationAppTypeVIP = 10500
const kDecorationAppTyperPurpleDiamond = 10600
const kDecorationAppTypeStamp = 10700
const KDecorationAppTypeNobleEmoticon = 10800

const kDecorationViewTypeCustomized = 0
const kDecorationViewTypeText = 1
const kDecorationViewTypeIcon = 2

const kMessageShowModeDefault = 0
const kMessageShowModePubScreenOnly = 1
const kMessageShowModeBulletScreenOnly = 2

const MSGTERM_UNKNOW = 0
const MSGTERM_PC_YY = 1
const MSGTERM_PC_UWP = 2
const MSGTERM_WEB_FLASH = 3
const MSGTERM_WEB_EXTERNAL = 4
const MSGTERM_WEB_H5 = 5
const MSGTERM_MOB_IPHONE = 6
const MSGTERM_MOB_IPAD = 7
const MSGTERM_MOB_ADR = 8
const MSGTERM_MOB_ADRPAD = 9
const MSGTERM_MOB_ADRTV = 10

const INVALID_KEY = 100000
const PRESENTER_AUTH_FAILED = 100001
const PRESENTER_LIVING = 100002
const VERIFY_FAILED = 100003
const SERVER_ERROR = 100009
const RELYON_SERVER_ERROR = 100010

type UserId struct {
	lUid    int64
	sGuid   string
	sToken  string
	sHuYaUA string
	sCookie string
}

func (self *UserId) ResetDefault() {
}

func (self *UserId) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sGuid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sToken))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sHuYaUA))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sCookie))
	if err != nil {
		return err
	}
	return err
}

func (self *UserId) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGuid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sToken), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHuYaUA), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCookie), 4)
	if err != nil {
		return err
	}
	return err
}

type GameLiveTag struct {
	iTagId   int32
	sTagName string
	bIsShow  bool
}

func (self *GameLiveTag) ResetDefault() {
}

func (self *GameLiveTag) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTagId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sTagName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.bIsShow))
	if err != nil {
		return err
	}
	return err
}

func (self *GameLiveTag) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTagId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTagName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsShow), 2)
	if err != nil {
		return err
	}
	return err
}

type GameLiveInfo struct {
	lLiveId             int64
	lUid                int64
	lChannelId          int64
	iShortChannel       int32
	lSubchannel         int64
	sSubchannelName     string
	iGameId             int32
	sGameName           string
	iAttendeeCount      int32
	eGender             int32
	iAid                int32
	sNick               string
	sAvatarUrl          string
	iStartTime          int32
	iEndTime            int32
	iSourceType         int32
	bIsCameraOpen       bool
	bIsRoomSecret       bool
	sVideoCaptureUrl    string
	iCdnAttendee        int32
	lYYId               int64
	bCertified          bool
	iRecType            int32
	lSignChannel        int64
	sLiveDesc           string
	iLevel              int32
	sGameShortName      string
	iGameType           int32
	sPrivateHost        string
	iActivityCount      int32
	iStreamType         int32
	iBitRate            int32
	iResolution         int32
	iFrameRate          int32
	iIsMultiStream      int32
	iExeGameId          int32
	lExp                int64
	sReplayHls          string
	lMultiStreamFlag    int64
	iScreenType         int32
	iChannelType        int32
	sLocation           string
	iCodecType          int32
	vPresenterTags      []GameLiveTag
	vGameTags           []GameLiveTag
	lLiveCompatibleFlag int64
}

func (self *GameLiveInfo) ResetDefault() {
}

func (self *GameLiveInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSubchannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sSubchannelName))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iAttendeeCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.eGender))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iAid))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.iEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.bIsCameraOpen))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.bIsRoomSecret))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.sVideoCaptureUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.iCdnAttendee))
	if err != nil {
		return err
	}
	err = jis.ReadField(20, false, &(self.lYYId))
	if err != nil {
		return err
	}
	err = jis.ReadField(21, false, &(self.bCertified))
	if err != nil {
		return err
	}
	err = jis.ReadField(22, false, &(self.iRecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(23, false, &(self.lSignChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(24, false, &(self.sLiveDesc))
	if err != nil {
		return err
	}
	err = jis.ReadField(25, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(26, false, &(self.sGameShortName))
	if err != nil {
		return err
	}
	err = jis.ReadField(27, false, &(self.iGameType))
	if err != nil {
		return err
	}
	err = jis.ReadField(28, false, &(self.sPrivateHost))
	if err != nil {
		return err
	}
	err = jis.ReadField(29, false, &(self.iActivityCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(30, false, &(self.iStreamType))
	if err != nil {
		return err
	}
	err = jis.ReadField(31, false, &(self.iBitRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(32, false, &(self.iResolution))
	if err != nil {
		return err
	}
	err = jis.ReadField(33, false, &(self.iFrameRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(34, false, &(self.iIsMultiStream))
	if err != nil {
		return err
	}
	err = jis.ReadField(35, false, &(self.iExeGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(36, false, &(self.lExp))
	if err != nil {
		return err
	}
	err = jis.ReadField(37, false, &(self.sReplayHls))
	if err != nil {
		return err
	}
	err = jis.ReadField(38, false, &(self.lMultiStreamFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(39, false, &(self.iScreenType))
	if err != nil {
		return err
	}
	err = jis.ReadField(40, false, &(self.iChannelType))
	if err != nil {
		return err
	}
	err = jis.ReadField(41, false, &(self.sLocation))
	if err != nil {
		return err
	}
	err = jis.ReadField(42, false, &(self.iCodecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(43, false, &(self.vPresenterTags))
	if err != nil {
		return err
	}
	err = jis.ReadField(44, false, &(self.vGameTags))
	if err != nil {
		return err
	}
	err = jis.ReadField(45, false, &(self.lLiveCompatibleFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *GameLiveInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lLiveId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSubchannelName), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAttendeeCount), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eGender), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAid), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStartTime), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEndTime), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSourceType), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsCameraOpen), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsRoomSecret), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVideoCaptureUrl), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCdnAttendee), 19)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 20)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bCertified), 21)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRecType), 22)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSignChannel), 23)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveDesc), 24)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 25)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameShortName), 26)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameType), 27)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPrivateHost), 28)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActivityCount), 29)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStreamType), 30)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBitRate), 31)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iResolution), 32)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFrameRate), 33)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsMultiStream), 34)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iExeGameId), 35)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExp), 36)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sReplayHls), 37)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lMultiStreamFlag), 38)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScreenType), 39)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChannelType), 40)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLocation), 41)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCodecType), 42)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterTags), 43)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameTags), 44)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveCompatibleFlag), 45)
	if err != nil {
		return err
	}
	return err
}

type LiveListReq struct {
	tId         UserId
	lBeginId    int64
	iCount      int32
	iCond       int32
	lChannelId  int64
	lSubchannel int64
	iGameId     int32
	iGameType   int32
	iRecType    int32
}

func (self *LiveListReq) ResetDefault() {
}

func (self *LiveListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lBeginId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iCond))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSubchannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iGameType))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iRecType))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBeginId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCond), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannel), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameType), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRecType), 8)
	if err != nil {
		return err
	}
	return err
}

type LiveListRsp struct {
	vGameLiveInfos []GameLiveInfo
	lNextBeginId   int64
}

func (self *LiveListRsp) ResetDefault() {
}

func (self *LiveListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameLiveInfos))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lNextBeginId))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameLiveInfos), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lNextBeginId), 1)
	if err != nil {
		return err
	}
	return err
}

type LiveInfoReq struct {
	tId     UserId
	lLiveId int64
	lUid    int64
}

func (self *LiveInfoReq) ResetDefault() {
}

func (self *LiveInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 2)
	if err != nil {
		return err
	}
	return err
}

type LiveInfoRsp struct {
	tLiveInfo GameLiveInfo
}

func (self *LiveInfoRsp) ResetDefault() {
}

func (self *LiveInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tLiveInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tLiveInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type StartLiveReq struct {
	tId             UserId
	lUid            int64
	lChannelId      int64
	iShortChannel   int32
	lSubchannel     int64
	iGameId         int32
	iAid            int32
	iSourceType     int32
	bIsCameraOpen   bool
	bIsRoomSecret   bool
	sGameName       string
	eGender         int32
	sNick           string
	sSubchannelName string
	sAvatarUrl      string
	iStartTime      int32
	iEndTime        int32
	lYYId           int64
	bCertified      bool
	iRecType        int32
	lSignChannel    int64
	sLiveDesc       string
	iLevel          int32
	sGameShortName  string
	iGameType       int32
}

func (self *StartLiveReq) ResetDefault() {
}

func (self *StartLiveReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSubchannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iAid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.bIsCameraOpen))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.bIsRoomSecret))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.eGender))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.sSubchannelName))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.iStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.iEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.lYYId))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.bCertified))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.iRecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(20, false, &(self.lSignChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(21, false, &(self.sLiveDesc))
	if err != nil {
		return err
	}
	err = jis.ReadField(22, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(23, false, &(self.sGameShortName))
	if err != nil {
		return err
	}
	err = jis.ReadField(24, false, &(self.iGameType))
	if err != nil {
		return err
	}
	return err
}

func (self *StartLiveReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSourceType), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsCameraOpen), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsRoomSecret), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eGender), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSubchannelName), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStartTime), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEndTime), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bCertified), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRecType), 19)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSignChannel), 20)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveDesc), 21)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 22)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameShortName), 23)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameType), 24)
	if err != nil {
		return err
	}
	return err
}

type StartLiveRsp struct {
	tLiveInfo GameLiveInfo
	sMessage  string
}

func (self *StartLiveRsp) ResetDefault() {
}

func (self *StartLiveRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tLiveInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *StartLiveRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tLiveInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMessage), 1)
	if err != nil {
		return err
	}
	return err
}

type SynStartReq struct {
	tLiveInfo GameLiveInfo
	tId       UserId
}

func (self *SynStartReq) ResetDefault() {
}

func (self *SynStartReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tLiveInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *SynStartReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tLiveInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tId), 1)
	if err != nil {
		return err
	}
	return err
}

type StopLiveReq struct {
	tId     UserId
	lLiveId int64
}

func (self *StopLiveReq) ResetDefault() {
}

func (self *StopLiveReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	return err
}

func (self *StopLiveReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 1)
	if err != nil {
		return err
	}
	return err
}

type LiveIngReq struct {
	tId           UserId
	lLiveId       int64
	lUid          int64
	bIsCameraOpen bool
	bIsRoomSecret bool
}

func (self *LiveIngReq) ResetDefault() {
}

func (self *LiveIngReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.bIsCameraOpen))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.bIsRoomSecret))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveIngReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsCameraOpen), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsRoomSecret), 4)
	if err != nil {
		return err
	}
	return err
}

type LiveInfoByUidReq struct {
	tId   UserId
	vUids []int64
}

func (self *LiveInfoByUidReq) ResetDefault() {
}

func (self *LiveInfoByUidReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveInfoByUidReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	return err
}

type LiveInfoByUidRsp struct {
	vGameLiveInfos []GameLiveInfo
}

func (self *LiveInfoByUidRsp) ResetDefault() {
}

func (self *LiveInfoByUidRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameLiveInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveInfoByUidRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameLiveInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type LiveInfoByLiveIdReq struct {
	tId      UserId
	vLiveIds []int64
	bForce   bool
}

func (self *LiveInfoByLiveIdReq) ResetDefault() {
}

func (self *LiveInfoByLiveIdReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vLiveIds))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.bForce))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveInfoByLiveIdReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vLiveIds), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bForce), 2)
	if err != nil {
		return err
	}
	return err
}

type LiveInfoByLiveIdRsp struct {
	vGameLiveInfos []GameLiveInfo
}

func (self *LiveInfoByLiveIdRsp) ResetDefault() {
}

func (self *LiveInfoByLiveIdRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameLiveInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveInfoByLiveIdRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameLiveInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type LiveAttendeeByChannelReq struct {
	tId           UserId
	lChannelId    int64
	lSubChannelId int64
}

func (self *LiveAttendeeByChannelReq) ResetDefault() {
}

func (self *LiveAttendeeByChannelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAttendeeByChannelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 2)
	if err != nil {
		return err
	}
	return err
}

type LiveAttendeeByChannelRsp struct {
	iAttendeeCount int32
}

func (self *LiveAttendeeByChannelRsp) ResetDefault() {
}

func (self *LiveAttendeeByChannelRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iAttendeeCount))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAttendeeByChannelRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iAttendeeCount), 0)
	if err != nil {
		return err
	}
	return err
}

type LiveAttendeeList struct {
	lLiveId        int64
	lUid           int64
	lChannelId     int64
	lSubchannel    int64
	iAttendeeCount int32
}

func (self *LiveAttendeeList) ResetDefault() {
}

func (self *LiveAttendeeList) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubchannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iAttendeeCount))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAttendeeList) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lLiveId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAttendeeCount), 4)
	if err != nil {
		return err
	}
	return err
}

type LiveAttendeeListRsp struct {
	vLiveAttendeeLists []LiveAttendeeList
}

func (self *LiveAttendeeListRsp) ResetDefault() {
}

func (self *LiveAttendeeListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vLiveAttendeeLists))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAttendeeListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vLiveAttendeeLists), 0)
	if err != nil {
		return err
	}
	return err
}

type UpdateLiveReq struct {
	tId         UserId
	lUid        int64
	lChannelId  int64
	lSubchannel int64
	iGameId     int32
	sLiveDesc   string
	sGameName   string
	iNewGameId  int32
}

func (self *UpdateLiveReq) ResetDefault() {
}

func (self *UpdateLiveReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubchannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sLiveDesc))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iNewGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateLiveReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveDesc), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNewGameId), 7)
	if err != nil {
		return err
	}
	return err
}

type UpdateLiveRsp struct {
	tId   UserId
	lUid  int64
	iCode int32
}

func (self *UpdateLiveRsp) ResetDefault() {
}

func (self *UpdateLiveRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateLiveRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCode), 2)
	if err != nil {
		return err
	}
	return err
}

type NotifyUpdateReq struct {
	tId  UserId
	lUid int64
}

func (self *NotifyUpdateReq) ResetDefault() {
}

func (self *NotifyUpdateReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *NotifyUpdateReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type DailyTaskStatus struct {
	sTaskName string
	iStatus   int32
	sTaskTips string
}

func (self *DailyTaskStatus) ResetDefault() {
}

func (self *DailyTaskStatus) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sTaskName))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sTaskTips))
	if err != nil {
		return err
	}
	return err
}

func (self *DailyTaskStatus) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sTaskName), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTaskTips), 2)
	if err != nil {
		return err
	}
	return err
}

type UserInfo struct {
	lUid           int64
	vHuyaB         []int32
	iResignCard    int32
	iExp           int32
	iLevel         int32
	iCurLevelExp   int32
	iNextLevelExp  int32
	iHuyaB         int32
	iSignTaskStat  int32
	iWatchLiveStat int32
	iLevelTaskStat int32
	vTaskStatus    []DailyTaskStatus
}

func (self *UserInfo) ResetDefault() {
}

func (self *UserInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vHuyaB))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iResignCard))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iExp))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iCurLevelExp))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iNextLevelExp))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iHuyaB))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iSignTaskStat))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iWatchLiveStat))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iLevelTaskStat))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.vTaskStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *UserInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vHuyaB), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iResignCard), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iExp), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCurLevelExp), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNextLevelExp), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHuyaB), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSignTaskStat), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWatchLiveStat), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevelTaskStat), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vTaskStatus), 11)
	if err != nil {
		return err
	}
	return err
}

type GetUserInfoReq struct {
	tId  UserId
	lUid int64
	lSid int64
}

func (self *GetUserInfoReq) ResetDefault() {
}

func (self *GetUserInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	return err
}

type GetUserInfoResp struct {
	tUserInfo UserInfo
}

func (self *GetUserInfoResp) ResetDefault() {
}

func (self *GetUserInfoResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserInfoResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type UpdateUserInfoReq struct {
	tId       UserId
	lSid      int64
	lUid      int64
	iItemType int32
	iCount    int32
	iOper     int32
}

func (self *UpdateUserInfoReq) ResetDefault() {
}

func (self *UpdateUserInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iOper))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateUserInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOper), 5)
	if err != nil {
		return err
	}
	return err
}

type GetDailyLiveTimesReq struct {
	tId UserId
}

func (self *GetDailyLiveTimesReq) ResetDefault() {
}

func (self *GetDailyLiveTimesReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetDailyLiveTimesReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetDailyLiveTimesRsp struct {
	iTimes int32
}

func (self *GetDailyLiveTimesRsp) ResetDefault() {
}

func (self *GetDailyLiveTimesRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTimes))
	if err != nil {
		return err
	}
	return err
}

func (self *GetDailyLiveTimesRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTimes), 0)
	if err != nil {
		return err
	}
	return err
}

type FinishTaskReq struct {
	tId        UserId
	lUid       int64
	iTaskType  int32
	iTaskId    int32
	iSubTaskId int32
}

func (self *FinishTaskReq) ResetDefault() {
}

func (self *FinishTaskReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTaskType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTaskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iSubTaskId))
	if err != nil {
		return err
	}
	return err
}

func (self *FinishTaskReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubTaskId), 4)
	if err != nil {
		return err
	}
	return err
}

type GetUserTaskStatusReq struct {
	tId        UserId
	lUid       int64
	iTaskType  int32
	iTaskId    int32
	iSubTaskId int32
	sPassport  string
}

func (self *GetUserTaskStatusReq) ResetDefault() {
}

func (self *GetUserTaskStatusReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTaskType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTaskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iSubTaskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sPassport))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserTaskStatusReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubTaskId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPassport), 5)
	if err != nil {
		return err
	}
	return err
}

type GetUserTaskStatusResp struct {
	iStatus int32
}

func (self *GetUserTaskStatusResp) ResetDefault() {
}

func (self *GetUserTaskStatusResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserTaskStatusResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStatus), 0)
	if err != nil {
		return err
	}
	return err
}

type GetUserAwardStatusReq struct {
	tId        UserId
	lUid       int64
	iTaskType  int32
	iTaskId    int32
	iSubTaskId int32
	sPassport  string
}

func (self *GetUserAwardStatusReq) ResetDefault() {
}

func (self *GetUserAwardStatusReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTaskType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTaskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iSubTaskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sPassport))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserAwardStatusReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubTaskId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPassport), 5)
	if err != nil {
		return err
	}
	return err
}

type GetUserAwardStatusResp struct {
	iStatus     int32
	lUid        int64
	iTaskType   int32
	iTaskId     int32
	iTaskValue  int32
	tTaskStatus DailyTaskStatus
	iSubTaskId  int32
}

func (self *GetUserAwardStatusResp) ResetDefault() {
}

func (self *GetUserAwardStatusResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTaskType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTaskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iTaskValue))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.tTaskStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iSubTaskId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserAwardStatusResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStatus), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskValue), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTaskStatus), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubTaskId), 6)
	if err != nil {
		return err
	}
	return err
}

type AwardTaskPrizeReq struct {
	tId           UserId
	lSid          int64
	lUid          int64
	iTaskType     int32
	iTaskId       int32
	iItemType     int32
	iCount        int32
	iSubTaskId    int32
	sPassport     string
	iTerminalType int32
	fVersion      float32
	sTime         string
	sMd5          string
}

func (self *AwardTaskPrizeReq) ResetDefault() {
}

func (self *AwardTaskPrizeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTaskType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iTaskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iSubTaskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sPassport))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iTerminalType))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.fVersion))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.sMd5))
	if err != nil {
		return err
	}
	return err
}

func (self *AwardTaskPrizeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubTaskId), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPassport), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTerminalType), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.fVersion), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTime), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 12)
	if err != nil {
		return err
	}
	return err
}

type AwardTaskPrizeResp struct {
	iTaskType    int32
	iTaskId      int32
	iExtraBean   int32
	iNextBeanMin int32
	iNextBeanMax int32
	iMutil       int32
	iItemType    int32
	iCount       int32
	iSubTaskId   int32
}

func (self *AwardTaskPrizeResp) ResetDefault() {
}

func (self *AwardTaskPrizeResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTaskType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTaskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iExtraBean))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iNextBeanMin))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iNextBeanMax))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iMutil))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iSubTaskId))
	if err != nil {
		return err
	}
	return err
}

func (self *AwardTaskPrizeResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTaskType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iExtraBean), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNextBeanMin), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNextBeanMax), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMutil), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubTaskId), 8)
	if err != nil {
		return err
	}
	return err
}

type GetTaskConfigReq struct {
	tId      UserId
	lSid     int64
	fVersion float32
}

func (self *GetTaskConfigReq) ResetDefault() {
}

func (self *GetTaskConfigReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.fVersion))
	if err != nil {
		return err
	}
	return err
}

func (self *GetTaskConfigReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.fVersion), 2)
	if err != nil {
		return err
	}
	return err
}

type GetTaskConfigResp struct {
	sTaskConfig string
}

func (self *GetTaskConfigResp) ResetDefault() {
}

func (self *GetTaskConfigResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sTaskConfig))
	if err != nil {
		return err
	}
	return err
}

func (self *GetTaskConfigResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sTaskConfig), 0)
	if err != nil {
		return err
	}
	return err
}

type GetBusiConfigReq struct {
	tId UserId
}

func (self *GetBusiConfigReq) ResetDefault() {
}

func (self *GetBusiConfigReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetBusiConfigReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetBusiConfigResp struct {
	iHuyaLimit int32
}

func (self *GetBusiConfigResp) ResetDefault() {
}

func (self *GetBusiConfigResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iHuyaLimit))
	if err != nil {
		return err
	}
	return err
}

func (self *GetBusiConfigResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iHuyaLimit), 0)
	if err != nil {
		return err
	}
	return err
}

type GetLevelTaskConfigReq struct {
	tId UserId
}

func (self *GetLevelTaskConfigReq) ResetDefault() {
}

func (self *GetLevelTaskConfigReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetLevelTaskConfigReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetLevelTaskConfigResp struct {
	iFinishLevel int32
	iBaqiCount   int32
	iHuyaCount   int32
}

func (self *GetLevelTaskConfigResp) ResetDefault() {
}

func (self *GetLevelTaskConfigResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iFinishLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBaqiCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iHuyaCount))
	if err != nil {
		return err
	}
	return err
}

func (self *GetLevelTaskConfigResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iFinishLevel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBaqiCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHuyaCount), 2)
	if err != nil {
		return err
	}
	return err
}

type GetWebGameTaskConfigReq struct {
	tId UserId
}

func (self *GetWebGameTaskConfigReq) ResetDefault() {
}

func (self *GetWebGameTaskConfigReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetWebGameTaskConfigReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetWebGameTaskConfigResp struct {
	sWebGameTaskConfig string
}

func (self *GetWebGameTaskConfigResp) ResetDefault() {
}

func (self *GetWebGameTaskConfigResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sWebGameTaskConfig))
	if err != nil {
		return err
	}
	return err
}

func (self *GetWebGameTaskConfigResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sWebGameTaskConfig), 0)
	if err != nil {
		return err
	}
	return err
}

type AwardLevelTaskPrizeReq struct {
	tId    UserId
	lUid   int64
	lSid   int64
	iLevel int32
}

func (self *AwardLevelTaskPrizeReq) ResetDefault() {
}

func (self *AwardLevelTaskPrizeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *AwardLevelTaskPrizeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 3)
	if err != nil {
		return err
	}
	return err
}

type AwardLevelTaskPrizeResp struct {
	iLevel         int32
	iBaqiCount     int32
	iHuyaCount     int32
	iNextLevel     int32
	iNextBaqiCount int32
	iNextHuyaCount int32
}

func (self *AwardLevelTaskPrizeResp) ResetDefault() {
}

func (self *AwardLevelTaskPrizeResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBaqiCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iHuyaCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iNextLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iNextBaqiCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iNextHuyaCount))
	if err != nil {
		return err
	}
	return err
}

func (self *AwardLevelTaskPrizeResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iLevel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBaqiCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHuyaCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNextLevel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNextBaqiCount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNextHuyaCount), 5)
	if err != nil {
		return err
	}
	return err
}

type IsFinishDailyWatchTaskReq struct {
	tId  UserId
	lSid int64
}

func (self *IsFinishDailyWatchTaskReq) ResetDefault() {
}

func (self *IsFinishDailyWatchTaskReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *IsFinishDailyWatchTaskReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	return err
}

type IsFinishDailyWatchTaskResp struct {
	iFlag int32
}

func (self *IsFinishDailyWatchTaskResp) ResetDefault() {
}

func (self *IsFinishDailyWatchTaskResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *IsFinishDailyWatchTaskResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iFlag), 0)
	if err != nil {
		return err
	}
	return err
}

type TenMinutesAddExpReq struct {
	tId  UserId
	lSid int64
	lUid int64
}

func (self *TenMinutesAddExpReq) ResetDefault() {
}

func (self *TenMinutesAddExpReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *TenMinutesAddExpReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 2)
	if err != nil {
		return err
	}
	return err
}

type BeginOnlineTaskReq struct {
	tId UserId
}

func (self *BeginOnlineTaskReq) ResetDefault() {
}

func (self *BeginOnlineTaskReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, true, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *BeginOnlineTaskReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type BeginOnlineTaskResp struct {
	iResult int32
}

func (self *BeginOnlineTaskResp) ResetDefault() {
}

func (self *BeginOnlineTaskResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iResult))
	if err != nil {
		return err
	}
	return err
}

func (self *BeginOnlineTaskResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iResult), 0)
	if err != nil {
		return err
	}
	return err
}

type EnterChannelNotifyReq struct {
	tId  UserId
	lUid int64
}

func (self *EnterChannelNotifyReq) ResetDefault() {
}

func (self *EnterChannelNotifyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *EnterChannelNotifyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type AdItem struct {
	iAid     int32
	sViewUrl string
	sJumpUrl string
	iWeight  int32
}

func (self *AdItem) ResetDefault() {
}

func (self *AdItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iAid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sViewUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sJumpUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iWeight))
	if err != nil {
		return err
	}
	return err
}

func (self *AdItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iAid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sViewUrl), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sJumpUrl), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeight), 3)
	if err != nil {
		return err
	}
	return err
}

type GetAdListReq struct {
	tId       UserId
	iFromType int32
	sVer      string
}

func (self *GetAdListReq) ResetDefault() {
}

func (self *GetAdListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iFromType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sVer))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAdListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFromType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVer), 2)
	if err != nil {
		return err
	}
	return err
}

type GetAdListRsp struct {
	vAdList []AdItem
}

func (self *GetAdListRsp) ResetDefault() {
}

func (self *GetAdListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vAdList))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAdListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vAdList), 0)
	if err != nil {
		return err
	}
	return err
}

type AdEventNoticeReq struct {
	tId           UserId
	iFromType     int32
	iAid          int32
	lPresenterUid int64
	iEventType    int32
	sVer          string
}

func (self *AdEventNoticeReq) ResetDefault() {
}

func (self *AdEventNoticeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iFromType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iAid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iEventType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sVer))
	if err != nil {
		return err
	}
	return err
}

func (self *AdEventNoticeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFromType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEventType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVer), 5)
	if err != nil {
		return err
	}
	return err
}

type BoxTaskInfo struct {
	iStat      int32
	iItemType  int32
	iItemCount int32
}

func (self *BoxTaskInfo) ResetDefault() {
}

func (self *BoxTaskInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStat))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iItemCount))
	if err != nil {
		return err
	}
	return err
}

func (self *BoxTaskInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStat), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCount), 2)
	if err != nil {
		return err
	}
	return err
}

type GetUserBoxInfoReq struct {
	tId UserId
}

func (self *GetUserBoxInfoReq) ResetDefault() {
}

func (self *GetUserBoxInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserBoxInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetUserBoxInfoRsp struct {
	lUid   int64
	tTask1 BoxTaskInfo
	tTask2 BoxTaskInfo
	tTask3 BoxTaskInfo
	tTask4 BoxTaskInfo
	tTask5 BoxTaskInfo
	tTask6 BoxTaskInfo
}

func (self *GetUserBoxInfoRsp) ResetDefault() {
}

func (self *GetUserBoxInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTask1))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tTask2))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.tTask3))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.tTask4))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.tTask5))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.tTask6))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserBoxInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTask1), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTask2), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTask3), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTask4), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTask5), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTask6), 7)
	if err != nil {
		return err
	}
	return err
}

type FinishTaskNoticeReq struct {
	tId       UserId
	lSid      int64
	lSubSid   int64
	iTaskId   int32
	sPassport string
	iFromType int32
	fVersion  float32
	sTime     string
	sMd5      string
}

func (self *FinishTaskNoticeReq) ResetDefault() {
}

func (self *FinishTaskNoticeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTaskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sPassport))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iFromType))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.fVersion))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sMd5))
	if err != nil {
		return err
	}
	return err
}

func (self *FinishTaskNoticeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPassport), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFromType), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.fVersion), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTime), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 8)
	if err != nil {
		return err
	}
	return err
}

type FinishTaskNoticeRsp struct {
	iRspCode int32
	iTaskId  int32
}

func (self *FinishTaskNoticeRsp) ResetDefault() {
}

func (self *FinishTaskNoticeRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTaskId))
	if err != nil {
		return err
	}
	return err
}

func (self *FinishTaskNoticeRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRspCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskId), 1)
	if err != nil {
		return err
	}
	return err
}

type AwardBoxPrizeReq struct {
	tId       UserId
	lSid      int64
	lSubSid   int64
	iTaskId   int32
	sPassport string
	iFromType int32
	fVersion  float32
	sTime     string
	sMd5      string
}

func (self *AwardBoxPrizeReq) ResetDefault() {
}

func (self *AwardBoxPrizeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTaskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sPassport))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iFromType))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.fVersion))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sMd5))
	if err != nil {
		return err
	}
	return err
}

func (self *AwardBoxPrizeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPassport), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFromType), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.fVersion), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTime), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 8)
	if err != nil {
		return err
	}
	return err
}

type AwardBoxPrizeRsp struct {
	iRspCode  int32
	iTaskId   int32
	iItemType int32
	iCount    int32
}

func (self *AwardBoxPrizeRsp) ResetDefault() {
}

func (self *AwardBoxPrizeRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTaskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iCount))
	if err != nil {
		return err
	}
	return err
}

func (self *AwardBoxPrizeRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRspCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 3)
	if err != nil {
		return err
	}
	return err
}

type BoxTaskCleanBroadcast struct {
	lTimestamp int64
}

func (self *BoxTaskCleanBroadcast) ResetDefault() {
}

func (self *BoxTaskCleanBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lTimestamp))
	if err != nil {
		return err
	}
	return err
}

func (self *BoxTaskCleanBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lTimestamp), 0)
	if err != nil {
		return err
	}
	return err
}

type RankListInfo struct {
	lUid                int64
	lChannelId          int64
	lSubchannel         int64
	lYYId               int64
	sNick               string
	sAvatarUrl          string
	iAttendeeCount      int32
	iGameType           int32
	sPrivateHost        string
	sLiveDesc           string
	iGameId             int32
	sGameName           string
	iRecType            int32
	iStartTime          int32
	iShortChannel       int32
	sVideoCaptureUrl    string
	sSubchannelName     string
	lSignChannel        int64
	lHuyaRankScore      int64
	bIsPtChannelFlag    bool
	iActivityCount      int32
	iHuyaLevel          int32
	iHuyaWealth         int32
	iBitRate            int32
	iSourceType         int32
	lLiveId             int64
	iScreenType         int32
	vPresenterTags      []GameLiveTag
	iAid                int32
	bCertified          bool
	sGameShortName      string
	iExeGameId          int32
	bIsCameraOpen       bool
	bIsRoomSecret       bool
	eGender             int32
	lLiveCompatibleFlag int64
	sLocation           string
}

func (self *RankListInfo) ResetDefault() {
}

func (self *RankListInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lYYId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iAttendeeCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iGameType))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sPrivateHost))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sLiveDesc))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iRecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.sVideoCaptureUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.sSubchannelName))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.lSignChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.lHuyaRankScore))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.bIsPtChannelFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(20, false, &(self.iActivityCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(21, false, &(self.iHuyaLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(22, false, &(self.iHuyaWealth))
	if err != nil {
		return err
	}
	err = jis.ReadField(23, false, &(self.iBitRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(24, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	err = jis.ReadField(25, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(26, false, &(self.iScreenType))
	if err != nil {
		return err
	}
	err = jis.ReadField(27, false, &(self.vPresenterTags))
	if err != nil {
		return err
	}
	err = jis.ReadField(28, false, &(self.iAid))
	if err != nil {
		return err
	}
	err = jis.ReadField(29, false, &(self.bCertified))
	if err != nil {
		return err
	}
	err = jis.ReadField(30, false, &(self.sGameShortName))
	if err != nil {
		return err
	}
	err = jis.ReadField(31, false, &(self.iExeGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(32, false, &(self.bIsCameraOpen))
	if err != nil {
		return err
	}
	err = jis.ReadField(33, false, &(self.bIsRoomSecret))
	if err != nil {
		return err
	}
	err = jis.ReadField(34, false, &(self.eGender))
	if err != nil {
		return err
	}
	err = jis.ReadField(35, false, &(self.lLiveCompatibleFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(36, false, &(self.sLocation))
	if err != nil {
		return err
	}
	return err
}

func (self *RankListInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAttendeeCount), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameType), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPrivateHost), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveDesc), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRecType), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStartTime), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVideoCaptureUrl), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSubchannelName), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSignChannel), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lHuyaRankScore), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsPtChannelFlag), 19)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActivityCount), 20)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHuyaLevel), 21)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHuyaWealth), 22)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBitRate), 23)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSourceType), 24)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 25)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScreenType), 26)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterTags), 27)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAid), 28)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bCertified), 29)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameShortName), 30)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iExeGameId), 31)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsCameraOpen), 32)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsRoomSecret), 33)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eGender), 34)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveCompatibleFlag), 35)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLocation), 36)
	if err != nil {
		return err
	}
	return err
}

type FilterRankListInfo struct {
	tLiveInfo     GameLiveInfo
	sFilterReason string
}

func (self *FilterRankListInfo) ResetDefault() {
}

func (self *FilterRankListInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tLiveInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sFilterReason))
	if err != nil {
		return err
	}
	return err
}

func (self *FilterRankListInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tLiveInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFilterReason), 1)
	if err != nil {
		return err
	}
	return err
}

type RankListReq struct {
	tId       UserId
	iGameId   int32
	iRankType int32
	iStart    int32
	iCount    int32
	iTagId    int32
}

func (self *RankListReq) ResetDefault() {
}

func (self *RankListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iRankType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iStart))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iTagId))
	if err != nil {
		return err
	}
	return err
}

func (self *RankListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRankType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStart), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTagId), 5)
	if err != nil {
		return err
	}
	return err
}

type RankListRsp struct {
	vRankLists []RankListInfo
}

func (self *RankListRsp) ResetDefault() {
}

func (self *RankListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vRankLists))
	if err != nil {
		return err
	}
	return err
}

func (self *RankListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vRankLists), 0)
	if err != nil {
		return err
	}
	return err
}

type FilterRankInfoReq struct {
	tId  UserId
	lUid int64
}

func (self *FilterRankInfoReq) ResetDefault() {
}

func (self *FilterRankInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *FilterRankInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type FilterRankInfoResp struct {
	tFilterRankInfo FilterRankListInfo
}

func (self *FilterRankInfoResp) ResetDefault() {
}

func (self *FilterRankInfoResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tFilterRankInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *FilterRankInfoResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tFilterRankInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type BatchFilterRankInfoReq struct {
	tId UserId
}

func (self *BatchFilterRankInfoReq) ResetDefault() {
}

func (self *BatchFilterRankInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchFilterRankInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type BatchFilterRankInfoResp struct {
	vFilterRankInfos []FilterRankListInfo
}

func (self *BatchFilterRankInfoResp) ResetDefault() {
}

func (self *BatchFilterRankInfoResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vFilterRankInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchFilterRankInfoResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vFilterRankInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type HotRecommendTheme struct {
	vContents   []GameLiveInfo
	sThemeTitle string
	sThemeLogo  string
	sLinkText   string
	sLink       string
	iThemeId    int32
}

func (self *HotRecommendTheme) ResetDefault() {
}

func (self *HotRecommendTheme) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vContents))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sThemeTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sThemeLogo))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sLinkText))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sLink))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iThemeId))
	if err != nil {
		return err
	}
	return err
}

func (self *HotRecommendTheme) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vContents), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sThemeTitle), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sThemeLogo), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLinkText), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLink), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iThemeId), 5)
	if err != nil {
		return err
	}
	return err
}

type HotRecommendReq struct {
	tId         UserId
	iReqType    int32
	iThemeCount int32
}

func (self *HotRecommendReq) ResetDefault() {
}

func (self *HotRecommendReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iReqType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iThemeCount))
	if err != nil {
		return err
	}
	return err
}

func (self *HotRecommendReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iReqType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iThemeCount), 2)
	if err != nil {
		return err
	}
	return err
}

type HotRecommendRsp struct {
	vThemes []HotRecommendTheme
}

func (self *HotRecommendRsp) ResetDefault() {
}

func (self *HotRecommendRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vThemes))
	if err != nil {
		return err
	}
	return err
}

func (self *HotRecommendRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vThemes), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterListReq struct {
	tId      UserId
	iRecType int32
	iGameId  int32
}

func (self *PresenterListReq) ResetDefault() {
}

func (self *PresenterListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iRecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRecType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 2)
	if err != nil {
		return err
	}
	return err
}

type PresenterListResp struct {
	vInfos []GameLiveInfo
}

func (self *PresenterListResp) ResetDefault() {
}

func (self *PresenterListResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterListResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type BlackWordsNoticePacket struct {
	lPresenterUid int64
	lChannelId    int64
	lSubchannel   int64
	sFilterReason string
}

func (self *BlackWordsNoticePacket) ResetDefault() {
}

func (self *BlackWordsNoticePacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sFilterReason))
	if err != nil {
		return err
	}
	return err
}

func (self *BlackWordsNoticePacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPresenterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFilterReason), 3)
	if err != nil {
		return err
	}
	return err
}

type PresenterTaskDictReq struct {
	tId             UserId
	iLevel          int32
	iSubLevel       int32
	iGrowthValue    int32
	iWealthLevel    int32
	iRefuelingVotes int32
	iTaskType       int32
	sTaskCondition  string
	sTaskDesc       string
}

func (self *PresenterTaskDictReq) ResetDefault() {
}

func (self *PresenterTaskDictReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iSubLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGrowthValue))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iWealthLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iRefuelingVotes))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iTaskType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sTaskCondition))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sTaskDesc))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterTaskDictReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGrowthValue), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWealthLevel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRefuelingVotes), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTaskCondition), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTaskDesc), 8)
	if err != nil {
		return err
	}
	return err
}

type WealthDictReq struct {
	tId          UserId
	iWealthLevel int32
	iWealth      int32
}

func (self *WealthDictReq) ResetDefault() {
}

func (self *WealthDictReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iWealthLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iWealth))
	if err != nil {
		return err
	}
	return err
}

func (self *WealthDictReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWealthLevel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWealth), 2)
	if err != nil {
		return err
	}
	return err
}

type PresenterLevelReq struct {
	tId          UserId
	lUid         int64
	iLevel       int32
	iSubLevel    int32
	iStatus      int32
	iGrowthValue int32
	iWealthValue int32
	iFailTime    int32
}

func (self *PresenterLevelReq) ResetDefault() {
}

func (self *PresenterLevelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iSubLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iGrowthValue))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iWealthValue))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iFailTime))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterLevelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubLevel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGrowthValue), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWealthValue), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFailTime), 7)
	if err != nil {
		return err
	}
	return err
}

type PresenterLabelReq struct {
	tId        UserId
	lUid       int64
	sLabel     string
	iLabelHeat int32
}

func (self *PresenterLabelReq) ResetDefault() {
}

func (self *PresenterLabelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, true, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sLabel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iLabelHeat))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterLabelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLabel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLabelHeat), 3)
	if err != nil {
		return err
	}
	return err
}

type HotLabelReq struct {
	tId    UserId
	iCount int32
}

func (self *HotLabelReq) ResetDefault() {
}

func (self *HotLabelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, true, &(self.iCount))
	if err != nil {
		return err
	}
	return err
}

func (self *HotLabelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 1)
	if err != nil {
		return err
	}
	return err
}

type HotLabel struct {
	sLabel string
}

func (self *HotLabel) ResetDefault() {
}

func (self *HotLabel) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, true, &(self.sLabel))
	if err != nil {
		return err
	}
	return err
}

func (self *HotLabel) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sLabel), 0)
	if err != nil {
		return err
	}
	return err
}

type HotLabelResp struct {
	vHotLabelLists []HotLabel
}

func (self *HotLabelResp) ResetDefault() {
}

func (self *HotLabelResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vHotLabelLists))
	if err != nil {
		return err
	}
	return err
}

func (self *HotLabelResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vHotLabelLists), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterHistoryTaskReq struct {
	tId             UserId
	lUid            int64
	iLevel          int32
	iSubLevel       int32
	iStatus         int32
	iConpleteStatus int32
	sTaskDesc       string
}

func (self *PresenterHistoryTaskReq) ResetDefault() {
}

func (self *PresenterHistoryTaskReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, true, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iSubLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iConpleteStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sTaskDesc))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterHistoryTaskReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubLevel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iConpleteStatus), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTaskDesc), 6)
	if err != nil {
		return err
	}
	return err
}

type OperateResp struct {
	result int32
}

func (self *OperateResp) ResetDefault() {
}

func (self *OperateResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, true, &(self.result))
	if err != nil {
		return err
	}
	return err
}

func (self *OperateResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.result), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterLevelInfoReq struct {
	tId   UserId
	vUids []int64
}

func (self *PresenterLevelInfoReq) ResetDefault() {
}

func (self *PresenterLevelInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterLevelInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	return err
}

type PresenterLevelResp struct {
	vPresenterLevelLists []PresenterLevelReq
}

func (self *PresenterLevelResp) ResetDefault() {
}

func (self *PresenterLevelResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, true, &(self.vPresenterLevelLists))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterLevelResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPresenterLevelLists), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterTaskListReq struct {
	tId  UserId
	lUid int64
}

func (self *PresenterTaskListReq) ResetDefault() {
}

func (self *PresenterTaskListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterTaskListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type PresenterTaskInfo struct {
	sCondition string
	iStatus    int32
	iType      int32
	sDesc      string
	iLevel     int32
	sReward    string
}

func (self *PresenterTaskInfo) ResetDefault() {
}

func (self *PresenterTaskInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sCondition))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sDesc))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sReward))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterTaskInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sCondition), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDesc), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sReward), 5)
	if err != nil {
		return err
	}
	return err
}

type PresenterTaskListResp struct {
	vPresenterLevelInfoLists []PresenterTaskInfo
}

func (self *PresenterTaskListResp) ResetDefault() {
}

func (self *PresenterTaskListResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, true, &(self.vPresenterLevelInfoLists))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterTaskListResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPresenterLevelInfoLists), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterTaskDictResp struct {
	vPresenterTaskDictLists []PresenterTaskDictReq
}

func (self *PresenterTaskDictResp) ResetDefault() {
}

func (self *PresenterTaskDictResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, true, &(self.vPresenterTaskDictLists))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterTaskDictResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPresenterTaskDictLists), 0)
	if err != nil {
		return err
	}
	return err
}

type WealthDictResp struct {
	vWealthDictLists []WealthDictReq
}

func (self *WealthDictResp) ResetDefault() {
}

func (self *WealthDictResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, true, &(self.vWealthDictLists))
	if err != nil {
		return err
	}
	return err
}

func (self *WealthDictResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vWealthDictLists), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterProfile struct {
	lUid      int64
	iSubLevel int32
	lExp      int64
}

func (self *PresenterProfile) ResetDefault() {
}

func (self *PresenterProfile) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iSubLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lExp))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterProfile) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubLevel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExp), 2)
	if err != nil {
		return err
	}
	return err
}

type GetPresenterProfileReq struct {
	tId  UserId
	lUid int64
}

func (self *GetPresenterProfileReq) ResetDefault() {
}

func (self *GetPresenterProfileReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPresenterProfileReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type InsertPresenterProfileReq struct {
	tId      UserId
	sProfile PresenterProfile
}

func (self *InsertPresenterProfileReq) ResetDefault() {
}

func (self *InsertPresenterProfileReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sProfile))
	if err != nil {
		return err
	}
	return err
}

func (self *InsertPresenterProfileReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sProfile), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdatePresenterProfileReq struct {
	tId    UserId
	lUid   int64
	iType  int32
	iValue int32
}

func (self *UpdatePresenterProfileReq) ResetDefault() {
}

func (self *UpdatePresenterProfileReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iValue))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdatePresenterProfileReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iValue), 3)
	if err != nil {
		return err
	}
	return err
}

type SynPresenterProfileReq struct {
	tId      UserId
	sProfile PresenterProfile
}

func (self *SynPresenterProfileReq) ResetDefault() {
}

func (self *SynPresenterProfileReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sProfile))
	if err != nil {
		return err
	}
	return err
}

func (self *SynPresenterProfileReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sProfile), 1)
	if err != nil {
		return err
	}
	return err
}

type PresenterProfileResp struct {
	sProfile PresenterProfile
}

func (self *PresenterProfileResp) ResetDefault() {
}

func (self *PresenterProfileResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sProfile))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterProfileResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sProfile), 0)
	if err != nil {
		return err
	}
	return err
}

type CommResp struct {
	iCode int32
}

func (self *CommResp) ResetDefault() {
}

func (self *CommResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *CommResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type BatchPresenterProfileReq struct {
	tId   UserId
	vUids []int64
}

func (self *BatchPresenterProfileReq) ResetDefault() {
}

func (self *BatchPresenterProfileReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchPresenterProfileReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	return err
}

type BatchPresenterProfileResp struct {
	vPresenterProfileLists []PresenterProfile
}

func (self *BatchPresenterProfileResp) ResetDefault() {
}

func (self *BatchPresenterProfileResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vPresenterProfileLists))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchPresenterProfileResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPresenterProfileLists), 0)
	if err != nil {
		return err
	}
	return err
}

type LevelExpInfo struct {
	iSubLevel int32
	iWealTask int32
	lNeedExp  int64
}

func (self *LevelExpInfo) ResetDefault() {
}

func (self *LevelExpInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSubLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iWealTask))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lNeedExp))
	if err != nil {
		return err
	}
	return err
}

func (self *LevelExpInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSubLevel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWealTask), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lNeedExp), 2)
	if err != nil {
		return err
	}
	return err
}

type LevelExpInfoReq struct {
	tId UserId
}

func (self *LevelExpInfoReq) ResetDefault() {
}

func (self *LevelExpInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *LevelExpInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type LevelExpInfoResp struct {
	vLevelExpInfoLists []LevelExpInfo
}

func (self *LevelExpInfoResp) ResetDefault() {
}

func (self *LevelExpInfoResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vLevelExpInfoLists))
	if err != nil {
		return err
	}
	return err
}

func (self *LevelExpInfoResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vLevelExpInfoLists), 0)
	if err != nil {
		return err
	}
	return err
}

type InsertNewLevelProfileReq struct {
	tId UserId
}

func (self *InsertNewLevelProfileReq) ResetDefault() {
}

func (self *InsertNewLevelProfileReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *InsertNewLevelProfileReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterInviteInfoReq struct {
	tId     UserId
	lSid    int64
	lSubSid int64
}

func (self *PresenterInviteInfoReq) ResetDefault() {
}

func (self *PresenterInviteInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterInviteInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	return err
}

type PresenterInviteInfoRsp struct {
	iRetCode              int32
	lSubscribeCount       int64
	lSubscribeOnlineCount int64
	iSubscribeOnlineBar   int32
	iClicksRatio          int32
	lClickCount           int64
	iClickBar             int32
	iCoolDownTime         int32
	isAutoinvite          int16
	vInviteUserCountList  []int64
}

func (self *PresenterInviteInfoRsp) ResetDefault() {
}

func (self *PresenterInviteInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubscribeCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubscribeOnlineCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iSubscribeOnlineBar))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iClicksRatio))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lClickCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iClickBar))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iCoolDownTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.isAutoinvite))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.vInviteUserCountList))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterInviteInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubscribeCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubscribeOnlineCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubscribeOnlineBar), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iClicksRatio), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lClickCount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iClickBar), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCoolDownTime), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.isAutoinvite), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vInviteUserCountList), 9)
	if err != nil {
		return err
	}
	return err
}

type PresenterInviteSubscribeFansReq struct {
	tId       UserId
	lSid      int64
	lSubSid   int64
	lShortSid int64
	sNickName string
}

func (self *PresenterInviteSubscribeFansReq) ResetDefault() {
}

func (self *PresenterInviteSubscribeFansReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lShortSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sNickName))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterInviteSubscribeFansReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lShortSid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 4)
	if err != nil {
		return err
	}
	return err
}

type PresenterInviteSubscribeFansRsp struct {
	iRetCode      int32
	iCoolDownTime int32
}

func (self *PresenterInviteSubscribeFansRsp) ResetDefault() {
}

func (self *PresenterInviteSubscribeFansRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCoolDownTime))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterInviteSubscribeFansRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCoolDownTime), 1)
	if err != nil {
		return err
	}
	return err
}

type PresenterSetAutoInviteReq struct {
	tId          UserId
	lSid         int64
	lSubSid      int64
	isAutoInvite int16
}

func (self *PresenterSetAutoInviteReq) ResetDefault() {
}

func (self *PresenterSetAutoInviteReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.isAutoInvite))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterSetAutoInviteReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.isAutoInvite), 3)
	if err != nil {
		return err
	}
	return err
}

type PresenterSetAutoInviteRsp struct {
	iRetCode int32
}

func (self *PresenterSetAutoInviteRsp) ResetDefault() {
}

func (self *PresenterSetAutoInviteRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterSetAutoInviteRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	return err
}

type ActivityInfo struct {
	lId           int64
	iType         int16
	iStatus       int16
	iIsPop        int16
	lTopSid       int64
	lSubSid       int64
	sTitle        string
	sContent      string
	sPicUrl       string
	sLinkUrl      string
	lStartTime    int64
	lEndTime      int64
	lLastModified int64
	iContentType  int16
}

func (self *ActivityInfo) ResetDefault() {
}

func (self *ActivityInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iIsPop))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sContent))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sPicUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sLinkUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.lEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.lLastModified))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iContentType))
	if err != nil {
		return err
	}
	return err
}

func (self *ActivityInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsPop), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTitle), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sContent), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPicUrl), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLinkUrl), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTime), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLastModified), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iContentType), 13)
	if err != nil {
		return err
	}
	return err
}

type PersonMessageCountReq struct {
	lTopSid int64
	lSubSid int64
	sUid    UserId
	lSuid   int64
}

func (self *PersonMessageCountReq) ResetDefault() {
}

func (self *PersonMessageCountReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSuid))
	if err != nil {
		return err
	}
	return err
}

func (self *PersonMessageCountReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lTopSid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSuid), 3)
	if err != nil {
		return err
	}
	return err
}

type PersonMessageCountResp struct {
	iRetcode         int32
	iNewMessageCount int32
}

func (self *PersonMessageCountResp) ResetDefault() {
}

func (self *PersonMessageCountResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetcode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iNewMessageCount))
	if err != nil {
		return err
	}
	return err
}

func (self *PersonMessageCountResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetcode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNewMessageCount), 1)
	if err != nil {
		return err
	}
	return err
}

type QueryActivityInfoReq struct {
	lTopSid int64
	lSubSid int64
	sUid    UserId
	lSuid   int64
}

func (self *QueryActivityInfoReq) ResetDefault() {
}

func (self *QueryActivityInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSuid))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryActivityInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lTopSid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSuid), 3)
	if err != nil {
		return err
	}
	return err
}

type QueryActivityInfoResp struct {
	iRetcode int32
	vInfos   []ActivityInfo
}

func (self *QueryActivityInfoResp) ResetDefault() {
}

func (self *QueryActivityInfoResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetcode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryActivityInfoResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetcode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vInfos), 1)
	if err != nil {
		return err
	}
	return err
}

type LinkMicTokenReq struct {
	tId     UserId
	lSid    int64
	lAppKey int64
	lExpire int64
}

func (self *LinkMicTokenReq) ResetDefault() {
}

func (self *LinkMicTokenReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lAppKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lExpire))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicTokenReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAppKey), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExpire), 3)
	if err != nil {
		return err
	}
	return err
}

type LinkMicTokenResp struct {
	lUid    int64
	lSid    int64
	lAppKey int64
	vToken  []byte
}

func (self *LinkMicTokenResp) ResetDefault() {
}

func (self *LinkMicTokenResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lAppKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vToken))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicTokenResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAppKey), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vToken), 3)
	if err != nil {
		return err
	}
	return err
}

type LiveYCloudTokenReq struct {
	tId     UserId
	lSid    int64
	lAppKey int64
	lExpire int64
	iBase64 int32
}

func (self *LiveYCloudTokenReq) ResetDefault() {
}

func (self *LiveYCloudTokenReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lAppKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lExpire))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iBase64))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveYCloudTokenReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAppKey), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExpire), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBase64), 4)
	if err != nil {
		return err
	}
	return err
}

type LiveYCloudTokenResp struct {
	lUid    int64
	lSid    int64
	lAppKey int64
	vToken  []byte
}

func (self *LiveYCloudTokenResp) ResetDefault() {
}

func (self *LiveYCloudTokenResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lAppKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vToken))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveYCloudTokenResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAppKey), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vToken), 3)
	if err != nil {
		return err
	}
	return err
}

type VodYCloudTokenReq struct {
	tId        UserId
	lAppKey    int64
	lExpire    int64
	iTokenType int32
	iBase64    int32
}

func (self *VodYCloudTokenReq) ResetDefault() {
}

func (self *VodYCloudTokenReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lAppKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lExpire))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTokenType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iBase64))
	if err != nil {
		return err
	}
	return err
}

func (self *VodYCloudTokenReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAppKey), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExpire), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTokenType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBase64), 4)
	if err != nil {
		return err
	}
	return err
}

type VodYCloudTokenResp struct {
	lUid       int64
	lAppKey    int64
	iTokenType int32
	vToken     []byte
}

func (self *VodYCloudTokenResp) ResetDefault() {
}

func (self *VodYCloudTokenResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lAppKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTokenType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vToken))
	if err != nil {
		return err
	}
	return err
}

func (self *VodYCloudTokenResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAppKey), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTokenType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vToken), 3)
	if err != nil {
		return err
	}
	return err
}

type LiveAppUAEx struct {
	sIMEI    string
	sAPN     string
	sNetType string
}

func (self *LiveAppUAEx) ResetDefault() {
}

func (self *LiveAppUAEx) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.sIMEI))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sAPN))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNetType))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAppUAEx) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sIMEI), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAPN), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNetType), 3)
	if err != nil {
		return err
	}
	return err
}

type LiveUserbase struct {
	eSource int32
	eType   int32
	tUAEx   LiveAppUAEx
}

func (self *LiveUserbase) ResetDefault() {
}

func (self *LiveUserbase) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.eSource))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.eType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tUAEx))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveUserbase) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.eSource), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tUAEx), 2)
	if err != nil {
		return err
	}
	return err
}

type LiveLaunchReq struct {
	tId     UserId
	tLiveUB LiveUserbase
}

func (self *LiveLaunchReq) ResetDefault() {
}

func (self *LiveLaunchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tLiveUB))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveLaunchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tLiveUB), 1)
	if err != nil {
		return err
	}
	return err
}

type LiveProxyValue struct {
	eProxyType int32
	sProxy     []string
}

func (self *LiveProxyValue) ResetDefault() {
}

func (self *LiveProxyValue) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.eProxyType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sProxy))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveProxyValue) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.eProxyType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sProxy), 1)
	if err != nil {
		return err
	}
	return err
}

type LiveLaunchRsp struct {
	sGuid      string
	iTime      int32
	vProxyList []LiveProxyValue
	eAccess    int32
}

func (self *LiveLaunchRsp) ResetDefault() {
}

func (self *LiveLaunchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sGuid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vProxyList))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.eAccess))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveLaunchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sGuid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTime), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vProxyList), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eAccess), 3)
	if err != nil {
		return err
	}
	return err
}

type PresenterMaixuReq struct {
	tId       UserId
	lTid      int64
	lSid      int64
	lShortTid int64
	eOp       int32
	lYYId     int64
	eSource   int32
}

func (self *PresenterMaixuReq) ResetDefault() {
}

func (self *PresenterMaixuReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lShortTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.eOp))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lYYId))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.eSource))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterMaixuReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lShortTid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eOp), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eSource), 6)
	if err != nil {
		return err
	}
	return err
}

type UserEventReq struct {
	tId           UserId
	lTid          int64
	lSid          int64
	lShortTid     int64
	eOp           int32
	sChan         string
	eSource       int32
	lPid          int64
	bWatchVideo   bool
	bAnonymous    bool
	eTemplateType int32
}

func (self *UserEventReq) ResetDefault() {
}

func (self *UserEventReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lShortTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.eOp))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sChan))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.eSource))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.bWatchVideo))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.bAnonymous))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.eTemplateType))
	if err != nil {
		return err
	}
	return err
}

func (self *UserEventReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lShortTid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eOp), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sChan), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eSource), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bWatchVideo), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bAnonymous), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eTemplateType), 10)
	if err != nil {
		return err
	}
	return err
}

type UserEventRsp struct {
	lTid                      int64
	lSid                      int64
	iUserHeartBeatInterval    int32
	iPresentHeartBeatInterval int32
}

func (self *UserEventRsp) ResetDefault() {
}

func (self *UserEventRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iUserHeartBeatInterval))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPresentHeartBeatInterval))
	if err != nil {
		return err
	}
	return err
}

func (self *UserEventRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lTid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUserHeartBeatInterval), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresentHeartBeatInterval), 3)
	if err != nil {
		return err
	}
	return err
}

type UserHeartBeatReq struct {
	tId         UserId
	lTid        int64
	lSid        int64
	lShortTid   int64
	lPid        int64
	bWatchVideo bool
	eLineType   int32
	iFps        int32
}

func (self *UserHeartBeatReq) ResetDefault() {
}

func (self *UserHeartBeatReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lShortTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.bWatchVideo))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.eLineType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iFps))
	if err != nil {
		return err
	}
	return err
}

func (self *UserHeartBeatReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lShortTid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bWatchVideo), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eLineType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFps), 7)
	if err != nil {
		return err
	}
	return err
}

type PresentHeartBeatReq struct {
	tId            UserId
	lTid           int64
	lSid           int64
	lShortTid      int64
	bIsCameraOpen  bool
	bIsRoomSecret  bool
	eSource        int32
	lLiveId        int64
	mReportMessage map[string]string
}

func (self *PresentHeartBeatReq) ResetDefault() {
}

func (self *PresentHeartBeatReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lShortTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.bIsCameraOpen))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.bIsRoomSecret))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.eSource))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.mReportMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *PresentHeartBeatReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lShortTid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsCameraOpen), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsRoomSecret), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eSource), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mReportMessage), 9)
	if err != nil {
		return err
	}
	return err
}

type GetUserOnlineInfoReq struct {
	tId   UserId
	vUids []int64
}

func (self *GetUserOnlineInfoReq) ResetDefault() {
}

func (self *GetUserOnlineInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserOnlineInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	return err
}

type UserOnlineInfo struct {
	bOnline     bool
	lTid        int64
	lSid        int64
	lShortTid   int64
	lPid        int64
	bWatchVideo bool
	eSource     int32
}

func (self *UserOnlineInfo) ResetDefault() {
}

func (self *UserOnlineInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.bOnline))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lShortTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.bWatchVideo))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.eSource))
	if err != nil {
		return err
	}
	return err
}

func (self *UserOnlineInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.bOnline), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lShortTid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bWatchVideo), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eSource), 6)
	if err != nil {
		return err
	}
	return err
}

type GetUserOnlineInfoRsp struct {
	vOnlineInfos []UserOnlineInfo
}

func (self *GetUserOnlineInfoRsp) ResetDefault() {
}

func (self *GetUserOnlineInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vOnlineInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserOnlineInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vOnlineInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type ChannelPair struct {
	lTid int64
	lSid int64
}

func (self *ChannelPair) ResetDefault() {
}

func (self *ChannelPair) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *ChannelPair) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lTid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetChannelOnlineInfoReq struct {
	tId       UserId
	vChanPair []ChannelPair
}

func (self *GetChannelOnlineInfoReq) ResetDefault() {
}

func (self *GetChannelOnlineInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vChanPair))
	if err != nil {
		return err
	}
	return err
}

func (self *GetChannelOnlineInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vChanPair), 1)
	if err != nil {
		return err
	}
	return err
}

type ChannelOnlineCount struct {
	lUserNum  int64
	eLineType int32
}

func (self *ChannelOnlineCount) ResetDefault() {
}

func (self *ChannelOnlineCount) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUserNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.eLineType))
	if err != nil {
		return err
	}
	return err
}

func (self *ChannelOnlineCount) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUserNum), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eLineType), 1)
	if err != nil {
		return err
	}
	return err
}

type ChannelOnlineInfo struct {
	tChanPair ChannelPair
	vCount    []ChannelOnlineCount
}

func (self *ChannelOnlineInfo) ResetDefault() {
}

func (self *ChannelOnlineInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tChanPair))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vCount))
	if err != nil {
		return err
	}
	return err
}

func (self *ChannelOnlineInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tChanPair), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vCount), 1)
	if err != nil {
		return err
	}
	return err
}

type GetChannelOnlineInfoRsp struct {
	vChanOnlineInfo []ChannelOnlineInfo
}

func (self *GetChannelOnlineInfoRsp) ResetDefault() {
}

func (self *GetChannelOnlineInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vChanOnlineInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetChannelOnlineInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vChanOnlineInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GetAllChannelOnlineInfoReq struct {
	tId UserId
}

func (self *GetAllChannelOnlineInfoReq) ResetDefault() {
}

func (self *GetAllChannelOnlineInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAllChannelOnlineInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetAllChannelOnlineInfoRsp struct {
	vChanOnlineInfo []ChannelOnlineInfo
}

func (self *GetAllChannelOnlineInfoRsp) ResetDefault() {
}

func (self *GetAllChannelOnlineInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vChanOnlineInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAllChannelOnlineInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vChanOnlineInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GetUserHistoryCond struct {
	iPage      int32
	iPerPage   int32
	iStartTime int32
	iEndTime   int32
}

func (self *GetUserHistoryCond) ResetDefault() {
}

func (self *GetUserHistoryCond) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPage))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPerPage))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iEndTime))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserHistoryCond) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPage), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPerPage), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStartTime), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEndTime), 3)
	if err != nil {
		return err
	}
	return err
}

type GetUserHistoryReq struct {
	tId   UserId
	lUid  int64
	tCond GetUserHistoryCond
}

func (self *GetUserHistoryReq) ResetDefault() {
}

func (self *GetUserHistoryReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tCond))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserHistoryReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tCond), 2)
	if err != nil {
		return err
	}
	return err
}

type UserHistoryData struct {
	lId         int64
	lPid        int64
	sPnick      string
	sIndiDomain string
	iGameId     int32
	sGameName   string
	sGameUrl    string
	sLiveIntro  string
	sScreenshot string
	eSource     int32
	iStartTime  int32
	iEndTime    int32
	lLiveId     int64
	lTid        int64
	lSid        int64
	lYYId       int64
	iAid        int32
}

func (self *UserHistoryData) ResetDefault() {
}

func (self *UserHistoryData) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sPnick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sIndiDomain))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sGameUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sLiveIntro))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sScreenshot))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.eSource))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.lYYId))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.iAid))
	if err != nil {
		return err
	}
	return err
}

func (self *UserHistoryData) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPnick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIndiDomain), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameUrl), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveIntro), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sScreenshot), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eSource), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStartTime), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEndTime), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAid), 16)
	if err != nil {
		return err
	}
	return err
}

type GetUserHistoryRsp struct {
	iTotalPages   int32
	iCurrentPage  int32
	lTotalNum     int64
	vHistoryDatas []UserHistoryData
}

func (self *GetUserHistoryRsp) ResetDefault() {
}

func (self *GetUserHistoryRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTotalPages))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCurrentPage))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lTotalNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vHistoryDatas))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserHistoryRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTotalPages), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCurrentPage), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTotalNum), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vHistoryDatas), 3)
	if err != nil {
		return err
	}
	return err
}

type NotifyInfoReq struct {
	tId                   UserId
	lPresenterAUid        int64
	lPresenterALevel      int64
	lPresenterBChannelId  int64
	lPresenterBSubchannel int64
	lPresenterBUid        int64
	lPresenterBLevel      int64
}

func (self *NotifyInfoReq) ResetDefault() {
}

func (self *NotifyInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterAUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPresenterALevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPresenterBChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPresenterBSubchannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lPresenterBUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lPresenterBLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *NotifyInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterAUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterALevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterBChannelId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterBSubchannel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterBUid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterBLevel), 6)
	if err != nil {
		return err
	}
	return err
}

type ActivityUserInfo struct {
	lUid       int64
	lTid       int64
	lSid       int64
	lPid       int64
	iFansLevel int32
	sColor     string
	iReserve   int32
	sReserve   string
}

func (self *ActivityUserInfo) ResetDefault() {
}

func (self *ActivityUserInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iFansLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sColor))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iReserve))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sReserve))
	if err != nil {
		return err
	}
	return err
}

func (self *ActivityUserInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFansLevel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sColor), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iReserve), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sReserve), 7)
	if err != nil {
		return err
	}
	return err
}

type NoblePayReq struct {
	iOp             int32
	sOrderId        string
	tUserId         UserId
	sNickName       string
	lPid            int64
	lTid            int64
	lSid            int64
	fPayValue       float32
	iNobleLevel     int32
	sNobleName      string
	lValidMonth     int64
	lPayTime        int64
	sActivationCode string
}

func (self *NoblePayReq) ResetDefault() {
}

func (self *NoblePayReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iOp))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.fPayValue))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sNobleName))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.lValidMonth))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.lPayTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.sActivationCode))
	if err != nil {
		return err
	}
	return err
}

func (self *NoblePayReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iOp), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOrderId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tUserId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.fPayValue), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNobleName), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lValidMonth), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPayTime), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActivationCode), 12)
	if err != nil {
		return err
	}
	return err
}

type NoblePayRsp struct {
	iPayResult int32
}

func (self *NoblePayRsp) ResetDefault() {
}

func (self *NoblePayRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPayResult))
	if err != nil {
		return err
	}
	return err
}

func (self *NoblePayRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPayResult), 0)
	if err != nil {
		return err
	}
	return err
}

type NobleInfoReq struct {
	tUserId  UserId
	iNoCache int32
}

func (self *NobleInfoReq) ResetDefault() {
}

func (self *NobleInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iNoCache))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNoCache), 1)
	if err != nil {
		return err
	}
	return err
}

type NobleInfo struct {
	lUid         int64
	lPid         int64
	lValidDate   int64
	sNobleName   string
	iNobleLevel  int32
	iNoblePet    int32
	iNobleStatus int32
	iNobleType   int32
}

func (self *NobleInfo) ResetDefault() {
}

func (self *NobleInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lValidDate))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNobleName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iNoblePet))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iNobleStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iNobleType))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lValidDate), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNobleName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNoblePet), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleStatus), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleType), 7)
	if err != nil {
		return err
	}
	return err
}

type NobleInfoRsp struct {
	tInfo NobleInfo
}

func (self *NobleInfoRsp) ResetDefault() {
}

func (self *NobleInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type ActivationCodeReq struct {
	sActivationCode string
	iNobleLevel     int32
	tUserId         UserId
}

func (self *ActivationCodeReq) ResetDefault() {
}

func (self *ActivationCodeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sActivationCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tUserId))
	if err != nil {
		return err
	}
	return err
}

func (self *ActivationCodeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sActivationCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tUserId), 2)
	if err != nil {
		return err
	}
	return err
}

type ActivationCodeItem struct {
	sActivationCode string
	lOwnerId        int64
	iValidTime      int32
	iNobleLevel     int32
	lUid            int64
	lPid            int64
}

func (self *ActivationCodeItem) ResetDefault() {
}

func (self *ActivationCodeItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sActivationCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lOwnerId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iValidTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *ActivationCodeItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sActivationCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lOwnerId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iValidTime), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 5)
	if err != nil {
		return err
	}
	return err
}

type ActivationCodeRsp struct {
	iCodeStatus int32
	lPid        int64
}

func (self *ActivationCodeRsp) ResetDefault() {
}

func (self *ActivationCodeRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCodeStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *ActivationCodeRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCodeStatus), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 1)
	if err != nil {
		return err
	}
	return err
}

type PresentNobleReq struct {
	tUserId UserId
}

func (self *PresentNobleReq) ResetDefault() {
}

func (self *PresentNobleReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	return err
}

func (self *PresentNobleReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	return err
}

type PresentNobleInfo struct {
	lUid        int64
	sNobleName  string
	iNobleLevel int32
	lValidDate  int64
	fIncome     float32
}

func (self *PresentNobleInfo) ResetDefault() {
}

func (self *PresentNobleInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNobleName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lValidDate))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.fIncome))
	if err != nil {
		return err
	}
	return err
}

func (self *PresentNobleInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNobleName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lValidDate), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.fIncome), 4)
	if err != nil {
		return err
	}
	return err
}

type PresentNobleRsp struct {
	vNobles []PresentNobleInfo
}

func (self *PresentNobleRsp) ResetDefault() {
}

func (self *PresentNobleRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vNobles))
	if err != nil {
		return err
	}
	return err
}

func (self *PresentNobleRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vNobles), 0)
	if err != nil {
		return err
	}
	return err
}

type NobleBase struct {
	lUid       int64
	sNickName  string
	iLevel     int32
	sName      string
	iPet       int32
	lPid       int64
	lTid       int64
	lSid       int64
	lStartTime int64
	lEndTime   int64
	iLeftDay   int32
	iStatus    int32
	iOpenFlag  int32
	iMonths    int32
	sPNickName string
}

func (self *NobleBase) ResetDefault() {
}

func (self *NobleBase) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPet))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.lEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iLeftDay))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iOpenFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iMonths))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.sPNickName))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleBase) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPet), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTime), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLeftDay), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOpenFlag), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMonths), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPNickName), 14)
	if err != nil {
		return err
	}
	return err
}

type NobleCountReq struct {
	tUserId UserId
}

func (self *NobleCountReq) ResetDefault() {
}

func (self *NobleCountReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.tUserId))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleCountReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 1)
	if err != nil {
		return err
	}
	return err
}

type NobleCountRsp struct {
	mLevelCount map[int32]int64
}

func (self *NobleCountRsp) ResetDefault() {
}

func (self *NobleCountRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.mLevelCount))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleCountRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.mLevelCount), 1)
	if err != nil {
		return err
	}
	return err
}

type NobleListReq struct {
	tUserId        UserId
	lUid           int64
	iNobleLevel    int32
	lPage          int64
	lCount         int64
	iSortLevelFlag int32
	iSortTimeFlag  int32
}

func (self *NobleListReq) ResetDefault() {
}

func (self *NobleListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPage))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iSortLevelFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iSortTimeFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPage), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lCount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSortLevelFlag), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSortTimeFlag), 7)
	if err != nil {
		return err
	}
	return err
}

type NobleListItem struct {
	lUid        int64
	iNobleLevel int32
	sNobleName  string
	lPid        int64
	lValidDate  int64
}

func (self *NobleListItem) ResetDefault() {
}

func (self *NobleListItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNobleName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lValidDate))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleListItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNobleName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lValidDate), 5)
	if err != nil {
		return err
	}
	return err
}

type NobleListRsp struct {
	vNobleList  []NobleListItem
	lTotalCount int64
}

func (self *NobleListRsp) ResetDefault() {
}

func (self *NobleListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.vNobleList))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lTotalCount))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vNobleList), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTotalCount), 2)
	if err != nil {
		return err
	}
	return err
}

type NobleTips struct {
	iTipsType int32
	iLeftDay  int32
}

func (self *NobleTips) ResetDefault() {
}

func (self *NobleTips) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTipsType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iLeftDay))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleTips) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTipsType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLeftDay), 1)
	if err != nil {
		return err
	}
	return err
}

type UserChannel struct {
	tUserId UserId
	lTid    int64
	lSid    int64
}

func (self *UserChannel) ResetDefault() {
}

func (self *UserChannel) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *UserChannel) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	return err
}

type NobleNotice struct {
	tNobleInfo NobleBase
}

func (self *NobleNotice) ResetDefault() {
}

func (self *NobleNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tNobleInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tNobleInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type NobleEnterNotice struct {
	tNobleInfo NobleBase
}

func (self *NobleEnterNotice) ResetDefault() {
}

func (self *NobleEnterNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tNobleInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleEnterNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tNobleInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type SenderItem struct {
	lSenderUid    int64
	lYYid         int64
	iSenderRole   int32
	iSenderGender int32
	sSenderNick   string
}

func (self *SenderItem) ResetDefault() {
}

func (self *SenderItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lYYid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iSenderRole))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iSenderGender))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	return err
}

func (self *SenderItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lSenderUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSenderRole), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSenderGender), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 4)
	if err != nil {
		return err
	}
	return err
}

type NobleItem struct {
	iNobleLevel int32
	lDeadLine   int64
}

func (self *NobleItem) ResetDefault() {
}

func (self *NobleItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeadLine))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iNobleLevel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeadLine), 1)
	if err != nil {
		return err
	}
	return err
}

type FansItem struct {
	iFansLevel         int32
	sFansNick          string
	sFansPresenterNick string
}

func (self *FansItem) ResetDefault() {
}

func (self *FansItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iFansLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sFansNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sFansPresenterNick))
	if err != nil {
		return err
	}
	return err
}

func (self *FansItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iFansLevel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFansNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFansPresenterNick), 2)
	if err != nil {
		return err
	}
	return err
}

type StampItem struct {
	sSealIconPath  string
	sKeyImg        string
	lStampTime     int64
	lStampEndTime  int64
	iValidity      int32
	sStampUserNick string
}

func (self *StampItem) ResetDefault() {
}

func (self *StampItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sSealIconPath))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sKeyImg))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lStampTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lStampEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iValidity))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sStampUserNick))
	if err != nil {
		return err
	}
	return err
}

func (self *StampItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sSealIconPath), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sKeyImg), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStampTime), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStampEndTime), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iValidity), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStampUserNick), 5)
	if err != nil {
		return err
	}
	return err
}

type VipSmileItem struct {
	sVipSmileKey  string
	sVipSmilePath string
}

func (self *VipSmileItem) ResetDefault() {
}

func (self *VipSmileItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sVipSmileKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sVipSmilePath))
	if err != nil {
		return err
	}
	return err
}

func (self *VipSmileItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sVipSmileKey), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVipSmilePath), 1)
	if err != nil {
		return err
	}
	return err
}

type MassItem struct {
	iGoldHostLevel   int32
	iSuperPupleLevel int32
	iVipLevel        int32
	iUserLevel       int32
	iIsVipRed        int32
	iAtSomebody      int32
	sAtSomebodyNick  string
	ibarrageColor    int32
	sDevSourceType   string
}

func (self *MassItem) ResetDefault() {
}

func (self *MassItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGoldHostLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iSuperPupleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iVipLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iUserLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iIsVipRed))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iAtSomebody))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sAtSomebodyNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.ibarrageColor))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sDevSourceType))
	if err != nil {
		return err
	}
	return err
}

func (self *MassItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGoldHostLevel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSuperPupleLevel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVipLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUserLevel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsVipRed), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAtSomebody), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAtSomebodyNick), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.ibarrageColor), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDevSourceType), 8)
	if err != nil {
		return err
	}
	return err
}

type NobleSpeakReq struct {
	tUserId   UserId
	lTid      int64
	lSid      int64
	lPid      int64
	sMsg      string
	tSender   SenderItem
	tNoble    NobleItem
	tFans     FansItem
	tVipSimle VipSmileItem
	tStamp    StampItem
	tMass     MassItem
	mReserver map[string]string
}

func (self *NobleSpeakReq) ResetDefault() {
}

func (self *NobleSpeakReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sMsg))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.tSender))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.tNoble))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.tFans))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.tVipSimle))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.tStamp))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.tMass))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.mReserver))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleSpeakReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tSender), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tNoble), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFans), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tVipSimle), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tStamp), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tMass), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mReserver), 11)
	if err != nil {
		return err
	}
	return err
}

type NobleSpeakBrst struct {
	tUserId         UserId
	lTid            int64
	lSid            int64
	lPid            int64
	sMsg            string
	tSender         SenderItem
	tNoble          NobleItem
	tFans           FansItem
	tVipSimle       VipSmileItem
	tStamp          StampItem
	tMass           MassItem
	mReserver       map[string]string
	iChatCache      int32
	iRoomAuditLevel int32
}

func (self *NobleSpeakBrst) ResetDefault() {
}

func (self *NobleSpeakBrst) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sMsg))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.tSender))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.tNoble))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.tFans))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.tVipSimle))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.tStamp))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.tMass))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.mReserver))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iChatCache))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iRoomAuditLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleSpeakBrst) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tSender), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tNoble), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFans), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tVipSimle), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tStamp), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tMass), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mReserver), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChatCache), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRoomAuditLevel), 13)
	if err != nil {
		return err
	}
	return err
}

type NobleSpeakResp struct {
	iRespCode int32
	lUid      int64
	lTid      int64
	lSid      int64
	lPid      int64
}

func (self *NobleSpeakResp) ResetDefault() {
}

func (self *NobleSpeakResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRespCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleSpeakResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRespCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 4)
	if err != nil {
		return err
	}
	return err
}

type NobleSpeakReqNew struct {
	tUserId            UserId
	lTid               int64
	lSid               int64
	sMsg               string
	sSenderNick        string
	sFansNick          string
	sFansPresenterNick string
	sText              string
	sExtendMsg         string
}

func (self *NobleSpeakReqNew) ResetDefault() {
}

func (self *NobleSpeakReqNew) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sMsg))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sFansNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sFansPresenterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sText))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sExtendMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleSpeakReqNew) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFansNick), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFansPresenterNick), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sText), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExtendMsg), 8)
	if err != nil {
		return err
	}
	return err
}

type NobleSpeakBrstNew struct {
	sMsg               string
	sSenderNick        string
	sFansNick          string
	sFansPresenterNick string
	sText              string
	sExtendMsg         string
	lTid               int64
	lSid               int64
	iChatCache         int32
	iRoomAuditLevel    int32
}

func (self *NobleSpeakBrstNew) ResetDefault() {
}

func (self *NobleSpeakBrstNew) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.sMsg))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sFansNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sFansPresenterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sText))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sExtendMsg))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iChatCache))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iRoomAuditLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleSpeakBrstNew) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sMsg), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFansNick), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFansPresenterNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sText), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExtendMsg), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChatCache), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRoomAuditLevel), 10)
	if err != nil {
		return err
	}
	return err
}

type NobleSpeakRespNew struct {
	iRespCode          int32
	sMsg               string
	sSenderNick        string
	sFansNick          string
	sFansPresenterNick string
	sText              string
	sExtendMsg         string
}

func (self *NobleSpeakRespNew) ResetDefault() {
}

func (self *NobleSpeakRespNew) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRespCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMsg))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sFansNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sFansPresenterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sText))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sExtendMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *NobleSpeakRespNew) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRespCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFansNick), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFansPresenterNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sText), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExtendMsg), 6)
	if err != nil {
		return err
	}
	return err
}

type UserChannelReq struct {
	tId          UserId
	lTopcid      int64
	lSubcid      int64
	sSendContent string
}

func (self *UserChannelReq) ResetDefault() {
}

func (self *UserChannelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sSendContent))
	if err != nil {
		return err
	}
	return err
}

func (self *UserChannelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopcid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubcid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSendContent), 3)
	if err != nil {
		return err
	}
	return err
}

type StampInfo struct {
	iId         int32
	sStamp      string
	iLevel      int32
	lStampPrice int64
	iValidity   int32
}

func (self *StampInfo) ResetDefault() {
}

func (self *StampInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sStamp))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lStampPrice))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iValidity))
	if err != nil {
		return err
	}
	return err
}

func (self *StampInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStamp), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStampPrice), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iValidity), 4)
	if err != nil {
		return err
	}
	return err
}

type StampInfoResp struct {
	vStampInfoLists []StampInfo
}

func (self *StampInfoResp) ResetDefault() {
}

func (self *StampInfoResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vStampInfoLists))
	if err != nil {
		return err
	}
	return err
}

func (self *StampInfoResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vStampInfoLists), 0)
	if err != nil {
		return err
	}
	return err
}

type UserStampInfo struct {
	tId        UserId
	lUid       int64
	lStampUid  int64
	sStampNick string
	lStampTime int64
	sValidity  string
	tStampInfo StampInfo
	sNick      string
	iRole      int32
	iGender    int32
}

func (self *UserStampInfo) ResetDefault() {
}

func (self *UserStampInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lStampUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sStampNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lStampTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sValidity))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.tStampInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iRole))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iGender))
	if err != nil {
		return err
	}
	return err
}

func (self *UserStampInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStampUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStampNick), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStampTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sValidity), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tStampInfo), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRole), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGender), 9)
	if err != nil {
		return err
	}
	return err
}

type PresenterStampReq struct {
	tId UserId
}

func (self *PresenterStampReq) ResetDefault() {
}

func (self *PresenterStampReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterStampReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type UserStampInfoResp struct {
	vUserStampInfoLists []UserStampInfo
}

func (self *UserStampInfoResp) ResetDefault() {
}

func (self *UserStampInfoResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vUserStampInfoLists))
	if err != nil {
		return err
	}
	return err
}

func (self *UserStampInfoResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vUserStampInfoLists), 0)
	if err != nil {
		return err
	}
	return err
}

type PrincessInfo struct {
	tId            UserId
	lUid           int64
	iLevel         int32
	iRedHeartValue int32
	iCharmValue    int32
	lTopcid        int64
	lSubcid        int64
	iPropType      int32
	iPropCount     int32
}

func (self *PrincessInfo) ResetDefault() {
}

func (self *PrincessInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iRedHeartValue))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iCharmValue))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lTopcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lSubcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iPropCount))
	if err != nil {
		return err
	}
	return err
}

func (self *PrincessInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRedHeartValue), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCharmValue), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopcid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubcid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropType), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCount), 8)
	if err != nil {
		return err
	}
	return err
}

type BatchPrincessInfoReq struct {
	tId   UserId
	vUids []int64
}

func (self *BatchPrincessInfoReq) ResetDefault() {
}

func (self *BatchPrincessInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchPrincessInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	return err
}

type BatchPrincessInfoResp struct {
	vPrincessInfoLists []PrincessInfo
}

func (self *BatchPrincessInfoResp) ResetDefault() {
}

func (self *BatchPrincessInfoResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, true, &(self.vPrincessInfoLists))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchPrincessInfoResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPrincessInfoLists), 0)
	if err != nil {
		return err
	}
	return err
}

type WhiteListReq struct {
	tId    UserId
	iType  int32
	sValue string
}

func (self *WhiteListReq) ResetDefault() {
}

func (self *WhiteListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sValue))
	if err != nil {
		return err
	}
	return err
}

func (self *WhiteListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sValue), 2)
	if err != nil {
		return err
	}
	return err
}

type WhiteListResp struct {
	iResult int32
	iType   int32
}

func (self *WhiteListResp) ResetDefault() {
}

func (self *WhiteListResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iResult))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iType))
	if err != nil {
		return err
	}
	return err
}

func (self *WhiteListResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iResult), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 1)
	if err != nil {
		return err
	}
	return err
}

type PaymentInfo struct {
	lUid      int64
	lTopcid   int64
	lSubcid   int64
	iItemType int32
	sPayID    string
	sToken    string
}

func (self *PaymentInfo) ResetDefault() {
}

func (self *PaymentInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sPayID))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sToken))
	if err != nil {
		return err
	}
	return err
}

func (self *PaymentInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopcid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubcid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPayID), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sToken), 5)
	if err != nil {
		return err
	}
	return err
}

type UserWatchAcitonReq struct {
	tId         UserId
	lTid        int64
	lSid        int64
	lShortTid   int64
	sChan       string
	eSource     int32
	lPid        int64
	bWatchVideo bool
}

func (self *UserWatchAcitonReq) ResetDefault() {
}

func (self *UserWatchAcitonReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lShortTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sChan))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.eSource))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.bWatchVideo))
	if err != nil {
		return err
	}
	return err
}

func (self *UserWatchAcitonReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lShortTid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sChan), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eSource), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bWatchVideo), 7)
	if err != nil {
		return err
	}
	return err
}

type Activity struct {
	iType int32
	sKey  string
}

func (self *Activity) ResetDefault() {
}

func (self *Activity) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sKey))
	if err != nil {
		return err
	}
	return err
}

func (self *Activity) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sKey), 1)
	if err != nil {
		return err
	}
	return err
}

type ActivityEx struct {
	iType int32
	sKey  string
	lAid  int64
}

func (self *ActivityEx) ResetDefault() {
}

func (self *ActivityEx) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lAid))
	if err != nil {
		return err
	}
	return err
}

func (self *ActivityEx) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sKey), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAid), 2)
	if err != nil {
		return err
	}
	return err
}

type PresenterActivity struct {
	tAct                Activity
	lAid                int64
	lUid                int64
	lYYId               int64
	sNick               string
	sAvatar             string
	bLive               bool
	lChannelId          int64
	lSubChannelId       int64
	sLiveName           string
	sLiveIntro          string
	sLiveThumb          string
	sGameName           string
	lGameId             int64
	iAttendee           int32
	iBeginTime          int32
	iSourceType         int32
	iScreenType         int32
	lLiveCompatibleFlag int32
	lLiveId             int64
}

func (self *PresenterActivity) ResetDefault() {
}

func (self *PresenterActivity) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tAct))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lAid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lYYId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sAvatar))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.bLive))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sLiveName))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sLiveIntro))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sLiveThumb))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.lGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.iAttendee))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.iBeginTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.iScreenType))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.lLiveCompatibleFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterActivity) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tAct), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatar), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bLive), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveName), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveIntro), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveThumb), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGameId), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAttendee), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeginTime), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSourceType), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScreenType), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveCompatibleFlag), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 19)
	if err != nil {
		return err
	}
	return err
}

type Subscriber struct {
	iType int32
	sKey  string
}

func (self *Subscriber) ResetDefault() {
}

func (self *Subscriber) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sKey))
	if err != nil {
		return err
	}
	return err
}

func (self *Subscriber) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sKey), 1)
	if err != nil {
		return err
	}
	return err
}

type CreateActivityReq struct {
	tId  UserId
	tKey Activity
}

func (self *CreateActivityReq) ResetDefault() {
}

func (self *CreateActivityReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tKey))
	if err != nil {
		return err
	}
	return err
}

func (self *CreateActivityReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tKey), 1)
	if err != nil {
		return err
	}
	return err
}

type CreateActivityResp struct {
	tKey Activity
}

func (self *CreateActivityResp) ResetDefault() {
}

func (self *CreateActivityResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tKey))
	if err != nil {
		return err
	}
	return err
}

func (self *CreateActivityResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tKey), 0)
	if err != nil {
		return err
	}
	return err
}

type SubscribedCountReq struct {
	tId UserId
	tTo Activity
}

func (self *SubscribedCountReq) ResetDefault() {
}

func (self *SubscribedCountReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTo))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribedCountReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTo), 1)
	if err != nil {
		return err
	}
	return err
}

type SubscribedCountResp struct {
	tTo    Activity
	iCount int32
}

func (self *SubscribedCountResp) ResetDefault() {
}

func (self *SubscribedCountResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tTo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCount))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribedCountResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tTo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 1)
	if err != nil {
		return err
	}
	return err
}

type SubscribeToListReq struct {
	tId   UserId
	tFrom Subscriber
}

func (self *SubscribeToListReq) ResetDefault() {
}

func (self *SubscribeToListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tFrom))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeToListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFrom), 1)
	if err != nil {
		return err
	}
	return err
}

type SubscribeToListResp struct {
	tFrom Subscriber
	vKeys []Activity
}

func (self *SubscribeToListResp) ResetDefault() {
}

func (self *SubscribeToListResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vKeys))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeToListResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tFrom), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vKeys), 1)
	if err != nil {
		return err
	}
	return err
}

type SubscribeToListExResp struct {
	tFrom Subscriber
	vKeys []ActivityEx
}

func (self *SubscribeToListExResp) ResetDefault() {
}

func (self *SubscribeToListExResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vKeys))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeToListExResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tFrom), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vKeys), 1)
	if err != nil {
		return err
	}
	return err
}

type SubscribeToPresenterListResp struct {
	tFrom Subscriber
	vKeys []PresenterActivity
}

func (self *SubscribeToPresenterListResp) ResetDefault() {
}

func (self *SubscribeToPresenterListResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vKeys))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeToPresenterListResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tFrom), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vKeys), 1)
	if err != nil {
		return err
	}
	return err
}

type SubscribeToCountReq struct {
	tId   UserId
	tFrom Subscriber
}

func (self *SubscribeToCountReq) ResetDefault() {
}

func (self *SubscribeToCountReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tFrom))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeToCountReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFrom), 1)
	if err != nil {
		return err
	}
	return err
}

type SubscribeToCountResp struct {
	tFrom  Subscriber
	iCount int32
}

func (self *SubscribeToCountResp) ResetDefault() {
}

func (self *SubscribeToCountResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCount))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeToCountResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tFrom), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 1)
	if err != nil {
		return err
	}
	return err
}

type SubscribeFromListReq struct {
	tId    UserId
	tTo    Activity
	tBegin Subscriber
	iCount int32
}

func (self *SubscribeFromListReq) ResetDefault() {
}

func (self *SubscribeFromListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTo))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tBegin))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iCount))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeFromListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTo), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tBegin), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 3)
	if err != nil {
		return err
	}
	return err
}

type SubscribeFromListResp struct {
	tTo    Activity
	vFroms []Subscriber
}

func (self *SubscribeFromListResp) ResetDefault() {
}

func (self *SubscribeFromListResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tTo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vFroms))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeFromListResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tTo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vFroms), 1)
	if err != nil {
		return err
	}
	return err
}

type SubscribeStatusReq struct {
	tId   UserId
	tFrom Subscriber
	tTo   Activity
}

func (self *SubscribeStatusReq) ResetDefault() {
}

func (self *SubscribeStatusReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tTo))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeStatusReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFrom), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTo), 2)
	if err != nil {
		return err
	}
	return err
}

type SubscribeStatusResp struct {
	tFrom            Subscriber
	tTo              Activity
	iSubscribedCount int32
	iStatus          int32
}

func (self *SubscribeStatusResp) ResetDefault() {
}

func (self *SubscribeStatusResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTo))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iSubscribedCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeStatusResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tFrom), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTo), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubscribedCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 3)
	if err != nil {
		return err
	}
	return err
}

type SubscribeReq struct {
	tId     UserId
	tFrom   Subscriber
	tTo     Activity
	iAction int32
}

func (self *SubscribeReq) ResetDefault() {
}

func (self *SubscribeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tTo))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iAction))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFrom), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTo), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAction), 3)
	if err != nil {
		return err
	}
	return err
}

type SubscribeResp struct {
	tFrom   Subscriber
	tTo     Activity
	iAction int32
	iFlag   int32
}

func (self *SubscribeResp) ResetDefault() {
}

func (self *SubscribeResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTo))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tFrom), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTo), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAction), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFlag), 3)
	if err != nil {
		return err
	}
	return err
}

type UnsubscribeReq struct {
	tId   UserId
	tFrom Subscriber
	tTo   Activity
}

func (self *UnsubscribeReq) ResetDefault() {
}

func (self *UnsubscribeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tTo))
	if err != nil {
		return err
	}
	return err
}

func (self *UnsubscribeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFrom), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTo), 2)
	if err != nil {
		return err
	}
	return err
}

type UnsubscribeResp struct {
	tFrom Subscriber
	tTo   Activity
	iFlag int32
}

func (self *UnsubscribeResp) ResetDefault() {
}

func (self *UnsubscribeResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTo))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *UnsubscribeResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tFrom), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTo), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFlag), 3)
	if err != nil {
		return err
	}
	return err
}

type BatGetSubscribeStatusReq struct {
	tId   UserId
	tFrom Subscriber
	vTos  []Activity
}

func (self *BatGetSubscribeStatusReq) ResetDefault() {
}

func (self *BatGetSubscribeStatusReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vTos))
	if err != nil {
		return err
	}
	return err
}

func (self *BatGetSubscribeStatusReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFrom), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vTos), 2)
	if err != nil {
		return err
	}
	return err
}

type SubscribeStatus struct {
	tTo     Activity
	iStatus int32
}

func (self *SubscribeStatus) ResetDefault() {
}

func (self *SubscribeStatus) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tTo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeStatus) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tTo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 1)
	if err != nil {
		return err
	}
	return err
}

type BatGetSubscribeStatusResp struct {
	tFrom   Subscriber
	vStatus []SubscribeStatus
}

func (self *BatGetSubscribeStatusResp) ResetDefault() {
}

func (self *BatGetSubscribeStatusResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *BatGetSubscribeStatusResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tFrom), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vStatus), 1)
	if err != nil {
		return err
	}
	return err
}

type BatGetSubscribeCountReq struct {
	tId  UserId
	vTos []Activity
}

func (self *BatGetSubscribeCountReq) ResetDefault() {
}

func (self *BatGetSubscribeCountReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vTos))
	if err != nil {
		return err
	}
	return err
}

func (self *BatGetSubscribeCountReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vTos), 1)
	if err != nil {
		return err
	}
	return err
}

type SubscribeCount struct {
	tTo    Activity
	iCount int32
}

func (self *SubscribeCount) ResetDefault() {
}

func (self *SubscribeCount) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tTo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCount))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeCount) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tTo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 1)
	if err != nil {
		return err
	}
	return err
}

type BatGetSubscribeCountResp struct {
	vTos []SubscribeCount
}

func (self *BatGetSubscribeCountResp) ResetDefault() {
}

func (self *BatGetSubscribeCountResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vTos))
	if err != nil {
		return err
	}
	return err
}

func (self *BatGetSubscribeCountResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vTos), 0)
	if err != nil {
		return err
	}
	return err
}

type BatGetSubscribeToCountReq struct {
	tId    UserId
	vFroms []Subscriber
}

func (self *BatGetSubscribeToCountReq) ResetDefault() {
}

func (self *BatGetSubscribeToCountReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vFroms))
	if err != nil {
		return err
	}
	return err
}

func (self *BatGetSubscribeToCountReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vFroms), 1)
	if err != nil {
		return err
	}
	return err
}

type SubscribeToCount struct {
	tFrom  Subscriber
	iCount int32
}

func (self *SubscribeToCount) ResetDefault() {
}

func (self *SubscribeToCount) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCount))
	if err != nil {
		return err
	}
	return err
}

func (self *SubscribeToCount) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tFrom), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 1)
	if err != nil {
		return err
	}
	return err
}

type BatGetSubscribeToCountResp struct {
	vFroms []SubscribeToCount
}

func (self *BatGetSubscribeToCountResp) ResetDefault() {
}

func (self *BatGetSubscribeToCountResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vFroms))
	if err != nil {
		return err
	}
	return err
}

func (self *BatGetSubscribeToCountResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vFroms), 0)
	if err != nil {
		return err
	}
	return err
}

type QueryPersonalCardReq struct {
	tId  UserId
	lUid int64
}

func (self *QueryPersonalCardReq) ResetDefault() {
}

func (self *QueryPersonalCardReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryPersonalCardReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type QueryPersonalCardResp struct {
	lUid  int64
	sCard string
}

func (self *QueryPersonalCardResp) ResetDefault() {
}

func (self *QueryPersonalCardResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sCard))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryPersonalCardResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCard), 1)
	if err != nil {
		return err
	}
	return err
}

type Medal struct {
	iId            int32
	sName          string
	sDescription   string
	sHighlightIcon string
	sActionUrl     string
}

func (self *Medal) ResetDefault() {
}

func (self *Medal) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sDescription))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sHighlightIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sActionUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *Medal) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDescription), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHighlightIcon), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActionUrl), 4)
	if err != nil {
		return err
	}
	return err
}

type Decoration struct {
	iId        int32
	sName      string
	sSmallIcon string
	sLargeIcon string
	sActionUrl string
}

func (self *Decoration) ResetDefault() {
}

func (self *Decoration) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sSmallIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sLargeIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sActionUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *Decoration) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSmallIcon), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLargeIcon), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActionUrl), 4)
	if err != nil {
		return err
	}
	return err
}

type PresenterCardInfo struct {
	lUid            int64
	lYYId           int64
	sAvatar180      string
	sSignChannel    string
	iCertified      int32
	iLevel          int32
	lExp            int64
	iSubscribeCount int32
	vMedals         []Medal
	vDecorations    []Decoration
	iGender         int32
	sNick           string
}

func (self *PresenterCardInfo) ResetDefault() {
}

func (self *PresenterCardInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lYYId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sAvatar180))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sSignChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iCertified))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lExp))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iSubscribeCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.vMedals))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.vDecorations))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iGender))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sNick))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterCardInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatar180), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSignChannel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCertified), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExp), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubscribeCount), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vMedals), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vDecorations), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGender), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 11)
	if err != nil {
		return err
	}
	return err
}

type PresenterCardReq struct {
	tId  UserId
	lUid int64
}

func (self *PresenterCardReq) ResetDefault() {
}

func (self *PresenterCardReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterCardReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type PresenterCardRsp struct {
	tCard PresenterCardInfo
}

func (self *PresenterCardRsp) ResetDefault() {
}

func (self *PresenterCardRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tCard))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterCardRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tCard), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterAuth struct {
	iIsPresenter         int32
	iIsVerified          int32
	iIsContract          int32
	iIsMMSPresenter      int32
	iIsSpeedTest         int32
	iUpdateFreq          int32
	iIsCameraAllow       int32
	sCameraReason        string
	iIsDesktopAllow      int32
	sDesktopReason       string
	iUserLevel           int32
	isPreviewEditor      int32
	iChannelType         int32
	iBandWidth           int32
	iFrame               int32
	sPresenterName       string
	iPresentNameEditable int32
	sAvatarUrl           string
}

func (self *PresenterAuth) ResetDefault() {
}

func (self *PresenterAuth) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iIsPresenter))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iIsVerified))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iIsContract))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iIsMMSPresenter))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iIsSpeedTest))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iUpdateFreq))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iIsCameraAllow))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sCameraReason))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iIsDesktopAllow))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sDesktopReason))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iUserLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.isPreviewEditor))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iChannelType))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iBandWidth))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.iFrame))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.sPresenterName))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.iPresentNameEditable))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterAuth) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iIsPresenter), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsVerified), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsContract), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsMMSPresenter), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsSpeedTest), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUpdateFreq), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsCameraAllow), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCameraReason), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsDesktopAllow), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDesktopReason), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUserLevel), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.isPreviewEditor), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChannelType), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBandWidth), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFrame), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterName), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresentNameEditable), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 17)
	if err != nil {
		return err
	}
	return err
}

type GetPresenterAuthReq struct {
	tId         UserId
	lChannelId  int64
	iMasterType int32
}

func (self *GetPresenterAuthReq) ResetDefault() {
}

func (self *GetPresenterAuthReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iMasterType))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPresenterAuthReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMasterType), 2)
	if err != nil {
		return err
	}
	return err
}

type GetPresenterAuthRsp struct {
	tPresenterAuth PresenterAuth
}

func (self *GetPresenterAuthRsp) ResetDefault() {
}

func (self *GetPresenterAuthRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tPresenterAuth))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPresenterAuthRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tPresenterAuth), 0)
	if err != nil {
		return err
	}
	return err
}

type GameNameInfo struct {
	iGameId      int32
	sChineseName string
	sEngishName  string
	sShortName   string
	iGameType    int32
	iScreenType  int32
	iCodecType   int32
	sGameDesc    string
}

func (self *GameNameInfo) ResetDefault() {
}

func (self *GameNameInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sChineseName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sEngishName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sShortName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iGameType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iScreenType))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iCodecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sGameDesc))
	if err != nil {
		return err
	}
	return err
}

func (self *GameNameInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sChineseName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sEngishName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sShortName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScreenType), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCodecType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameDesc), 7)
	if err != nil {
		return err
	}
	return err
}

type GetGameNameInfoReq struct {
	tId  UserId
	sMd5 string
}

func (self *GetGameNameInfoReq) ResetDefault() {
}

func (self *GetGameNameInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMd5))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameNameInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 1)
	if err != nil {
		return err
	}
	return err
}

type GetGameNameInfoRsp struct {
	vGameNameInfo []GameNameInfo
	sMd5          string
	mGameTypeName map[int32]string
}

func (self *GetGameNameInfoRsp) ResetDefault() {
}

func (self *GetGameNameInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameNameInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMd5))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.mGameTypeName))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameNameInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameNameInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mGameTypeName), 2)
	if err != nil {
		return err
	}
	return err
}

type GameProcInfo struct {
	iGameId       int32
	sExeName      string
	sGameName     string
	sWindowName   string
	sFeatureName1 string
	sFeatureName2 string
	iPackLevel    int32
	iGameMouse    int32
	iDelayTime    int32
	iCodecType    int32
}

func (self *GameProcInfo) ResetDefault() {
}

func (self *GameProcInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sExeName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sWindowName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sFeatureName1))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sFeatureName2))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iPackLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iGameMouse))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iDelayTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iCodecType))
	if err != nil {
		return err
	}
	return err
}

func (self *GameProcInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExeName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWindowName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFeatureName1), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFeatureName2), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPackLevel), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameMouse), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDelayTime), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCodecType), 9)
	if err != nil {
		return err
	}
	return err
}

type GetGameProcInfoReq struct {
	tId  UserId
	sMd5 string
}

func (self *GetGameProcInfoReq) ResetDefault() {
}

func (self *GetGameProcInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMd5))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameProcInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 1)
	if err != nil {
		return err
	}
	return err
}

type GetGameProcInfoRsp struct {
	vGameProcInfo []GameProcInfo
	sMd5          string
}

func (self *GetGameProcInfoRsp) ResetDefault() {
}

func (self *GetGameProcInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameProcInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMd5))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameProcInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameProcInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 1)
	if err != nil {
		return err
	}
	return err
}

type TreasureBoxItemReq struct {
	sUid      UserId
	iTimes    int64
	iItemType int16
	lTop      int64
	lSub      int64
}

func (self *TreasureBoxItemReq) ResetDefault() {
}

func (self *TreasureBoxItemReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTimes))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lTop))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSub))
	if err != nil {
		return err
	}
	return err
}

func (self *TreasureBoxItemReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTimes), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTop), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSub), 4)
	if err != nil {
		return err
	}
	return err
}

type TreasureBoxItemResp struct {
	iRetcode  int32
	iItemType int16
	iCount    int32
}

func (self *TreasureBoxItemResp) ResetDefault() {
}

func (self *TreasureBoxItemResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetcode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCount))
	if err != nil {
		return err
	}
	return err
}

func (self *TreasureBoxItemResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetcode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 2)
	if err != nil {
		return err
	}
	return err
}

type Game3DMInfo struct {
	lGameId      int64
	l3DMId       int64
	iType        int32
	sLanguage    string
	sPublicTime  string
	sTag         string
	sPicUrl      string
	sLinkUrl     string
	sReleaseComp string
	sTerrace     string
	iOptUid      int32
	iCreateTime  int32
}

func (self *Game3DMInfo) ResetDefault() {
}

func (self *Game3DMInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.l3DMId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sLanguage))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sPublicTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sTag))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sPicUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sLinkUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sReleaseComp))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sTerrace))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iOptUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iCreateTime))
	if err != nil {
		return err
	}
	return err
}

func (self *Game3DMInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.l3DMId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLanguage), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPublicTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTag), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPicUrl), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLinkUrl), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sReleaseComp), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTerrace), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOptUid), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCreateTime), 12)
	if err != nil {
		return err
	}
	return err
}

type is3DMGameReq struct {
	tId   UserId
	sName string
}

func (self *is3DMGameReq) ResetDefault() {
}

func (self *is3DMGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sName))
	if err != nil {
		return err
	}
	return err
}

func (self *is3DMGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 1)
	if err != nil {
		return err
	}
	return err
}

type is3DMGameRsp struct {
	lGameId    int64
	b3DMGame   bool
	l3DMGameId int64
	sLinkUrl   string
}

func (self *is3DMGameRsp) ResetDefault() {
}

func (self *is3DMGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.b3DMGame))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.l3DMGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sLinkUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *is3DMGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.b3DMGame), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.l3DMGameId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLinkUrl), 3)
	if err != nil {
		return err
	}
	return err
}

type SetVerificationReq struct {
	tId UserId
}

func (self *SetVerificationReq) ResetDefault() {
}

func (self *SetVerificationReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *SetVerificationReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type SetVerificationResp struct {
	iResult int32
}

func (self *SetVerificationResp) ResetDefault() {
}

func (self *SetVerificationResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iResult))
	if err != nil {
		return err
	}
	return err
}

func (self *SetVerificationResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iResult), 0)
	if err != nil {
		return err
	}
	return err
}

type GetVerificationStatusReq struct {
	tId UserId
}

func (self *GetVerificationStatusReq) ResetDefault() {
}

func (self *GetVerificationStatusReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetVerificationStatusReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetVerificationStatusResp struct {
	iStatus      int32
	lExpenditure int64
}

func (self *GetVerificationStatusResp) ResetDefault() {
}

func (self *GetVerificationStatusResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lExpenditure))
	if err != nil {
		return err
	}
	return err
}

func (self *GetVerificationStatusResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStatus), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExpenditure), 1)
	if err != nil {
		return err
	}
	return err
}

type GetFirstRechargePkgStatusReq struct {
	tId UserId
}

func (self *GetFirstRechargePkgStatusReq) ResetDefault() {
}

func (self *GetFirstRechargePkgStatusReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetFirstRechargePkgStatusReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetFirstRechargePkgStatusResp struct {
	iStatus int32
}

func (self *GetFirstRechargePkgStatusResp) ResetDefault() {
}

func (self *GetFirstRechargePkgStatusResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *GetFirstRechargePkgStatusResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStatus), 0)
	if err != nil {
		return err
	}
	return err
}

type GetCdnStreamInfoReq struct {
	tId         UserId
	sLiveId     string
	lTid        int64
	lSid        int64
	lPuid       int64
	sRegion     string
	iStreamType int32
	iSourceType int32
}

func (self *GetCdnStreamInfoReq) ResetDefault() {
}

func (self *GetCdnStreamInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPuid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sRegion))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iStreamType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	return err
}

func (self *GetCdnStreamInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPuid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sRegion), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStreamType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSourceType), 7)
	if err != nil {
		return err
	}
	return err
}

type GetCdnStreamInfoRsp struct {
	iStreamType        int32
	sStreamUrl         string
	vSwitchStreamUrls  []string
	mStreamRatioWeb    map[string]int32
	mStreamRatioPC     map[string]int32
	mStreamRatioMobile map[string]int32
}

func (self *GetCdnStreamInfoRsp) ResetDefault() {
}

func (self *GetCdnStreamInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStreamType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sStreamUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vSwitchStreamUrls))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.mStreamRatioWeb))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.mStreamRatioPC))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.mStreamRatioMobile))
	if err != nil {
		return err
	}
	return err
}

func (self *GetCdnStreamInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStreamType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStreamUrl), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSwitchStreamUrls), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mStreamRatioWeb), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mStreamRatioPC), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mStreamRatioMobile), 5)
	if err != nil {
		return err
	}
	return err
}

type VerifyCdnTokenReq struct {
	tId         UserId
	eLineType   int32
	iTime       int32
	sToken      string
	json_stream string
}

func (self *VerifyCdnTokenReq) ResetDefault() {
}

func (self *VerifyCdnTokenReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.eLineType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sToken))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.json_stream))
	if err != nil {
		return err
	}
	return err
}

func (self *VerifyCdnTokenReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eLineType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTime), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sToken), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.json_stream), 4)
	if err != nil {
		return err
	}
	return err
}

type VerifyCdnTokenRsp struct {
	bPass bool
}

func (self *VerifyCdnTokenRsp) ResetDefault() {
}

func (self *VerifyCdnTokenRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.bPass))
	if err != nil {
		return err
	}
	return err
}

func (self *VerifyCdnTokenRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.bPass), 0)
	if err != nil {
		return err
	}
	return err
}

type VerifyCdnTicketReq struct {
	tId         UserId
	eLineType   int32
	sTicket     string
	json_stream string
}

func (self *VerifyCdnTicketReq) ResetDefault() {
}

func (self *VerifyCdnTicketReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.eLineType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sTicket))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.json_stream))
	if err != nil {
		return err
	}
	return err
}

func (self *VerifyCdnTicketReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eLineType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTicket), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.json_stream), 3)
	if err != nil {
		return err
	}
	return err
}

type VerifyCdnTicketRsp struct {
	bPass bool
}

func (self *VerifyCdnTicketRsp) ResetDefault() {
}

func (self *VerifyCdnTicketRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.bPass))
	if err != nil {
		return err
	}
	return err
}

func (self *VerifyCdnTicketRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.bPass), 0)
	if err != nil {
		return err
	}
	return err
}

type GetCdnTokenReq struct {
	url           string
	cdn_type      string
	stream_name   string
	presenter_uid int64
}

func (self *GetCdnTokenReq) ResetDefault() {
}

func (self *GetCdnTokenReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.url))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.cdn_type))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.stream_name))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.presenter_uid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetCdnTokenReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.url), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.cdn_type), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.stream_name), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.presenter_uid), 3)
	if err != nil {
		return err
	}
	return err
}

type GetCdnTokenIOSReq struct {
	sUrl        string
	sCdnType    string
	sStreamName string
	lUid        int64
}

func (self *GetCdnTokenIOSReq) ResetDefault() {
}

func (self *GetCdnTokenIOSReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sCdnType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sStreamName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetCdnTokenIOSReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sUrl), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCdnType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStreamName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	return err
}

type GetCdnTokenRsp struct {
	url           string
	cdn_type      string
	stream_name   string
	presenter_uid int64
	anti_code     string
	sTime         string
	flv_anti_code string
	hls_anti_code string
}

func (self *GetCdnTokenRsp) ResetDefault() {
}

func (self *GetCdnTokenRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.url))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.cdn_type))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.stream_name))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.presenter_uid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.anti_code))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.flv_anti_code))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.hls_anti_code))
	if err != nil {
		return err
	}
	return err
}

func (self *GetCdnTokenRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.url), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.cdn_type), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.stream_name), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.presenter_uid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.anti_code), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTime), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.flv_anti_code), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.hls_anti_code), 7)
	if err != nil {
		return err
	}
	return err
}

type GetCdnTokenIOSRsp struct {
	sUrl         string
	sCdnType     string
	sStreamName  string
	lUid         int64
	sAntiCode    string
	sTime        string
	sFlvAntiCode string
	sHlsAntiCode string
}

func (self *GetCdnTokenIOSRsp) ResetDefault() {
}

func (self *GetCdnTokenIOSRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sCdnType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sStreamName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sAntiCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sFlvAntiCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sHlsAntiCode))
	if err != nil {
		return err
	}
	return err
}

func (self *GetCdnTokenIOSRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sUrl), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCdnType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStreamName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAntiCode), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTime), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFlvAntiCode), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHlsAntiCode), 7)
	if err != nil {
		return err
	}
	return err
}

type TokenCdnInfo struct {
	sCdnName string
	sUrl     string
}

func (self *TokenCdnInfo) ResetDefault() {
}

func (self *TokenCdnInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sCdnName))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *TokenCdnInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sCdnName), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUrl), 1)
	if err != nil {
		return err
	}
	return err
}

type CdnAntiCodeInfo struct {
	sCdnName     string
	sFlvAntiCode string
	sHlsAntiCode string
}

func (self *CdnAntiCodeInfo) ResetDefault() {
}

func (self *CdnAntiCodeInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sCdnName))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sFlvAntiCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sHlsAntiCode))
	if err != nil {
		return err
	}
	return err
}

func (self *CdnAntiCodeInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sCdnName), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFlvAntiCode), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHlsAntiCode), 2)
	if err != nil {
		return err
	}
	return err
}

type BatchGetCdnTokenReq struct {
	vCdnInfos   []TokenCdnInfo
	sStreamName string
}

func (self *BatchGetCdnTokenReq) ResetDefault() {
}

func (self *BatchGetCdnTokenReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vCdnInfos))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sStreamName))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchGetCdnTokenReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vCdnInfos), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStreamName), 1)
	if err != nil {
		return err
	}
	return err
}

type BatchGetCdnTokenRsp struct {
	vCdnAntiCodes []CdnAntiCodeInfo
}

func (self *BatchGetCdnTokenRsp) ResetDefault() {
}

func (self *BatchGetCdnTokenRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vCdnAntiCodes))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchGetCdnTokenRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vCdnAntiCodes), 0)
	if err != nil {
		return err
	}
	return err
}

type CdnStreamStopInfo struct {
	uid         int64
	cdn_type    string
	stream_name string
	lTime       int64
}

func (self *CdnStreamStopInfo) ResetDefault() {
}

func (self *CdnStreamStopInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.uid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.cdn_type))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.stream_name))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lTime))
	if err != nil {
		return err
	}
	return err
}

func (self *CdnStreamStopInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.uid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.cdn_type), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.stream_name), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTime), 3)
	if err != nil {
		return err
	}
	return err
}

type RemoveCdnStreamNotifyReq struct {
	vStreamInfo []CdnStreamStopInfo
}

func (self *RemoveCdnStreamNotifyReq) ResetDefault() {
}

func (self *RemoveCdnStreamNotifyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vStreamInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *RemoveCdnStreamNotifyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vStreamInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type CRAddCdnLineNotice struct {
	sCdnName string
	sUrl     string
}

func (self *CRAddCdnLineNotice) ResetDefault() {
}

func (self *CRAddCdnLineNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sCdnName))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *CRAddCdnLineNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sCdnName), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUrl), 1)
	if err != nil {
		return err
	}
	return err
}

type CRRePushCdnNotice struct {
	mCdnUrls []string
}

func (self *CRRePushCdnNotice) ResetDefault() {
}

func (self *CRRePushCdnNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.mCdnUrls))
	if err != nil {
		return err
	}
	return err
}

func (self *CRRePushCdnNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.mCdnUrls), 0)
	if err != nil {
		return err
	}
	return err
}

type PayCallBack struct {
	lUid       int64
	iRetCode   int32
	sOrderId   string
	sProduct   string
	sGoodsName string
	sExpand    string
	sSign      string
	iCount     int32
}

func (self *PayCallBack) ResetDefault() {
}

func (self *PayCallBack) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sProduct))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sGoodsName))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sExpand))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sSign))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iCount))
	if err != nil {
		return err
	}
	return err
}

func (self *PayCallBack) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRetCode), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOrderId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sProduct), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGoodsName), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExpand), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSign), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 7)
	if err != nil {
		return err
	}
	return err
}

type GetSequenceReq struct {
	tId     UserId
	iSeqNum int32
}

func (self *GetSequenceReq) ResetDefault() {
}

func (self *GetSequenceReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iSeqNum))
	if err != nil {
		return err
	}
	return err
}

func (self *GetSequenceReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSeqNum), 1)
	if err != nil {
		return err
	}
	return err
}

type GetSequenceRsp struct {
	iRetCode int32
	sSeq     string
}

func (self *GetSequenceRsp) ResetDefault() {
}

func (self *GetSequenceRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sSeq))
	if err != nil {
		return err
	}
	return err
}

func (self *GetSequenceRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSeq), 1)
	if err != nil {
		return err
	}
	return err
}

type ExternalUser struct {
	sId    string
	sToken string
	sOther string
}

func (self *ExternalUser) ResetDefault() {
}

func (self *ExternalUser) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sToken))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sOther))
	if err != nil {
		return err
	}
	return err
}

func (self *ExternalUser) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sToken), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOther), 2)
	if err != nil {
		return err
	}
	return err
}

type SendCardPackageItemReq struct {
	tId               UserId
	lSid              int64
	lSubSid           int64
	iShowFreeitemInfo int32
	iItemType         int32
	iItemCount        int32
	lPresenterUid     int64
	sPayId            string
	sSendContent      string
	sSenderNick       string
	sPresenterNick    string
	iPayPloy          int32
	iItemCountByGroup int32
	iItemGroup        int32
	iSuperPupleLevel  int32
	iFromType         int32
	sExpand           string
	sToken            string
	iTemplateType     int32
	sTokencaKey       string
	sPassport         string
	iSenderShortSid   int64
	iPayByFreeItem    int32
	tExtUser          ExternalUser
}

func (self *SendCardPackageItemReq) ResetDefault() {
}

func (self *SendCardPackageItemReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iShowFreeitemInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iItemCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sPayId))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sSendContent))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sPresenterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iPayPloy))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iItemCountByGroup))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.iItemGroup))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.iSuperPupleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.iFromType))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.sExpand))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.sToken))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.iTemplateType))
	if err != nil {
		return err
	}
	err = jis.ReadField(20, false, &(self.sTokencaKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(21, false, &(self.sPassport))
	if err != nil {
		return err
	}
	err = jis.ReadField(22, false, &(self.iSenderShortSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(23, false, &(self.iPayByFreeItem))
	if err != nil {
		return err
	}
	err = jis.ReadField(24, false, &(self.tExtUser))
	if err != nil {
		return err
	}
	return err
}

func (self *SendCardPackageItemReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShowFreeitemInfo), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPayId), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSendContent), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterNick), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPayPloy), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCountByGroup), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemGroup), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSuperPupleLevel), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFromType), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExpand), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sToken), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTemplateType), 19)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTokencaKey), 20)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPassport), 21)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSenderShortSid), 22)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPayByFreeItem), 23)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tExtUser), 24)
	if err != nil {
		return err
	}
	return err
}

type SendCardPackageItemRsp struct {
	iPayRespCode      int32
	iItemType         int32
	iItemCount        int32
	strPayId          string
	strPayConfirmUrl  string
	strSendContent    string
	iItemCountByGroup int32
	iItemGroup        int32
	lPresenterUid     int64
	sExpand           string
	strPayItemInfo    string
}

func (self *SendCardPackageItemRsp) ResetDefault() {
}

func (self *SendCardPackageItemRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPayRespCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iItemCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.strPayId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.strPayConfirmUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.strSendContent))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iItemCountByGroup))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iItemGroup))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sExpand))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.strPayItemInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *SendCardPackageItemRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPayRespCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.strPayId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.strPayConfirmUrl), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.strSendContent), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCountByGroup), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemGroup), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExpand), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.strPayItemInfo), 10)
	if err != nil {
		return err
	}
	return err
}

type SendItemSubBroadcastPacket struct {
	iItemType         int32
	strPayId          string
	iItemCount        int32
	lPresenterUid     int64
	lSenderUid        int64
	sPresenterNick    string
	sSenderNick       string
	sSendContent      string
	iItemCountByGroup int32
	iItemGroup        int32
	iSuperPupleLevel  int32
	iComboScore       int32
	iDisplayInfo      int32
	iEffectType       int32
	iSenderIcon       string
	iPresenterIcon    string
	iTemplateType     int32
	sExpand           string
	bBusi             bool
	iColorEffectType  int32
	sPropsName        string
}

func (self *SendItemSubBroadcastPacket) ResetDefault() {
}

func (self *SendItemSubBroadcastPacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.strPayId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iItemCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sPresenterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sSendContent))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iItemCountByGroup))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iItemGroup))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iSuperPupleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iComboScore))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iDisplayInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iEffectType))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.iSenderIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.iPresenterIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.iTemplateType))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.sExpand))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.bBusi))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.iColorEffectType))
	if err != nil {
		return err
	}
	err = jis.ReadField(20, false, &(self.sPropsName))
	if err != nil {
		return err
	}
	return err
}

func (self *SendItemSubBroadcastPacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iItemType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.strPayId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterNick), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSendContent), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCountByGroup), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemGroup), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSuperPupleLevel), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iComboScore), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDisplayInfo), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEffectType), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSenderIcon), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterIcon), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTemplateType), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExpand), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bBusi), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iColorEffectType), 19)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPropsName), 20)
	if err != nil {
		return err
	}
	return err
}

type SendItemPresenterNotify struct {
	iItemType      int32
	iItemCount     int32
	lPresenterUid  int64
	lSenderUid     int64
	sPresenterNick string
	sSenderNick    string
	lItemLevel     int32
	iIndex         int32
	iTemplateType  int32
}

func (self *SendItemPresenterNotify) ResetDefault() {
}

func (self *SendItemPresenterNotify) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iItemCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sPresenterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lItemLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iIndex))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iTemplateType))
	if err != nil {
		return err
	}
	return err
}

func (self *SendItemPresenterNotify) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iItemType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lItemLevel), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIndex), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTemplateType), 8)
	if err != nil {
		return err
	}
	return err
}

type SendItemNoticeWordBroadcastPacket struct {
	iItemType           int32
	iItemCount          int32
	lSenderSid          int64
	lSenderUid          int64
	sSenderNick         string
	lPresenterUid       int64
	sPresenterNick      string
	lNoticeChannelCount int64
	iItemCountByGroup   int32
	iItemGroup          int32
	iDisplayInfo        int32
	iSuperPupleLevel    int32
	iTemplateType       int32
	sExpand             string
	bBusi               bool
	iShowTime           int32
	lPresenterYY        int64
}

func (self *SendItemNoticeWordBroadcastPacket) ResetDefault() {
}

func (self *SendItemNoticeWordBroadcastPacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iItemCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSenderSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sPresenterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lNoticeChannelCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iItemCountByGroup))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iItemGroup))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iDisplayInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iSuperPupleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iTemplateType))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.sExpand))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.bBusi))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.iShowTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.lPresenterYY))
	if err != nil {
		return err
	}
	return err
}

func (self *SendItemNoticeWordBroadcastPacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iItemType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterNick), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lNoticeChannelCount), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCountByGroup), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemGroup), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDisplayInfo), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSuperPupleLevel), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTemplateType), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExpand), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bBusi), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShowTime), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterYY), 16)
	if err != nil {
		return err
	}
	return err
}

type AwardUser struct {
	sUserNick  string
	iPrizeType int16
	sPrizeName string
}

func (self *AwardUser) ResetDefault() {
}

func (self *AwardUser) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sUserNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPrizeType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sPrizeName))
	if err != nil {
		return err
	}
	return err
}

func (self *AwardUser) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sUserNick), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPrizeType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPrizeName), 2)
	if err != nil {
		return err
	}
	return err
}

type TreasureNoticePacket struct {
	lStarterUid  int64
	sStarterNick string
	lSid         int64
	lSubSid      int64
	lTimeStamp   int64
}

func (self *TreasureNoticePacket) ResetDefault() {
}

func (self *TreasureNoticePacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lStarterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sStarterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lTimeStamp))
	if err != nil {
		return err
	}
	return err
}

func (self *TreasureNoticePacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lStarterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStarterNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTimeStamp), 4)
	if err != nil {
		return err
	}
	return err
}

type TreasureLotteryResultNoticePacket struct {
	lStarterUid  int64
	lSid         int64
	lSubSid      int64
	lTimeStamp   int64
	iPrizeType   int16
	lUserUid     int64
	sKey         string
	sCode        string
	sPrizeName   string
	sStarterNick string
	sUserNick    string
}

func (self *TreasureLotteryResultNoticePacket) ResetDefault() {
}

func (self *TreasureLotteryResultNoticePacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lStarterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lTimeStamp))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPrizeType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lUserUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sPrizeName))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sStarterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sUserNick))
	if err != nil {
		return err
	}
	return err
}

func (self *TreasureLotteryResultNoticePacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lStarterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTimeStamp), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPrizeType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUserUid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sKey), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCode), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPrizeName), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStarterNick), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUserNick), 10)
	if err != nil {
		return err
	}
	return err
}

type TreasureResultBroadcastPacket struct {
	lStarterUid     int64
	sStarterNick    string
	iShortChannelId int32
	vAwardUsers     []AwardUser
}

func (self *TreasureResultBroadcastPacket) ResetDefault() {
}

func (self *TreasureResultBroadcastPacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lStarterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sStarterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iShortChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vAwardUsers))
	if err != nil {
		return err
	}
	return err
}

func (self *TreasureResultBroadcastPacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lStarterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStarterNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vAwardUsers), 3)
	if err != nil {
		return err
	}
	return err
}

type TreasureStatNoticePacket struct {
	lStarterUid  int64
	lSid         int64
	lSubSid      int64
	lTimeStamp   int64
	sStarterNick string
}

func (self *TreasureStatNoticePacket) ResetDefault() {
}

func (self *TreasureStatNoticePacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lStarterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lTimeStamp))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sStarterNick))
	if err != nil {
		return err
	}
	return err
}

func (self *TreasureStatNoticePacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lStarterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTimeStamp), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStarterNick), 4)
	if err != nil {
		return err
	}
	return err
}

type UserInterChannelReq struct {
	tId     UserId
	lSid    int64
	lSubSid int64
}

func (self *UserInterChannelReq) ResetDefault() {
}

func (self *UserInterChannelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	return err
}

func (self *UserInterChannelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	return err
}

type UserInterChannelRsp struct {
	iRetCode int32
}

func (self *UserInterChannelRsp) ResetDefault() {
}

func (self *UserInterChannelRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	return err
}

func (self *UserInterChannelRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	return err
}

type TreasureLotteryDrawReq struct {
	tId          UserId
	sStarterNick string
	lSid         int64
	lSubSid      int64
}

func (self *TreasureLotteryDrawReq) ResetDefault() {
}

func (self *TreasureLotteryDrawReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sStarterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	return err
}

func (self *TreasureLotteryDrawReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStarterNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 3)
	if err != nil {
		return err
	}
	return err
}

type TreasureLotteryDrawRsp struct {
	lStarterUid int64
	iRetCode    int32
	iPrizeType  int16
	sNickName   string
	sPrizeName  string
}

func (self *TreasureLotteryDrawRsp) ResetDefault() {
}

func (self *TreasureLotteryDrawRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lStarterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPrizeType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sPrizeName))
	if err != nil {
		return err
	}
	return err
}

func (self *TreasureLotteryDrawRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lStarterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRetCode), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPrizeType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPrizeName), 4)
	if err != nil {
		return err
	}
	return err
}

type TreasureUpdateNotice struct {
	lSendUid   int64
	sSendNick  string
	iQueneSize int16
	iCountDown int32
	iState     int16
	Id         string
}

func (self *TreasureUpdateNotice) ResetDefault() {
}

func (self *TreasureUpdateNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lSendUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sSendNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iQueneSize))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iCountDown))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iState))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.Id))
	if err != nil {
		return err
	}
	return err
}

func (self *TreasureUpdateNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lSendUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSendNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iQueneSize), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCountDown), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iState), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.Id), 5)
	if err != nil {
		return err
	}
	return err
}

type QueryTreasureInfoReq struct {
	tId     UserId
	lSid    int64
	lSubSid int64
}

func (self *QueryTreasureInfoReq) ResetDefault() {
}

func (self *QueryTreasureInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryTreasureInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	return err
}

type QueryTreasureInfoRsp struct {
	iRetCode   int32
	iQueneSize int16
	iStatus    int16
	iCountDown int32
	lUid       int64
	sNickName  string
}

func (self *QueryTreasureInfoRsp) ResetDefault() {
}

func (self *QueryTreasureInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iQueneSize))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iCountDown))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sNickName))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryTreasureInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iQueneSize), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCountDown), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 5)
	if err != nil {
		return err
	}
	return err
}

type LuckMoneyPacket struct {
	sOrderId        string
	lUid            int64
	sSenderNick     string
	lSid            int64
	lSubSid         int64
	lSenderShortSid int64
	iMoney          int32
	iCount          int64
	lStartTime      int64
	lNowTime        int64
	lExprire        int64
}

func (self *LuckMoneyPacket) ResetDefault() {
}

func (self *LuckMoneyPacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSenderShortSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iMoney))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.lNowTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.lExprire))
	if err != nil {
		return err
	}
	return err
}

func (self *LuckMoneyPacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sOrderId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderShortSid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMoney), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lNowTime), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExprire), 10)
	if err != nil {
		return err
	}
	return err
}

type LuckMoneyItem struct {
	sItemId     string
	lSenderUid  int64
	sSenderNick string
	iType       int32
	iPacketType int32
	iCount      int64
	lStartTime  int64
	lExprire    int64
}

func (self *LuckMoneyItem) ResetDefault() {
}

func (self *LuckMoneyItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sItemId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPacketType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lExprire))
	if err != nil {
		return err
	}
	return err
}

func (self *LuckMoneyItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sItemId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPacketType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExprire), 7)
	if err != nil {
		return err
	}
	return err
}

type FetchLuckMoneyItem struct {
	sItemId     string
	lSenderUid  int64
	sSenderNick string
	lFetchUid   int64
	sFetchNick  string
	iType       int32
	iPacketType int32
	iCount      int64
	lStartTime  int64
	lFetchTime  int64
}

func (self *FetchLuckMoneyItem) ResetDefault() {
}

func (self *FetchLuckMoneyItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sItemId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lFetchUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sFetchNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iPacketType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.lFetchTime))
	if err != nil {
		return err
	}
	return err
}

func (self *FetchLuckMoneyItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sItemId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lFetchUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFetchNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPacketType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lFetchTime), 9)
	if err != nil {
		return err
	}
	return err
}

type LuckMoneyStore struct {
	sOrderId            string
	lSenderUid          int64
	sSenderNick         string
	sHeadUrl            string
	lSid                int64
	lSubSid             int64
	lSenderShortSid     int64
	iTotalMoney         int32
	lTotalCount         int32
	lStartTime          int64
	lExprite            int64
	lEndTime            int64
	iState              int16
	vLuckMoneyItem      []LuckMoneyItem
	vFetchLuckMoneyItem []FetchLuckMoneyItem
}

func (self *LuckMoneyStore) ResetDefault() {
}

func (self *LuckMoneyStore) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sHeadUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lSenderShortSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iTotalMoney))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lTotalCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.lExprite))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.lEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iState))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.vLuckMoneyItem))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.vFetchLuckMoneyItem))
	if err != nil {
		return err
	}
	return err
}

func (self *LuckMoneyStore) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sOrderId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHeadUrl), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderShortSid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalMoney), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTotalCount), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExprite), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTime), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iState), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vLuckMoneyItem), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vFetchLuckMoneyItem), 14)
	if err != nil {
		return err
	}
	return err
}

type SendLuckMoneyReq struct {
	tId               UserId
	lSid              int64
	lSubSid           int64
	iShowFreeitemInfo int32
	iCount            int32
	iTotalMoney       int32
	lPresenterUid     int64
	sPayId            string
	sSendContent      string
	sSenderNick       string
	sPresenterNick    string
	iPayPloy          int32
	iFromType         int32
	sExpand           string
	sToken            string
	iTemplateType     int32
	sPassport         string
	lSenderShortSid   int64
	iSuperPupleLevel  int32
}

func (self *SendLuckMoneyReq) ResetDefault() {
}

func (self *SendLuckMoneyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iShowFreeitemInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iTotalMoney))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sPayId))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sSendContent))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sPresenterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iPayPloy))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iFromType))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.sExpand))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.sToken))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.iTemplateType))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.sPassport))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.lSenderShortSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.iSuperPupleLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *SendLuckMoneyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShowFreeitemInfo), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalMoney), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPayId), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSendContent), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterNick), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPayPloy), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFromType), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExpand), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sToken), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTemplateType), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPassport), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderShortSid), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSuperPupleLevel), 18)
	if err != nil {
		return err
	}
	return err
}

type SendLuckMoneyRsp struct {
	iPayRespCode   int32
	iCount         int32
	iTotalMoney    int32
	sPayId         string
	sExpand        string
	sPayConfirmUrl string
	sSendContent   string
	sPayItemInfo   string
}

func (self *SendLuckMoneyRsp) ResetDefault() {
}

func (self *SendLuckMoneyRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPayRespCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTotalMoney))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sPayId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sExpand))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sPayConfirmUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sSendContent))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sPayItemInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *SendLuckMoneyRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPayRespCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalMoney), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPayId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExpand), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPayConfirmUrl), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSendContent), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPayItemInfo), 7)
	if err != nil {
		return err
	}
	return err
}

type FetchLuckMoneyReq struct {
	tId       UserId
	sNickName string
	sOrderId  string
	lSid      int64
	lSubSid   int64
}

func (self *FetchLuckMoneyReq) ResetDefault() {
}

func (self *FetchLuckMoneyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	return err
}

func (self *FetchLuckMoneyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOrderId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 4)
	if err != nil {
		return err
	}
	return err
}

type FetchLuckMoneyRsp struct {
	iRetCode    int32
	sOrderId    string
	sHeadUrl    string
	lSenderUid  int64
	sSenderNick string
	iTotalMoney int32
	iCount      int64
	lStartTime  int64
	lExprite    int64
	lEndTime    int64
	vFetchItem  []FetchLuckMoneyItem
}

func (self *FetchLuckMoneyRsp) ResetDefault() {
}

func (self *FetchLuckMoneyRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sHeadUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iTotalMoney))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lExprite))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.lEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.vFetchItem))
	if err != nil {
		return err
	}
	return err
}

func (self *FetchLuckMoneyRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOrderId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHeadUrl), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalMoney), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExprite), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTime), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vFetchItem), 10)
	if err != nil {
		return err
	}
	return err
}

type QueryLuckMoneyReq struct {
	tId     UserId
	lSid    int64
	lSubSid int64
}

func (self *QueryLuckMoneyReq) ResetDefault() {
}

func (self *QueryLuckMoneyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryLuckMoneyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	return err
}

type QueryLuckMoneyRsp struct {
	iRetCode int32
}

func (self *QueryLuckMoneyRsp) ResetDefault() {
}

func (self *QueryLuckMoneyRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryLuckMoneyRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	return err
}

type ContributionRankItem struct {
	lUid        int64
	sName       string
	sLogoUrl    string
	lScore      int64
	iNobleLevel int32
}

func (self *ContributionRankItem) ResetDefault() {
}

func (self *ContributionRankItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sLogoUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lScore))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *ContributionRankItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoUrl), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lScore), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 4)
	if err != nil {
		return err
	}
	return err
}

type ContributionRankReq struct {
	tUserId UserId
	lTid    int64
	lSid    int64
	lPid    int64
}

func (self *ContributionRankReq) ResetDefault() {
}

func (self *ContributionRankReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *ContributionRankReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	return err
}

type ContributionPresenterReq struct {
	tUserId UserId
	lPid    int64
	lTid    int64
	lSid    int64
}

func (self *ContributionPresenterReq) ResetDefault() {
}

func (self *ContributionPresenterReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *ContributionPresenterReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 3)
	if err != nil {
		return err
	}
	return err
}

type BroadCastLuckMoneyInfoMessage struct {
	lTopSid         int64
	lSubSid         int64
	lSenderShortSid int64
	sOrderId        string
	vPackets        []LuckMoneyPacket
}

func (self *BroadCastLuckMoneyInfoMessage) ResetDefault() {
}

func (self *BroadCastLuckMoneyInfoMessage) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSenderShortSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vPackets))
	if err != nil {
		return err
	}
	return err
}

func (self *BroadCastLuckMoneyInfoMessage) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderShortSid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOrderId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPackets), 5)
	if err != nil {
		return err
	}
	return err
}

type ContributionPresenterRsp struct {
	lUid        int64
	lScore      int64
	iNobleLevel int32
}

func (self *ContributionPresenterRsp) ResetDefault() {
}

func (self *ContributionPresenterRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lScore))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *ContributionPresenterRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lScore), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 2)
	if err != nil {
		return err
	}
	return err
}

type ContributionRankRsp struct {
	vRank []ContributionRankItem
}

func (self *ContributionRankRsp) ResetDefault() {
}

func (self *ContributionRankRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vRank))
	if err != nil {
		return err
	}
	return err
}

func (self *ContributionRankRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vRank), 0)
	if err != nil {
		return err
	}
	return err
}

type ContributionRankChangeBanner struct {
	lUid        int64
	lPid        int64
	iRank       int32
	sNickName   string
	sLogoURL    string
	iNobleLevel int32
}

func (self *ContributionRankChangeBanner) ResetDefault() {
}

func (self *ContributionRankChangeBanner) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sLogoURL))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *ContributionRankChangeBanner) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRank), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 5)
	if err != nil {
		return err
	}
	return err
}

type BroadCastSubChannelLuckMoneyMessage struct {
	lSenderUid     int64
	sSenderNick    string
	lPresenterUid  int64
	sPresenterNick string
	iTotalMoney    int32
	iCount         int32
	lStartTime     int64
	lExprite       int64
	sExpand        string
	vPackets       []LuckMoneyPacket
}

func (self *BroadCastSubChannelLuckMoneyMessage) ResetDefault() {
}

func (self *BroadCastSubChannelLuckMoneyMessage) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sPresenterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iTotalMoney))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lExprite))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sExpand))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.vPackets))
	if err != nil {
		return err
	}
	return err
}

func (self *BroadCastSubChannelLuckMoneyMessage) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lSenderUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterNick), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalMoney), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExprite), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExpand), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPackets), 9)
	if err != nil {
		return err
	}
	return err
}

type BroadCastAllChannelLuckMoneyMessage struct {
	lSenderUid       int64
	sSenderNick      string
	lPresenterUid    int64
	sPresenterNick   string
	lSid             int64
	lSubSid          int64
	lSenderSid       int64
	iTotalMoney      int32
	iCount           int32
	iSuperPupleLevel int32
	iTemplateType    int32
	sExpand          string
}

func (self *BroadCastAllChannelLuckMoneyMessage) ResetDefault() {
}

func (self *BroadCastAllChannelLuckMoneyMessage) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sPresenterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lSenderSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iTotalMoney))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iSuperPupleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iTemplateType))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sExpand))
	if err != nil {
		return err
	}
	return err
}

func (self *BroadCastAllChannelLuckMoneyMessage) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lSenderUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterNick), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderSid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalMoney), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSuperPupleLevel), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTemplateType), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExpand), 11)
	if err != nil {
		return err
	}
	return err
}

type BroadCastSubChannelFetchLuckMoneyMessage struct {
	sOrderId    string
	HeadUrl     string
	lSenderUid  int64
	sSenderNick string
	iCount      int64
	lStartTime  int64
	lExprite    int64
	lEndTime    int64
	vFetchItem  []FetchLuckMoneyItem
}

func (self *BroadCastSubChannelFetchLuckMoneyMessage) ResetDefault() {
}

func (self *BroadCastSubChannelFetchLuckMoneyMessage) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.HeadUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sSenderNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lExprite))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.vFetchItem))
	if err != nil {
		return err
	}
	return err
}

func (self *BroadCastSubChannelFetchLuckMoneyMessage) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sOrderId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.HeadUrl), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNick), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExprite), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTime), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vFetchItem), 8)
	if err != nil {
		return err
	}
	return err
}

type GiftItem struct {
	iCount      int32
	lTotalPrice int64
	lGoldenBean int64
	sItemName   string
	iPropId     int32
	sIcon       string
}

func (self *GiftItem) ResetDefault() {
}

func (self *GiftItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTotalPrice))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lGoldenBean))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sItemName))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iPropId))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sIcon))
	if err != nil {
		return err
	}
	return err
}

func (self *GiftItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCount), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTotalPrice), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGoldenBean), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sItemName), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropId), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIcon), 6)
	if err != nil {
		return err
	}
	return err
}

type QueryGiftReq struct {
	tId UserId
}

func (self *QueryGiftReq) ResetDefault() {
}

func (self *QueryGiftReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryGiftReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type QueryGiftRsp struct {
	iRetCode int32
	data     map[int32]GiftItem
}

func (self *QueryGiftRsp) ResetDefault() {
}

func (self *QueryGiftRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.data))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryGiftRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.data), 1)
	if err != nil {
		return err
	}
	return err
}

type QuerySortGiftReq struct {
	tId       UserId
	iFromType int32
}

func (self *QuerySortGiftReq) ResetDefault() {
}

func (self *QuerySortGiftReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iFromType))
	if err != nil {
		return err
	}
	return err
}

func (self *QuerySortGiftReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFromType), 1)
	if err != nil {
		return err
	}
	return err
}

type QuerySortGiftRsp struct {
	iRetCode int32
	data     []GiftItem
}

func (self *QuerySortGiftRsp) ResetDefault() {
}

func (self *QuerySortGiftRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.data))
	if err != nil {
		return err
	}
	return err
}

func (self *QuerySortGiftRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.data), 1)
	if err != nil {
		return err
	}
	return err
}

type QueryCurrentGiftReq struct {
	tId     UserId
	lTid    int64
	lSid    int64
	lLiveId int64
}

func (self *QueryCurrentGiftReq) ResetDefault() {
}

func (self *QueryCurrentGiftReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryCurrentGiftReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 3)
	if err != nil {
		return err
	}
	return err
}

type QueryCurrentGiftRsp struct {
	iRetCode int32
	lTotal   int64
	data     map[int32]GiftItem
}

func (self *QueryCurrentGiftRsp) ResetDefault() {
}

func (self *QueryCurrentGiftRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTotal))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.data))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryCurrentGiftRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTotal), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.data), 2)
	if err != nil {
		return err
	}
	return err
}

type InOutCashPoolReq struct {
	tUserId    UserId
	lUid       int64
	sPoolID    string
	iItemType  int32
	lItemCount int64
	iOpType    int32
	iPoolType  int32
	iUseType1  int32
	iUseType2  int32
	sOrderId   string
}

func (self *InOutCashPoolReq) ResetDefault() {
}

func (self *InOutCashPoolReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sPoolID))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lItemCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iOpType))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iPoolType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iUseType1))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iUseType2))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	return err
}

func (self *InOutCashPoolReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPoolID), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lItemCount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOpType), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPoolType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseType1), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseType2), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOrderId), 9)
	if err != nil {
		return err
	}
	return err
}

type InOutCashPoolRsp struct {
	iItemType  int32
	lItemCount int64
}

func (self *InOutCashPoolRsp) ResetDefault() {
}

func (self *InOutCashPoolRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lItemCount))
	if err != nil {
		return err
	}
	return err
}

func (self *InOutCashPoolRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iItemType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lItemCount), 1)
	if err != nil {
		return err
	}
	return err
}

type AddCashPoolReq struct {
	tUserId   UserId
	sPoolID   string
	iPoolType int32
	iItemType int32
}

func (self *AddCashPoolReq) ResetDefault() {
}

func (self *AddCashPoolReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sPoolID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPoolType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iItemType))
	if err != nil {
		return err
	}
	return err
}

func (self *AddCashPoolReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPoolID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPoolType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 3)
	if err != nil {
		return err
	}
	return err
}

type GetUserCardPackageReq struct {
	tId           UserId
	eTempleteType int32
	eSource       int32
}

func (self *GetUserCardPackageReq) ResetDefault() {
}

func (self *GetUserCardPackageReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.eTempleteType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.eSource))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserCardPackageReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eTempleteType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eSource), 2)
	if err != nil {
		return err
	}
	return err
}

type CardItemCountInfo struct {
	iItemType  int32
	iItemCount int64
}

func (self *CardItemCountInfo) ResetDefault() {
}

func (self *CardItemCountInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iItemCount))
	if err != nil {
		return err
	}
	return err
}

func (self *CardItemCountInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iItemType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCount), 1)
	if err != nil {
		return err
	}
	return err
}

type GetUserCardPackageResp struct {
	vUserCardItemCountLists []CardItemCountInfo
}

func (self *GetUserCardPackageResp) ResetDefault() {
}

func (self *GetUserCardPackageResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vUserCardItemCountLists))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserCardPackageResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vUserCardItemCountLists), 0)
	if err != nil {
		return err
	}
	return err
}

type GetUserCardPackageAvailableCardListReq struct {
	tId           UserId
	eTempleteType int32
	eSource       int32
}

func (self *GetUserCardPackageAvailableCardListReq) ResetDefault() {
}

func (self *GetUserCardPackageAvailableCardListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.eTempleteType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.eSource))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserCardPackageAvailableCardListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eTempleteType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eSource), 2)
	if err != nil {
		return err
	}
	return err
}

type ItemCardInfo struct {
	cardtype        int32
	cardname        string
	cardpublictime  int32
	cardexpiredtime int32
	itemtype        int32
	itemcount       int64
	itemx           int32
	itemy           int32
	cardexpiredtype int32
}

func (self *ItemCardInfo) ResetDefault() {
}

func (self *ItemCardInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.cardtype))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.cardname))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.cardpublictime))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.cardexpiredtime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.itemtype))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.itemcount))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.itemx))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.itemy))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.cardexpiredtype))
	if err != nil {
		return err
	}
	return err
}

func (self *ItemCardInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.cardtype), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.cardname), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.cardpublictime), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.cardexpiredtime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.itemtype), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.itemcount), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.itemx), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.itemy), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.cardexpiredtype), 9)
	if err != nil {
		return err
	}
	return err
}

type GetUserCardPackageAvailableCardListResp struct {
	vUserCardItemLists []ItemCardInfo
}

func (self *GetUserCardPackageAvailableCardListResp) ResetDefault() {
}

func (self *GetUserCardPackageAvailableCardListResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vUserCardItemLists))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserCardPackageAvailableCardListResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vUserCardItemLists), 0)
	if err != nil {
		return err
	}
	return err
}

type CheckLiveDescReq struct {
	tId       UserId
	lTopSid   int64
	lSubSid   int64
	sNickName string
	sLiveDesc string
}

func (self *CheckLiveDescReq) ResetDefault() {
}

func (self *CheckLiveDescReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sLiveDesc))
	if err != nil {
		return err
	}
	return err
}

func (self *CheckLiveDescReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveDesc), 4)
	if err != nil {
		return err
	}
	return err
}

type CheckLiveDescRsp struct {
	sMessage string
}

func (self *CheckLiveDescRsp) ResetDefault() {
}

func (self *CheckLiveDescRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *CheckLiveDescRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sMessage), 0)
	if err != nil {
		return err
	}
	return err
}

type BeginLiveReq struct {
	tId                 UserId
	iPopupFlags         int32
	iBandWidth          int32
	iResolution         int32
	iPresentType        int32
	iGameId             int32
	iIsCdnSupport       int32
	lTopSid             int64
	lSubSid             int64
	iNewGameId          int32
	sNickName           string
	sLiveDesc           string
	iShortChannel       int32
	iBitRate            int32
	iFrameRate          int32
	iSourceType         int32
	iCodecType          int32
	iScreenType         int32
	lLiveCompatibleFlag int64
	mMiscInfo           map[string]string
	sGPSInfo            string
}

func (self *BeginLiveReq) ResetDefault() {
}

func (self *BeginLiveReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPopupFlags))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBandWidth))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iResolution))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPresentType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iIsCdnSupport))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iNewGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sLiveDesc))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iBitRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.iFrameRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.iCodecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.iScreenType))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.lLiveCompatibleFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.mMiscInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(20, false, &(self.sGPSInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *BeginLiveReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPopupFlags), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBandWidth), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iResolution), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresentType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsCdnSupport), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNewGameId), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveDesc), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBitRate), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFrameRate), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSourceType), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCodecType), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScreenType), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveCompatibleFlag), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mMiscInfo), 19)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGPSInfo), 20)
	if err != nil {
		return err
	}
	return err
}

type BeginLiveRsp struct {
	sMesssage          string
	iStreamType        int32
	sUpStreamAddress   string
	iHeartbeatInterval int32
	iIsMultiStream     int32
	iRespCode          int32
	vSwitchStreamUrl   []string
	lLiveId            int64
	lMultiStreamFlag   int64
}

func (self *BeginLiveRsp) ResetDefault() {
}

func (self *BeginLiveRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sMesssage))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iStreamType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sUpStreamAddress))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iHeartbeatInterval))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iIsMultiStream))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iRespCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.vSwitchStreamUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lMultiStreamFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *BeginLiveRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sMesssage), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStreamType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUpStreamAddress), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHeartbeatInterval), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsMultiStream), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRespCode), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSwitchStreamUrl), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lMultiStreamFlag), 8)
	if err != nil {
		return err
	}
	return err
}

type StreamInfo struct {
	sCdnType            string
	iIsMaster           int32
	lChannelId          int64
	lSubChannelId       int64
	lPresenterUid       int64
	sStreamName         string
	sFlvUrl             string
	sFlvUrlSuffix       string
	sFlvAntiCode        string
	sHlsUrl             string
	sHlsUrlSuffix       string
	sHlsAntiCode        string
	iLineIndex          int32
	iIsMultiStream      int32
	iPCPriorityRate     int32
	iWebPriorityRate    int32
	iMobilePriorityRate int32
}

func (self *StreamInfo) ResetDefault() {
}

func (self *StreamInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sCdnType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iIsMaster))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sStreamName))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sFlvUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sFlvUrlSuffix))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sFlvAntiCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sHlsUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sHlsUrlSuffix))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sHlsAntiCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iLineIndex))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iIsMultiStream))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.iPCPriorityRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.iWebPriorityRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.iMobilePriorityRate))
	if err != nil {
		return err
	}
	return err
}

func (self *StreamInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sCdnType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsMaster), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStreamName), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFlvUrl), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFlvUrlSuffix), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFlvAntiCode), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHlsUrl), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHlsUrlSuffix), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHlsAntiCode), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLineIndex), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsMultiStream), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPCPriorityRate), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWebPriorityRate), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMobilePriorityRate), 16)
	if err != nil {
		return err
	}
	return err
}

type MultiStreamInfo struct {
	sDisplayName    string
	iBitRate        int32
	iCodecType      int32
	iCompatibleFlag int32
}

func (self *MultiStreamInfo) ResetDefault() {
}

func (self *MultiStreamInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sDisplayName))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBitRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCodecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iCompatibleFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *MultiStreamInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sDisplayName), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBitRate), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCodecType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCompatibleFlag), 3)
	if err != nil {
		return err
	}
	return err
}

type BeginLiveNotice struct {
	lPresenterUid         int64
	iGameId               int32
	sGameName             string
	iRandomRange          int32
	iStreamType           int32
	vStreamInfo           []StreamInfo
	vCdnList              []string
	lLiveId               int64
	iPCDefaultBitRate     int32
	iWebDefaultBitRate    int32
	iMobileDefaultBitRate int32
	lMultiStreamFlag      int64
	sNick                 string
	lYYId                 int64
	lAttendeeCount        int64
	iCodecType            int32
	iScreenType           int32
	vMultiStreamInfo      []MultiStreamInfo
	sLiveDesc             string
	lLiveCompatibleFlag   int64
	sAvatarUrl            string
	iSourceType           int32
	sSubchannelName       string
	sVideoCaptureUrl      string
	iStartTime            int32
	lChannelId            int64
	lSubChannelId         int64
}

func (self *BeginLiveNotice) ResetDefault() {
}

func (self *BeginLiveNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iRandomRange))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iStreamType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vStreamInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.vCdnList))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iPCDefaultBitRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iWebDefaultBitRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iMobileDefaultBitRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.lMultiStreamFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.lYYId))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.lAttendeeCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.iCodecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.iScreenType))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.vMultiStreamInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.sLiveDesc))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.lLiveCompatibleFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(20, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(21, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	err = jis.ReadField(22, false, &(self.sSubchannelName))
	if err != nil {
		return err
	}
	err = jis.ReadField(23, false, &(self.sVideoCaptureUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(24, false, &(self.iStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(25, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(26, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	return err
}

func (self *BeginLiveNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPresenterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRandomRange), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStreamType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vStreamInfo), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vCdnList), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPCDefaultBitRate), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWebDefaultBitRate), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMobileDefaultBitRate), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lMultiStreamFlag), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAttendeeCount), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCodecType), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScreenType), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vMultiStreamInfo), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveDesc), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveCompatibleFlag), 19)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 20)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSourceType), 21)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSubchannelName), 22)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVideoCaptureUrl), 23)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStartTime), 24)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 25)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 26)
	if err != nil {
		return err
	}
	return err
}

type StreamSettingNotice struct {
	lPresenterUid int64
	iBitRate      int32
	iResolution   int32
	iFrameRate    int32
	lLiveId       int64
	sDisplayName  string
}

func (self *StreamSettingNotice) ResetDefault() {
}

func (self *StreamSettingNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBitRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iResolution))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iFrameRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sDisplayName))
	if err != nil {
		return err
	}
	return err
}

func (self *StreamSettingNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPresenterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBitRate), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iResolution), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFrameRate), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDisplayName), 5)
	if err != nil {
		return err
	}
	return err
}

type StreamEndNotice struct {
	sStreamName string
	sCdnType    string
	iLineIndex  int32
	lLiveId     int64
}

func (self *StreamEndNotice) ResetDefault() {
}

func (self *StreamEndNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sStreamName))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sCdnType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLineIndex))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	return err
}

func (self *StreamEndNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sStreamName), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCdnType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLineIndex), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 3)
	if err != nil {
		return err
	}
	return err
}

type LiveInfoChangedNotice struct {
	lPresenterUid int64
	iGameId       int32
	sGameName     string
	lLiveId       int64
}

func (self *LiveInfoChangedNotice) ResetDefault() {
}

func (self *LiveInfoChangedNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveInfoChangedNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPresenterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 3)
	if err != nil {
		return err
	}
	return err
}

type GetLivingInfoReq struct {
	tId           UserId
	lTopSid       int64
	lSubSid       int64
	lPresenterUid int64
}

func (self *GetLivingInfoReq) ResetDefault() {
}

func (self *GetLivingInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetLivingInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 3)
	if err != nil {
		return err
	}
	return err
}

type GetLivingInfoRsp struct {
	bIsLiving            int32
	tNotice              BeginLiveNotice
	tStreamSettingNotice StreamSettingNotice
	bIsSelfLiving        int32
}

func (self *GetLivingInfoRsp) ResetDefault() {
}

func (self *GetLivingInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.bIsLiving))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tNotice))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tStreamSettingNotice))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.bIsSelfLiving))
	if err != nil {
		return err
	}
	return err
}

func (self *GetLivingInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.bIsLiving), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tNotice), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tStreamSettingNotice), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bIsSelfLiving), 3)
	if err != nil {
		return err
	}
	return err
}

type GetLivingInfoByChannelReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
}

func (self *GetLivingInfoByChannelReq) ResetDefault() {
}

func (self *GetLivingInfoByChannelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetLivingInfoByChannelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	return err
}

type GetLivingInfoByChannelRsp struct {
	vGameLiveInfo []GameLiveInfo
}

func (self *GetLivingInfoByChannelRsp) ResetDefault() {
}

func (self *GetLivingInfoByChannelRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameLiveInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetLivingInfoByChannelRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameLiveInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GetLivingInfoByChannelIdReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
}

func (self *GetLivingInfoByChannelIdReq) ResetDefault() {
}

func (self *GetLivingInfoByChannelIdReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetLivingInfoByChannelIdReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	return err
}

type EndLiveReq struct {
	tId     UserId
	iReason int32
}

func (self *EndLiveReq) ResetDefault() {
}

func (self *EndLiveReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iReason))
	if err != nil {
		return err
	}
	return err
}

func (self *EndLiveReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iReason), 1)
	if err != nil {
		return err
	}
	return err
}

type EndLiveNotice struct {
	lPresenterUid int64
	iReason       int32
	lLiveId       int64
}

func (self *EndLiveNotice) ResetDefault() {
}

func (self *EndLiveNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iReason))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	return err
}

func (self *EndLiveNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPresenterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iReason), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 2)
	if err != nil {
		return err
	}
	return err
}

type ChangeLiveInfoReq struct {
	tId        UserId
	iGameId    int32
	iNewGameId int32
	sLiveDesc  string
}

func (self *ChangeLiveInfoReq) ResetDefault() {
}

func (self *ChangeLiveInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iNewGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sLiveDesc))
	if err != nil {
		return err
	}
	return err
}

func (self *ChangeLiveInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNewGameId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveDesc), 3)
	if err != nil {
		return err
	}
	return err
}

type ChangeLiveInfoRsp struct {
	sMessage string
}

func (self *ChangeLiveInfoRsp) ResetDefault() {
}

func (self *ChangeLiveInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *ChangeLiveInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sMessage), 0)
	if err != nil {
		return err
	}
	return err
}

type SendLinkMicMessageReq struct {
	lSenderUid         int64
	sSenderNickName    string
	lSenderChannelId   int64
	sMessage           string
	lReceiverUid       int64
	lReceiverChannelId int64
	iSenderFansLevel   int32
	sSenderFansNick    string
	iReceiverFansLevel int32
	sReceiverFansNick  string
	tId                UserId
}

func (self *SendLinkMicMessageReq) ResetDefault() {
}

func (self *SendLinkMicMessageReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sSenderNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSenderChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sMessage))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lReceiverUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lReceiverChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iSenderFansLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sSenderFansNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iReceiverFansLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sReceiverFansNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *SendLinkMicMessageReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lSenderUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMessage), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lReceiverUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lReceiverChannelId), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSenderFansLevel), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderFansNick), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iReceiverFansLevel), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sReceiverFansNick), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tId), 10)
	if err != nil {
		return err
	}
	return err
}

type SendReplayMessageReq struct {
	tId             UserId
	sSenderNickName string
	iGroupType      int32
	iGroupId        int32
	sMessage        string
}

func (self *SendReplayMessageReq) ResetDefault() {
}

func (self *SendReplayMessageReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sSenderNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iGroupType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGroupId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *SendReplayMessageReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGroupType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGroupId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMessage), 4)
	if err != nil {
		return err
	}
	return err
}

type SendReplayMessageRsp struct {
	lUid      int64
	iValidate int32
}

func (self *SendReplayMessageRsp) ResetDefault() {
}

func (self *SendReplayMessageRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iValidate))
	if err != nil {
		return err
	}
	return err
}

func (self *SendReplayMessageRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iValidate), 1)
	if err != nil {
		return err
	}
	return err
}

type ReplayMessageBody struct {
	sMessage        string
	lSenderUid      int64
	sSenderNickName string
	iGroupType      int32
	iGroupId        int32
}

func (self *ReplayMessageBody) ResetDefault() {
}

func (self *ReplayMessageBody) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sMessage))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sSenderNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGroupType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iGroupId))
	if err != nil {
		return err
	}
	return err
}

func (self *ReplayMessageBody) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sMessage), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNickName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGroupType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGroupId), 4)
	if err != nil {
		return err
	}
	return err
}

type GameLiveHlsInfo struct {
	tGameInfo      GameLiveInfo
	sHlsUrl        string
	iVideoSyncTime int32
}

func (self *GameLiveHlsInfo) ResetDefault() {
}

func (self *GameLiveHlsInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tGameInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sHlsUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iVideoSyncTime))
	if err != nil {
		return err
	}
	return err
}

func (self *GameLiveHlsInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tGameInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHlsUrl), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVideoSyncTime), 2)
	if err != nil {
		return err
	}
	return err
}

type SendLinkMicMessageRsp struct {
	iValidate int32
}

func (self *SendLinkMicMessageRsp) ResetDefault() {
}

func (self *SendLinkMicMessageRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iValidate))
	if err != nil {
		return err
	}
	return err
}

func (self *SendLinkMicMessageRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iValidate), 0)
	if err != nil {
		return err
	}
	return err
}

type GetGameLiveHisUponReq struct {
	lUid          int64
	iMinutes      int32
	iNumberWanted int32
}

func (self *GetGameLiveHisUponReq) ResetDefault() {
}

func (self *GetGameLiveHisUponReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMinutes))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iNumberWanted))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameLiveHisUponReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMinutes), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNumberWanted), 2)
	if err != nil {
		return err
	}
	return err
}

type GetGameLiveHisUponRsp struct {
	lUid         int64
	vHistoryList []GameLiveHlsInfo
}

func (self *GetGameLiveHisUponRsp) ResetDefault() {
}

func (self *GetGameLiveHisUponRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vHistoryList))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameLiveHisUponRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vHistoryList), 1)
	if err != nil {
		return err
	}
	return err
}

type GetGameLiveHisUponBatchReq struct {
	vUids         []int64
	iMinutes      int32
	iNumberWanted int32
}

func (self *GetGameLiveHisUponBatchReq) ResetDefault() {
}

func (self *GetGameLiveHisUponBatchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMinutes))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iNumberWanted))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameLiveHisUponBatchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vUids), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMinutes), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNumberWanted), 2)
	if err != nil {
		return err
	}
	return err
}

type GetGameLiveHisUponBatchRsp struct {
	vUids            []int64
	vUserHistoryList [][]GameLiveHlsInfo
}

func (self *GetGameLiveHisUponBatchRsp) ResetDefault() {
}

func (self *GetGameLiveHisUponBatchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUserHistoryList))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameLiveHisUponBatchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vUids), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUserHistoryList), 1)
	if err != nil {
		return err
	}
	return err
}

type GetGameLiveReplayInfoReq struct {
	lLiveId       int64
	lPresenterUid int64
}

func (self *GetGameLiveReplayInfoReq) ResetDefault() {
}

func (self *GetGameLiveReplayInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameLiveReplayInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lLiveId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetGameLiveReplayInfoRsp struct {
	tHlsInfo GameLiveHlsInfo
}

func (self *GetGameLiveReplayInfoRsp) ResetDefault() {
}

func (self *GetGameLiveReplayInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tHlsInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameLiveReplayInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tHlsInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type LinkMicMessageBody struct {
	lId                int64
	sMessage           string
	lSenderUid         int64
	sSenderNickName    string
	iSenderFansLevel   int32
	sSenderFansNick    string
	iReceiverFansLevel int32
	sReceiverFansNick  string
}

func (self *LinkMicMessageBody) ResetDefault() {
}

func (self *LinkMicMessageBody) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMessage))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSenderUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sSenderNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iSenderFansLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sSenderFansNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iReceiverFansLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sReceiverFansNick))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicMessageBody) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMessage), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSenderUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderNickName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSenderFansLevel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSenderFansNick), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iReceiverFansLevel), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sReceiverFansNick), 7)
	if err != nil {
		return err
	}
	return err
}

type ReplayPresenterInLiveNotify struct {
	lUid          int64
	lChannelId    int64
	lSubChannelId int64
}

func (self *ReplayPresenterInLiveNotify) ResetDefault() {
}

func (self *ReplayPresenterInLiveNotify) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	return err
}

func (self *ReplayPresenterInLiveNotify) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 2)
	if err != nil {
		return err
	}
	return err
}

type AttendeGameListItem struct {
	iGameId        int32
	sGameName      string
	iAttendeeCount int32
}

func (self *AttendeGameListItem) ResetDefault() {
}

func (self *AttendeGameListItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iAttendeeCount))
	if err != nil {
		return err
	}
	return err
}

func (self *AttendeGameListItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAttendeeCount), 2)
	if err != nil {
		return err
	}
	return err
}

type GetAttendeeGameListReq struct {
	iSourceType int32
}

func (self *GetAttendeeGameListReq) ResetDefault() {
}

func (self *GetAttendeeGameListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAttendeeGameListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSourceType), 0)
	if err != nil {
		return err
	}
	return err
}

type GetAttendeeGameListRsp struct {
	vAttendeGameListItem []AttendeGameListItem
}

func (self *GetAttendeeGameListRsp) ResetDefault() {
}

func (self *GetAttendeeGameListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vAttendeGameListItem))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAttendeeGameListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vAttendeGameListItem), 0)
	if err != nil {
		return err
	}
	return err
}

type ChangeStreamSettingReq struct {
	tId         UserId
	iBitRate    int32
	iResolution int32
	iFrameRate  int32
}

func (self *ChangeStreamSettingReq) ResetDefault() {
}

func (self *ChangeStreamSettingReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBitRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iResolution))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iFrameRate))
	if err != nil {
		return err
	}
	return err
}

func (self *ChangeStreamSettingReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBitRate), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iResolution), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFrameRate), 3)
	if err != nil {
		return err
	}
	return err
}

type ForceChangeStreamSettingNotice struct {
	lUid                 int64
	iBitRate             int32
	iResolution          int32
	iFrameRate           int32
	iSetMultiStream      int32
	iIsSave              int32
	iDXOptimizationLevel int32
	iCodecType           int32
}

func (self *ForceChangeStreamSettingNotice) ResetDefault() {
}

func (self *ForceChangeStreamSettingNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBitRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iResolution))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iFrameRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iSetMultiStream))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iIsSave))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iDXOptimizationLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iCodecType))
	if err != nil {
		return err
	}
	return err
}

func (self *ForceChangeStreamSettingNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBitRate), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iResolution), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFrameRate), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSetMultiStream), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsSave), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDXOptimizationLevel), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCodecType), 7)
	if err != nil {
		return err
	}
	return err
}

type WeekStarPropsIdsReq struct {
	tUserId       UserId
	iWeekStarType int32
}

func (self *WeekStarPropsIdsReq) ResetDefault() {
}

func (self *WeekStarPropsIdsReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iWeekStarType))
	if err != nil {
		return err
	}
	return err
}

func (self *WeekStarPropsIdsReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeekStarType), 1)
	if err != nil {
		return err
	}
	return err
}

type WeekStarPropsIds struct {
	vPropsId []int64
	iType    int32
}

func (self *WeekStarPropsIds) ResetDefault() {
}

func (self *WeekStarPropsIds) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vPropsId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iType))
	if err != nil {
		return err
	}
	return err
}

func (self *WeekStarPropsIds) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPropsId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 1)
	if err != nil {
		return err
	}
	return err
}

type WeekStarPropsReq struct {
	tUserId       UserId
	iWeekDelta    int32
	iWeekStarType int32
}

func (self *WeekStarPropsReq) ResetDefault() {
}

func (self *WeekStarPropsReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iWeekDelta))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iWeekStarType))
	if err != nil {
		return err
	}
	return err
}

func (self *WeekStarPropsReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeekDelta), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeekStarType), 2)
	if err != nil {
		return err
	}
	return err
}

type PresenterItem struct {
	lPId      int64
	iPropsNum int32
	sNickname string
	sFaceURL  string
	lTid      int64
	lSid      int64
	lImid     int64
}

func (self *PresenterItem) ResetDefault() {
}

func (self *PresenterItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPropsNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNickname))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sFaceURL))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lImid))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropsNum), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickname), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFaceURL), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lImid), 6)
	if err != nil {
		return err
	}
	return err
}

type StarProps struct {
	lPropsId           int64
	sPropsName         string
	vTopNPresenterItem []PresenterItem
}

func (self *StarProps) ResetDefault() {
}

func (self *StarProps) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPropsId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sPropsName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vTopNPresenterItem))
	if err != nil {
		return err
	}
	return err
}

func (self *StarProps) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPropsId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPropsName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vTopNPresenterItem), 2)
	if err != nil {
		return err
	}
	return err
}

type WeekStarProps struct {
	lBegTimestamp int64
	lEndTimestamp int64
	vStartProps   []StarProps
	iWeekDelta    int32
	sTitle        string
	sUrl          string
}

func (self *WeekStarProps) ResetDefault() {
}

func (self *WeekStarProps) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lBegTimestamp))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lEndTimestamp))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vStartProps))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iWeekDelta))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *WeekStarProps) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lBegTimestamp), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTimestamp), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vStartProps), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeekDelta), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTitle), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUrl), 5)
	if err != nil {
		return err
	}
	return err
}

type PrensenterRankingReq struct {
	tUserId       UserId
	lPresenterId  int64
	lPropsId      int64
	iWeekStarType int32
}

func (self *PrensenterRankingReq) ResetDefault() {
}

func (self *PrensenterRankingReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPropsId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iWeekStarType))
	if err != nil {
		return err
	}
	return err
}

func (self *PrensenterRankingReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPropsId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeekStarType), 3)
	if err != nil {
		return err
	}
	return err
}

type PrensenterRankingRsp struct {
	iRanking     int32
	lPresenterId int64
	lPropsId     int64
	iPropsNum    int32
}

func (self *PrensenterRankingRsp) ResetDefault() {
}

func (self *PrensenterRankingRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRanking))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPropsId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPropsNum))
	if err != nil {
		return err
	}
	return err
}

func (self *PrensenterRankingRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRanking), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPropsId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropsNum), 3)
	if err != nil {
		return err
	}
	return err
}

type PrensenterRankingsReq struct {
	tUserId       UserId
	lPresenterId  int64
	iWeekStarType int32
}

func (self *PrensenterRankingsReq) ResetDefault() {
}

func (self *PrensenterRankingsReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iWeekStarType))
	if err != nil {
		return err
	}
	return err
}

func (self *PrensenterRankingsReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeekStarType), 2)
	if err != nil {
		return err
	}
	return err
}

type PrensenterRankingsRsp struct {
	lPresenterId int64
	vRanking     []PrensenterRankingRsp
}

func (self *PrensenterRankingsRsp) ResetDefault() {
}

func (self *PrensenterRankingsRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPresenterId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vRanking))
	if err != nil {
		return err
	}
	return err
}

func (self *PrensenterRankingsRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPresenterId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vRanking), 1)
	if err != nil {
		return err
	}
	return err
}

type SetWeekStarPropsAwardReq struct {
	iWeekDelta    int32
	sTitle        string
	sUrl          string
	iWeekStarType int32
}

func (self *SetWeekStarPropsAwardReq) ResetDefault() {
}

func (self *SetWeekStarPropsAwardReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iWeekDelta))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iWeekStarType))
	if err != nil {
		return err
	}
	return err
}

func (self *SetWeekStarPropsAwardReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iWeekDelta), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTitle), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUrl), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeekStarType), 3)
	if err != nil {
		return err
	}
	return err
}

type SetWeekStarPropsReq struct {
	tUserId       UserId
	vPropsId      []int64
	iWeekStarType int32
}

func (self *SetWeekStarPropsReq) ResetDefault() {
}

func (self *SetWeekStarPropsReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vPropsId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iWeekStarType))
	if err != nil {
		return err
	}
	return err
}

func (self *SetWeekStarPropsReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPropsId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeekStarType), 2)
	if err != nil {
		return err
	}
	return err
}

type ResultRsp struct {
	iResult int32
}

func (self *ResultRsp) ResetDefault() {
}

func (self *ResultRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iResult))
	if err != nil {
		return err
	}
	return err
}

func (self *ResultRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iResult), 0)
	if err != nil {
		return err
	}
	return err
}

type LastNWeekTop1InfoReq struct {
	tUserId       UserId
	iWeekNum      int32
	iWeekStarType int32
}

func (self *LastNWeekTop1InfoReq) ResetDefault() {
}

func (self *LastNWeekTop1InfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iWeekNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iWeekStarType))
	if err != nil {
		return err
	}
	return err
}

func (self *LastNWeekTop1InfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeekNum), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeekStarType), 2)
	if err != nil {
		return err
	}
	return err
}

type LastNWeekTop1InfoRsp struct {
	vWeekStarProps []WeekStarProps
}

func (self *LastNWeekTop1InfoRsp) ResetDefault() {
}

func (self *LastNWeekTop1InfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vWeekStarProps))
	if err != nil {
		return err
	}
	return err
}

func (self *LastNWeekTop1InfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vWeekStarProps), 0)
	if err != nil {
		return err
	}
	return err
}

type PropsGivenNoticeReq struct {
	lUId         int64
	lPropsId     int64
	iPropsType   int32
	iPropsNum    int32
	lPresenterId int64
}

func (self *PropsGivenNoticeReq) ResetDefault() {
}

func (self *PropsGivenNoticeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPropsId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPropsType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPropsNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPresenterId))
	if err != nil {
		return err
	}
	return err
}

func (self *PropsGivenNoticeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPropsId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropsType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropsNum), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterId), 4)
	if err != nil {
		return err
	}
	return err
}

type DeliverMsgReq struct {
	protoType    int32
	deliverType  int32
	bTransparent bool
	lUid         int64
	lTid         int64
	lSid         int64
	iGroupType   int32
	iGroupId     int32
	iUri         int32
	sMsg         string
}

func (self *DeliverMsgReq) ResetDefault() {
}

func (self *DeliverMsgReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.protoType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.deliverType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.bTransparent))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iGroupType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iGroupId))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iUri))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *DeliverMsgReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.protoType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.deliverType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bTransparent), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGroupType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGroupId), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUri), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 9)
	if err != nil {
		return err
	}
	return err
}

type DeliverMsgRsp struct {
	iCode int32
}

func (self *DeliverMsgRsp) ResetDefault() {
}

func (self *DeliverMsgRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *DeliverMsgRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type CardInfo struct {
	iCardType        int32
	sCardName        string
	iCardPublicTime  int32
	iCardExpiredTime int32
	iItemType        int32
	lItemCount       int64
	iCardExpiredType int32
	iDivideType      int32
}

func (self *CardInfo) ResetDefault() {
}

func (self *CardInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCardType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sCardName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCardPublicTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iCardExpiredTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lItemCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iCardExpiredType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iDivideType))
	if err != nil {
		return err
	}
	return err
}

func (self *CardInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCardType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCardName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCardPublicTime), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCardExpiredTime), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lItemCount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCardExpiredType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDivideType), 7)
	if err != nil {
		return err
	}
	return err
}

type PackageItemInfo struct {
	iItemType   int32
	sCardName   string
	iCardType   int32
	lExpireTime int32
	iIsPay      int32
	lItemCount  int64
}

func (self *PackageItemInfo) ResetDefault() {
}

func (self *PackageItemInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sCardName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCardType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lExpireTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iIsPay))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lItemCount))
	if err != nil {
		return err
	}
	return err
}

func (self *PackageItemInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iItemType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCardName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCardType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExpireTime), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsPay), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lItemCount), 5)
	if err != nil {
		return err
	}
	return err
}

type StorageInfo struct {
	lUid      int64
	sIdCard   string
	sPassword string
	iRetainx  int32
	iRetainy  int32
}

func (self *StorageInfo) ResetDefault() {
}

func (self *StorageInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sIdCard))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sPassword))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iRetainx))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iRetainy))
	if err != nil {
		return err
	}
	return err
}

func (self *StorageInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIdCard), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPassword), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRetainx), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRetainy), 4)
	if err != nil {
		return err
	}
	return err
}

type ItemCount struct {
	iItemType  int32
	lItemCount int64
}

func (self *ItemCount) ResetDefault() {
}

func (self *ItemCount) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lItemCount))
	if err != nil {
		return err
	}
	return err
}

func (self *ItemCount) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iItemType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lItemCount), 1)
	if err != nil {
		return err
	}
	return err
}

type CardItemCount struct {
	iItemType  int32
	iCardType  int32
	lItemCount int64
}

func (self *CardItemCount) ResetDefault() {
}

func (self *CardItemCount) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCardType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lItemCount))
	if err != nil {
		return err
	}
	return err
}

func (self *CardItemCount) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iItemType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCardType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lItemCount), 2)
	if err != nil {
		return err
	}
	return err
}

type UserPackageItemInfo struct {
	lUid        int64
	iItemType   int32
	sCardName   string
	iCardType   int32
	lExpireTime int32
	iIsPay      int32
	lItemCount  int64
}

func (self *UserPackageItemInfo) ResetDefault() {
}

func (self *UserPackageItemInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sCardName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iCardType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lExpireTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iIsPay))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lItemCount))
	if err != nil {
		return err
	}
	return err
}

func (self *UserPackageItemInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCardName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCardType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExpireTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsPay), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lItemCount), 6)
	if err != nil {
		return err
	}
	return err
}

type QueryCardPackageReq struct {
	tUserId      UserId
	vUids        []int64
	vItemTypes   []int32
	vCardTypes   []int32
	lExpiredTime int64
	iIsStorage   int32
}

func (self *QueryCardPackageReq) ResetDefault() {
}

func (self *QueryCardPackageReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vItemTypes))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vCardTypes))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lExpiredTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iIsStorage))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryCardPackageReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vItemTypes), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vCardTypes), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExpiredTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsStorage), 5)
	if err != nil {
		return err
	}
	return err
}

type QueryCardPackageRsp struct {
	vItemsInUsers []UserPackageItemInfo
}

func (self *QueryCardPackageRsp) ResetDefault() {
}

func (self *QueryCardPackageRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vItemsInUsers))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryCardPackageRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vItemsInUsers), 0)
	if err != nil {
		return err
	}
	return err
}

type QueryCardInfoListReq struct {
	tUserId    UserId
	vCardTypes []int32
}

func (self *QueryCardInfoListReq) ResetDefault() {
}

func (self *QueryCardInfoListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vCardTypes))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryCardInfoListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vCardTypes), 1)
	if err != nil {
		return err
	}
	return err
}

type QueryCardInfoListRsp struct {
	vCardInfoList []CardInfo
}

func (self *QueryCardInfoListRsp) ResetDefault() {
}

func (self *QueryCardInfoListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vCardInfoList))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryCardInfoListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vCardInfoList), 0)
	if err != nil {
		return err
	}
	return err
}

type QueryStoragePWDReq struct {
	tUserId UserId
	vUids   []int64
}

func (self *QueryStoragePWDReq) ResetDefault() {
}

func (self *QueryStoragePWDReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryStoragePWDReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	return err
}

type QueryStoragePWDRsp struct {
	vPWDs []StorageInfo
}

func (self *QueryStoragePWDRsp) ResetDefault() {
}

func (self *QueryStoragePWDRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vPWDs))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryStoragePWDRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPWDs), 0)
	if err != nil {
		return err
	}
	return err
}

type UseItemsReq struct {
	tUserId   UserId
	lUid      int64
	vItems    []ItemCount
	iUseType1 int32
	iUseType2 int32
	sOrderId  string
}

func (self *UseItemsReq) ResetDefault() {
}

func (self *UseItemsReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vItems))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iUseType1))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iUseType2))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	return err
}

func (self *UseItemsReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vItems), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseType1), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseType2), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOrderId), 5)
	if err != nil {
		return err
	}
	return err
}

type UseItemsRsp struct {
	vItemLeft       []ItemCount
	vDivideItemUsed []CardItemCount
}

func (self *UseItemsRsp) ResetDefault() {
}

func (self *UseItemsRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vItemLeft))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vDivideItemUsed))
	if err != nil {
		return err
	}
	return err
}

func (self *UseItemsRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vItemLeft), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vDivideItemUsed), 1)
	if err != nil {
		return err
	}
	return err
}

type TranslateItemReq struct {
	tUserId        UserId
	vUids          []int64
	iFromItemType  int32
	lFromItemCount int64
	iToItemType    int32
	lToItemCount   int64
	iUseType1      int32
	iUseType2      int32
	sOrderId       string
}

func (self *TranslateItemReq) ResetDefault() {
}

func (self *TranslateItemReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iFromItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lFromItemCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iToItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lToItemCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iUseType1))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iUseType2))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	return err
}

func (self *TranslateItemReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFromItemType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lFromItemCount), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iToItemType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lToItemCount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseType1), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseType2), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOrderId), 8)
	if err != nil {
		return err
	}
	return err
}

type TranslateItemRsp struct {
	vSuccessUids []int64
}

func (self *TranslateItemRsp) ResetDefault() {
}

func (self *TranslateItemRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vSuccessUids))
	if err != nil {
		return err
	}
	return err
}

func (self *TranslateItemRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vSuccessUids), 0)
	if err != nil {
		return err
	}
	return err
}

type OperateUserStoragePWDReq struct {
	tUserId   UserId
	lUid      int64
	sIdCard   string
	sPassword string
}

func (self *OperateUserStoragePWDReq) ResetDefault() {
}

func (self *OperateUserStoragePWDReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sIdCard))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sPassword))
	if err != nil {
		return err
	}
	return err
}

func (self *OperateUserStoragePWDReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIdCard), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPassword), 3)
	if err != nil {
		return err
	}
	return err
}

type ItemsInOutStorageReq struct {
	tUserId   UserId
	lUid      int64
	vItems    []ItemCount
	iOptype   int32
	iUseType1 int32
	iUseType2 int32
	sOrderId  string
}

func (self *ItemsInOutStorageReq) ResetDefault() {
}

func (self *ItemsInOutStorageReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vItems))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iOptype))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iUseType1))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iUseType2))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	return err
}

func (self *ItemsInOutStorageReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vItems), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOptype), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseType1), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseType2), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOrderId), 6)
	if err != nil {
		return err
	}
	return err
}

type DepositInOutOfficialReq struct {
	tUserId     UserId
	lUid        int64
	iOfficialId int32
	iItemType   int32
	lItemCount  int64
	iOptype     int32
	iUseType1   int32
	iUseType2   int32
	sOrderId    string
}

func (self *DepositInOutOfficialReq) ResetDefault() {
}

func (self *DepositInOutOfficialReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iOfficialId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lItemCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iOptype))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iUseType1))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iUseType2))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	return err
}

func (self *DepositInOutOfficialReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOfficialId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lItemCount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOptype), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseType1), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseType2), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOrderId), 8)
	if err != nil {
		return err
	}
	return err
}

type DepositInOutOfficialRsp struct {
	vItemLeft []ItemCount
}

func (self *DepositInOutOfficialRsp) ResetDefault() {
}

func (self *DepositInOutOfficialRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vItemLeft))
	if err != nil {
		return err
	}
	return err
}

func (self *DepositInOutOfficialRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vItemLeft), 0)
	if err != nil {
		return err
	}
	return err
}

type ReleaseCardReq struct {
	tUserId    UserId
	vCardInfos []CardInfo
}

func (self *ReleaseCardReq) ResetDefault() {
}

func (self *ReleaseCardReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vCardInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *ReleaseCardReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vCardInfos), 1)
	if err != nil {
		return err
	}
	return err
}

type ReleaseCardRsp struct {
	vCardtypes []int32
}

func (self *ReleaseCardRsp) ResetDefault() {
}

func (self *ReleaseCardRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vCardtypes))
	if err != nil {
		return err
	}
	return err
}

func (self *ReleaseCardRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vCardtypes), 0)
	if err != nil {
		return err
	}
	return err
}

type RechargeUserCardPackageReq struct {
	tUserId    UserId
	vUids      []int64
	vCardtypes []int32
	vItemInfos []PackageItemInfo
	iUseType1  int32
	iUseType2  int32
	sOrderId   string
}

func (self *RechargeUserCardPackageReq) ResetDefault() {
}

func (self *RechargeUserCardPackageReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vCardtypes))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vItemInfos))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iUseType1))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iUseType2))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	return err
}

func (self *RechargeUserCardPackageReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vCardtypes), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vItemInfos), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseType1), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseType2), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOrderId), 6)
	if err != nil {
		return err
	}
	return err
}

type RechargeUserCardPackageRsp struct {
	vSuccessUids []int64
}

func (self *RechargeUserCardPackageRsp) ResetDefault() {
}

func (self *RechargeUserCardPackageRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vSuccessUids))
	if err != nil {
		return err
	}
	return err
}

func (self *RechargeUserCardPackageRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vSuccessUids), 0)
	if err != nil {
		return err
	}
	return err
}

type DelUserExpiredItemReq struct {
	tUserId  UserId
	vUids    []int64
	sOrderId string
}

func (self *DelUserExpiredItemReq) ResetDefault() {
}

func (self *DelUserExpiredItemReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sOrderId))
	if err != nil {
		return err
	}
	return err
}

func (self *DelUserExpiredItemReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOrderId), 2)
	if err != nil {
		return err
	}
	return err
}

type DelUserExpiredItemRsp struct {
	vSuccessUids []int64
}

func (self *DelUserExpiredItemRsp) ResetDefault() {
}

func (self *DelUserExpiredItemRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vSuccessUids))
	if err != nil {
		return err
	}
	return err
}

func (self *DelUserExpiredItemRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vSuccessUids), 0)
	if err != nil {
		return err
	}
	return err
}

type GetUserGoldTicketReq struct {
	tId UserId
}

func (self *GetUserGoldTicketReq) ResetDefault() {
}

func (self *GetUserGoldTicketReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserGoldTicketReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetUserGoldTicketRsp struct {
	vItemList []PackageItemInfo
}

func (self *GetUserGoldTicketRsp) ResetDefault() {
}

func (self *GetUserGoldTicketRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vItemList))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserGoldTicketRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vItemList), 0)
	if err != nil {
		return err
	}
	return err
}

type PopupPresenterInfo struct {
	lUid int64
	lAid int64
}

func (self *PopupPresenterInfo) ResetDefault() {
}

func (self *PopupPresenterInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lAid))
	if err != nil {
		return err
	}
	return err
}

func (self *PopupPresenterInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAid), 1)
	if err != nil {
		return err
	}
	return err
}

type PopupPushReq struct {
	tId             UserId
	vPresenterInfos []PopupPresenterInfo
	lChannelId      int64
	lSubChannelId   int64
	lShortChannelId int64
	sGameName       string
	sName           string
	sPost           string
	iSoucreType     int32
	iPushType       int32
	iPhoneType      int32
	lLiveId         int64
	iFull           int32
	sAlert          string
	sAction         string
	lExpire         int64
	sLiveDesc       string
	bBeginLivePush  bool
}

func (self *PopupPushReq) ResetDefault() {
}

func (self *PopupPushReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vPresenterInfos))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lShortChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sPost))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iSoucreType))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iPushType))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iPhoneType))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iFull))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.sAlert))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.sAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.lExpire))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.sLiveDesc))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.bBeginLivePush))
	if err != nil {
		return err
	}
	return err
}

func (self *PopupPushReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterInfos), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lShortChannelId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPost), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSoucreType), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPushType), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPhoneType), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFull), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAlert), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAction), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExpire), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveDesc), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bBeginLivePush), 17)
	if err != nil {
		return err
	}
	return err
}

type PopupPushResp struct {
	iResult int32
}

func (self *PopupPushResp) ResetDefault() {
}

func (self *PopupPushResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iResult))
	if err != nil {
		return err
	}
	return err
}

func (self *PopupPushResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iResult), 0)
	if err != nil {
		return err
	}
	return err
}

type PopupResultReq struct {
	tId UserId
	iN  int32
}

func (self *PopupResultReq) ResetDefault() {
}

func (self *PopupResultReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iN))
	if err != nil {
		return err
	}
	return err
}

func (self *PopupResultReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iN), 1)
	if err != nil {
		return err
	}
	return err
}

type PopupResult struct {
	lUid      int64
	iTimeFrom int32
	iTimeTo   int32
	lMsgId    int64
	lResultId int64
}

func (self *PopupResult) ResetDefault() {
}

func (self *PopupResult) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTimeFrom))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTimeTo))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lMsgId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lResultId))
	if err != nil {
		return err
	}
	return err
}

func (self *PopupResult) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTimeFrom), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTimeTo), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lMsgId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lResultId), 4)
	if err != nil {
		return err
	}
	return err
}

type PopupResultRsp struct {
	vResults [][]PopupResult
}

func (self *PopupResultRsp) ResetDefault() {
}

func (self *PopupResultRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vResults))
	if err != nil {
		return err
	}
	return err
}

func (self *PopupResultRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vResults), 0)
	if err != nil {
		return err
	}
	return err
}

type TransMsg struct {
	sBuffer string
	iType   int32
}

func (self *TransMsg) ResetDefault() {
}

func (self *TransMsg) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sBuffer))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iType))
	if err != nil {
		return err
	}
	return err
}

func (self *TransMsg) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sBuffer), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 1)
	if err != nil {
		return err
	}
	return err
}

type TransMsgToViewerReq struct {
	tId           UserId
	tTransMsg     TransMsg
	lChannelId    int64
	lSubchannelId int64
}

func (self *TransMsgToViewerReq) ResetDefault() {
}

func (self *TransMsgToViewerReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTransMsg))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	return err
}

func (self *TransMsgToViewerReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTransMsg), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 3)
	if err != nil {
		return err
	}
	return err
}

type TransMsgToViewerRsp struct {
	sMessage string
}

func (self *TransMsgToViewerRsp) ResetDefault() {
}

func (self *TransMsgToViewerRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *TransMsgToViewerRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sMessage), 0)
	if err != nil {
		return err
	}
	return err
}

type LMPresenterInfo struct {
	lUid           int64
	lChannelId     int64
	lSubChannelId  int64
	sNick          string
	sAvatarUrl     string
	iActivityCount int32
	iLevel         int32
}

func (self *LMPresenterInfo) ResetDefault() {
}

func (self *LMPresenterInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iActivityCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *LMPresenterInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActivityCount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 6)
	if err != nil {
		return err
	}
	return err
}

type LMSessionInfo struct {
	lSessionId int64
	uOwnerUid  int64
	iState     int32
	iCount     int32
	vLMInfos   []LMPresenterInfo
	uStartTime int64
	uEndTime   int64
}

func (self *LMSessionInfo) ResetDefault() {
}

func (self *LMSessionInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.uOwnerUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iState))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vLMInfos))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.uStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.uEndTime))
	if err != nil {
		return err
	}
	return err
}

func (self *LMSessionInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lSessionId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.uOwnerUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iState), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vLMInfos), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.uStartTime), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.uEndTime), 6)
	if err != nil {
		return err
	}
	return err
}

type LMSessionInfoHandlReq struct {
	lUid         int64
	iHandle      int32
	tSessionInfo LMSessionInfo
}

func (self *LMSessionInfoHandlReq) ResetDefault() {
}

func (self *LMSessionInfoHandlReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iHandle))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tSessionInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *LMSessionInfoHandlReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHandle), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tSessionInfo), 2)
	if err != nil {
		return err
	}
	return err
}

type LMPresenterInfos struct {
	vLMInfos []LMPresenterInfo
}

func (self *LMPresenterInfos) ResetDefault() {
}

func (self *LMPresenterInfos) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vLMInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *LMPresenterInfos) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vLMInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type LinkMicSetting struct {
	lUid       int64
	bAllowed   bool
	bWhiteList bool
	iLevel     int32
	mWhiteList map[int64]int64
}

func (self *LinkMicSetting) ResetDefault() {
}

func (self *LinkMicSetting) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.bAllowed))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.bWhiteList))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.mWhiteList))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicSetting) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bAllowed), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bWhiteList), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mWhiteList), 4)
	if err != nil {
		return err
	}
	return err
}

type LinkMicSettingReq struct {
	tId          UserId
	iSettingType int32
	tSetting     LinkMicSetting
}

func (self *LinkMicSettingReq) ResetDefault() {
}

func (self *LinkMicSettingReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iSettingType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tSetting))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicSettingReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSettingType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tSetting), 2)
	if err != nil {
		return err
	}
	return err
}

type LinkMicSettingResp struct {
	iSettingType int32
	lUid         int64
	tSetting     LinkMicSetting
}

func (self *LinkMicSettingResp) ResetDefault() {
}

func (self *LinkMicSettingResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSettingType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.tSetting))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicSettingResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSettingType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tSetting), 3)
	if err != nil {
		return err
	}
	return err
}

type LinkMicCreateSessionReq struct {
	tId     UserId
	tLMInfo LMPresenterInfo
}

func (self *LinkMicCreateSessionReq) ResetDefault() {
}

func (self *LinkMicCreateSessionReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tLMInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicCreateSessionReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tLMInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type LinkMicCreateSessionResp struct {
	lLMSessionId int64
	lOwnerUid    int64
}

func (self *LinkMicCreateSessionResp) ResetDefault() {
}

func (self *LinkMicCreateSessionResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lLMSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lOwnerUid))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicCreateSessionResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lLMSessionId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lOwnerUid), 1)
	if err != nil {
		return err
	}
	return err
}

type LinkMicEndSessionReq struct {
	tId          UserId
	lLMSessionId int64
}

func (self *LinkMicEndSessionReq) ResetDefault() {
}

func (self *LinkMicEndSessionReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLMSessionId))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicEndSessionReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLMSessionId), 1)
	if err != nil {
		return err
	}
	return err
}

type LinkMicEndSessionResp struct {
	lLMSessionId int64
	lOwnerUid    int64
}

func (self *LinkMicEndSessionResp) ResetDefault() {
}

func (self *LinkMicEndSessionResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.lLMSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lOwnerUid))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicEndSessionResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lLMSessionId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lOwnerUid), 2)
	if err != nil {
		return err
	}
	return err
}

type LinkMicRemovePresenterReq struct {
	tId          UserId
	lLMSessionId int64
	lRemovedUid  int64
}

func (self *LinkMicRemovePresenterReq) ResetDefault() {
}

func (self *LinkMicRemovePresenterReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLMSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lRemovedUid))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicRemovePresenterReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLMSessionId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lRemovedUid), 2)
	if err != nil {
		return err
	}
	return err
}

type LinkMicRemovePresenterResp struct {
	lLMSessionId int64
	lRemoveUid   int64
	lRemovedUid  int64
}

func (self *LinkMicRemovePresenterResp) ResetDefault() {
}

func (self *LinkMicRemovePresenterResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.lLMSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lRemoveUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lRemovedUid))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicRemovePresenterResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lLMSessionId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lRemoveUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lRemovedUid), 3)
	if err != nil {
		return err
	}
	return err
}

type LinkMicYYInfoReq struct {
	tId   UserId
	lYYId int64
}

func (self *LinkMicYYInfoReq) ResetDefault() {
}

func (self *LinkMicYYInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lYYId))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicYYInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 1)
	if err != nil {
		return err
	}
	return err
}

type LinkMicYYInfoResp struct {
	lYYId          int64
	lUid           int64
	sNick          string
	sAvatarUrl     string
	iActivityCount int32
}

func (self *LinkMicYYInfoResp) ResetDefault() {
}

func (self *LinkMicYYInfoResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lYYId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iActivityCount))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicYYInfoResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lYYId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActivityCount), 4)
	if err != nil {
		return err
	}
	return err
}

type LinkMicInviteReq struct {
	tId                  UserId
	lLMSessionId         int64
	lInvitedUid          int64
	vOtherInvitedInfos   []LMPresenterInfo
	tInvitePresenterInfo LMPresenterInfo
	iVersion             int32
	bPK                  bool
}

func (self *LinkMicInviteReq) ResetDefault() {
}

func (self *LinkMicInviteReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLMSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lInvitedUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vOtherInvitedInfos))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.tInvitePresenterInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iVersion))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.bPK))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicInviteReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLMSessionId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lInvitedUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vOtherInvitedInfos), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInvitePresenterInfo), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVersion), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bPK), 8)
	if err != nil {
		return err
	}
	return err
}

type LinkMicInviteResp struct {
	tId              UserId
	lLMSessionId     int64
	lInviteUid       int64
	lInvitedUid      int64
	tInvitedInfo     LMPresenterInfo
	iRespCodeFromCli int32
	bPK              bool
}

func (self *LinkMicInviteResp) ResetDefault() {
}

func (self *LinkMicInviteResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lLMSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lInviteUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lInvitedUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.tInvitedInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iRespCodeFromCli))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.bPK))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicInviteResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLMSessionId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lInviteUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lInvitedUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInvitedInfo), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRespCodeFromCli), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bPK), 7)
	if err != nil {
		return err
	}
	return err
}

type LinkMicInvitedHistory struct {
	lUid               int64
	iTime              int64
	tInviteInfos       LMPresenterInfo
	iInvitedState      int32
	vOtherInvitedInfos []LMPresenterInfo
}

func (self *LinkMicInvitedHistory) ResetDefault() {
}

func (self *LinkMicInvitedHistory) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tInviteInfos))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iInvitedState))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vOtherInvitedInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicInvitedHistory) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTime), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInviteInfos), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iInvitedState), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vOtherInvitedInfos), 4)
	if err != nil {
		return err
	}
	return err
}

type LinkMicInvitedHistoryHandleReq struct {
	tId             UserId
	iReqType        int32
	tInvitedHistory LinkMicInvitedHistory
}

func (self *LinkMicInvitedHistoryHandleReq) ResetDefault() {
}

func (self *LinkMicInvitedHistoryHandleReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iReqType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tInvitedHistory))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicInvitedHistoryHandleReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iReqType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInvitedHistory), 2)
	if err != nil {
		return err
	}
	return err
}

type LinkMicInvitedHistoryHandleResp struct {
	lUid             int64
	iReqType         int32
	vInvitedHistorys []LinkMicInvitedHistory
}

func (self *LinkMicInvitedHistoryHandleResp) ResetDefault() {
}

func (self *LinkMicInvitedHistoryHandleResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iReqType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vInvitedHistorys))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicInvitedHistoryHandleResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iReqType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vInvitedHistorys), 3)
	if err != nil {
		return err
	}
	return err
}

type LinkMicStartReq struct {
	tId          UserId
	lLMSessionId int64
}

func (self *LinkMicStartReq) ResetDefault() {
}

func (self *LinkMicStartReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLMSessionId))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicStartReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLMSessionId), 1)
	if err != nil {
		return err
	}
	return err
}

type LinkMicStartResp struct {
	lLMSessionId int64
	lUid         int64
}

func (self *LinkMicStartResp) ResetDefault() {
}

func (self *LinkMicStartResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.lLMSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicStartResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lLMSessionId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 2)
	if err != nil {
		return err
	}
	return err
}

type LinkMicUserReq struct {
	tId           UserId
	lUid          int64
	lChannelId    int64
	lSubChannelId int64
}

func (self *LinkMicUserReq) ResetDefault() {
}

func (self *LinkMicUserReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicUserReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 3)
	if err != nil {
		return err
	}
	return err
}

type LinkMicStatusChangeNotice struct {
	lLMSessionId      int64
	iLinkMicStatus    int32
	lOwnerUid         int64
	vLMPresenterInfos []LMPresenterInfo
}

func (self *LinkMicStatusChangeNotice) ResetDefault() {
}

func (self *LinkMicStatusChangeNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lLMSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iLinkMicStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lOwnerUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vLMPresenterInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *LinkMicStatusChangeNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lLMSessionId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLinkMicStatus), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lOwnerUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vLMPresenterInfos), 3)
	if err != nil {
		return err
	}
	return err
}

type BlackWordInfo struct {
	lUid        int64
	vBlackWords []string
}

func (self *BlackWordInfo) ResetDefault() {
}

func (self *BlackWordInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vBlackWords))
	if err != nil {
		return err
	}
	return err
}

func (self *BlackWordInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vBlackWords), 1)
	if err != nil {
		return err
	}
	return err
}

type UploadBlackWordReq struct {
	tId            UserId
	tBlackWordInfo BlackWordInfo
}

func (self *UploadBlackWordReq) ResetDefault() {
}

func (self *UploadBlackWordReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tBlackWordInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *UploadBlackWordReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tBlackWordInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type DownloadBlackWordReq struct {
	tId UserId
}

func (self *DownloadBlackWordReq) ResetDefault() {
}

func (self *DownloadBlackWordReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *DownloadBlackWordReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type DownloadBlackWordResp struct {
	tBlackWordInfo BlackWordInfo
}

func (self *DownloadBlackWordResp) ResetDefault() {
}

func (self *DownloadBlackWordResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tBlackWordInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *DownloadBlackWordResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tBlackWordInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GetGreenBarrageReq struct {
	tId UserId
}

func (self *GetGreenBarrageReq) ResetDefault() {
}

func (self *GetGreenBarrageReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGreenBarrageReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetGreenBarrageResp struct {
	iResult int32
	iRemain int32
}

func (self *GetGreenBarrageResp) ResetDefault() {
}

func (self *GetGreenBarrageResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iResult))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iRemain))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGreenBarrageResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iResult), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRemain), 1)
	if err != nil {
		return err
	}
	return err
}

type GetCfgChatInfoReq struct {
	tId        UserId
	lChannelId int64
}

func (self *GetCfgChatInfoReq) ResetDefault() {
}

func (self *GetCfgChatInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetCfgChatInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetCfgChatInfoRsp struct {
	iRspCode   int32
	lChannelId int64
	vMsg       []string
}

func (self *GetCfgChatInfoRsp) ResetDefault() {
}

func (self *GetCfgChatInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *GetCfgChatInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRspCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vMsg), 2)
	if err != nil {
		return err
	}
	return err
}

type CfgChatNotice struct {
	vMsg []string
}

func (self *CfgChatNotice) ResetDefault() {
}

func (self *CfgChatNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *CfgChatNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vMsg), 0)
	if err != nil {
		return err
	}
	return err
}

type CfgChatInfo struct {
	vMsg       []string
	iStartTime int32
	iStopTime  int32
	iUseFlag   int32
}

func (self *CfgChatInfo) ResetDefault() {
}

func (self *CfgChatInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vMsg))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iStopTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iUseFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *CfgChatInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vMsg), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStartTime), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStopTime), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseFlag), 3)
	if err != nil {
		return err
	}
	return err
}

type CfgChatInfoList struct {
	vChannelId   []int64
	tCfgChatInfo CfgChatInfo
}

func (self *CfgChatInfoList) ResetDefault() {
}

func (self *CfgChatInfoList) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tCfgChatInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *CfgChatInfoList) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tCfgChatInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type SetCfgChatInfoReq struct {
	tId              UserId
	tCfgChatInfoList CfgChatInfoList
	iBroadcastFlag   int32
}

func (self *SetCfgChatInfoReq) ResetDefault() {
}

func (self *SetCfgChatInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tCfgChatInfoList))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBroadcastFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *SetCfgChatInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tCfgChatInfoList), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBroadcastFlag), 2)
	if err != nil {
		return err
	}
	return err
}

type SetCfgChatInfoRsp struct {
	iRspCode int32
}

func (self *SetCfgChatInfoRsp) ResetDefault() {
}

func (self *SetCfgChatInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	return err
}

func (self *SetCfgChatInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRspCode), 0)
	if err != nil {
		return err
	}
	return err
}

type LiveAdorderReq struct {
	tId    UserId
	topSid int64
	subSid int64
}

func (self *LiveAdorderReq) ResetDefault() {
}

func (self *LiveAdorderReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.topSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.subSid))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAdorderReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.topSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.subSid), 2)
	if err != nil {
		return err
	}
	return err
}

type LiveAdorderRsp struct {
	uid       int64
	uDuration int64
	status    int64
	adid      string
	code      string
	width     int64
	heigth    int64
	fodder    string
	url       string
	ad_key    string
	sign      string
}

func (self *LiveAdorderRsp) ResetDefault() {
}

func (self *LiveAdorderRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.uid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.uDuration))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.status))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.adid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.code))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.width))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.heigth))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.fodder))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.url))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.ad_key))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sign))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAdorderRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.uid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.uDuration), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.status), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.adid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.code), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.width), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.heigth), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.fodder), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.url), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.ad_key), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sign), 10)
	if err != nil {
		return err
	}
	return err
}

type LiveHandshakeReq struct {
	tId UserId
}

func (self *LiveHandshakeReq) ResetDefault() {
}

func (self *LiveHandshakeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveHandshakeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type LiveHandshakeRsp struct {
	tNow int32
}

func (self *LiveHandshakeRsp) ResetDefault() {
}

func (self *LiveHandshakeRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tNow))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveHandshakeRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tNow), 0)
	if err != nil {
		return err
	}
	return err
}

type ActivityBroadcastReq struct {
	lUri     int64
	sMsg     string
	iDisable int32
}

func (self *ActivityBroadcastReq) ResetDefault() {
}

func (self *ActivityBroadcastReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.lUri))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sMsg))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iDisable))
	if err != nil {
		return err
	}
	return err
}

func (self *ActivityBroadcastReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUri), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDisable), 3)
	if err != nil {
		return err
	}
	return err
}

type ActivityBroadcastNotice struct {
	lUri int64
	sMsg string
}

func (self *ActivityBroadcastNotice) ResetDefault() {
}

func (self *ActivityBroadcastNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.lUri))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *ActivityBroadcastNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUri), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 2)
	if err != nil {
		return err
	}
	return err
}

type ChatMessageRecord struct {
	lUid        int64
	iRole       int32
	sNick       string
	sChat       string
	iSendTime   int32
	sBadgeName  string
	iBadgeLevel int32
}

func (self *ChatMessageRecord) ResetDefault() {
}

func (self *ChatMessageRecord) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iRole))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sChat))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iSendTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sBadgeName))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iBadgeLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *ChatMessageRecord) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRole), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sChat), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSendTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBadgeName), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBadgeLevel), 6)
	if err != nil {
		return err
	}
	return err
}

type GetChatMessageReq struct {
	tId  UserId
	lTid int64
	lSid int64
}

func (self *GetChatMessageReq) ResetDefault() {
}

func (self *GetChatMessageReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetChatMessageReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	return err
}

type GetChatMessageResp struct {
	vMsg []ChatMessageRecord
}

func (self *GetChatMessageResp) ResetDefault() {
}

func (self *GetChatMessageResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *GetChatMessageResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vMsg), 0)
	if err != nil {
		return err
	}
	return err
}

type DarwRaffleReq struct {
	tUserId     UserId
	lTid        int64
	lSid        int64
	iPrizeId    int32
	iCount      int32
	sRaffleName string
	sBdoc       string
	sUdoc       string
	iEventId    int32
	sUrl        string
	sIcon       string
}

func (self *DarwRaffleReq) ResetDefault() {
}

func (self *DarwRaffleReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPrizeId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sRaffleName))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sBdoc))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sUdoc))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iEventId))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sIcon))
	if err != nil {
		return err
	}
	return err
}

func (self *DarwRaffleReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPrizeId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sRaffleName), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBdoc), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUdoc), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEventId), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUrl), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIcon), 10)
	if err != nil {
		return err
	}
	return err
}

type DarwRaffleRsp struct {
	vUids         []int64
	lAllUserCount int64
	iCount        int32
}

func (self *DarwRaffleRsp) ResetDefault() {
}

func (self *DarwRaffleRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lAllUserCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCount))
	if err != nil {
		return err
	}
	return err
}

func (self *DarwRaffleRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vUids), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAllUserCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 2)
	if err != nil {
		return err
	}
	return err
}

type BeanTypeNum struct {
	iBeanType int32
	lBeanNum  int64
}

func (self *BeanTypeNum) ResetDefault() {
}

func (self *BeanTypeNum) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lBeanNum))
	if err != nil {
		return err
	}
	return err
}

func (self *BeanTypeNum) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iBeanType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBeanNum), 1)
	if err != nil {
		return err
	}
	return err
}

type MatchInfo struct {
	iMId         int32
	sName        string
	istate       int32
	iBuyerNum    int32
	vBeanTypeNum []BeanTypeNum
}

func (self *MatchInfo) ResetDefault() {
}

func (self *MatchInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iMId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.istate))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBuyerNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vBeanTypeNum))
	if err != nil {
		return err
	}
	return err
}

func (self *MatchInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iMId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.istate), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBuyerNum), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vBeanTypeNum), 4)
	if err != nil {
		return err
	}
	return err
}

type MatchInfoEx struct {
	iMId         int32
	sName        string
	sMPictrue    string
	istate       int32
	iBuyerNum    int32
	vBeanTypeNum []BeanTypeNum
}

func (self *MatchInfoEx) ResetDefault() {
}

func (self *MatchInfoEx) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iMId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sMPictrue))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.istate))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iBuyerNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vBeanTypeNum))
	if err != nil {
		return err
	}
	return err
}

func (self *MatchInfoEx) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iMId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMPictrue), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.istate), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBuyerNum), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vBeanTypeNum), 5)
	if err != nil {
		return err
	}
	return err
}

type AddMatchReq struct {
	tId   UserId
	tInfo MatchInfo
}

func (self *AddMatchReq) ResetDefault() {
}

func (self *AddMatchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *AddMatchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type AddMatchRsp struct {
	iMId int32
}

func (self *AddMatchRsp) ResetDefault() {
}

func (self *AddMatchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *AddMatchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iMId), 0)
	if err != nil {
		return err
	}
	return err
}

type UpdateMatchReq struct {
	tId   UserId
	tInfo MatchInfo
}

func (self *UpdateMatchReq) ResetDefault() {
}

func (self *UpdateMatchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateMatchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdateMatchRsp struct {
	iMId int32
}

func (self *UpdateMatchRsp) ResetDefault() {
}

func (self *UpdateMatchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateMatchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iMId), 0)
	if err != nil {
		return err
	}
	return err
}

type LineMatchReq struct {
	tId  UserId
	iOp  int32
	iMId int32
}

func (self *LineMatchReq) ResetDefault() {
}

func (self *LineMatchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iOp))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *LineMatchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOp), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 2)
	if err != nil {
		return err
	}
	return err
}

type LineMatchRsp struct {
	iMId int32
}

func (self *LineMatchRsp) ResetDefault() {
}

func (self *LineMatchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *LineMatchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iMId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMatchListReq struct {
	tId UserId
}

func (self *GetMatchListReq) ResetDefault() {
}

func (self *GetMatchListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMatchListRsp struct {
	vMatchInfos []MatchInfo
}

func (self *GetMatchListRsp) ResetDefault() {
}

func (self *GetMatchListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vMatchInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vMatchInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMatchInfoReq struct {
	tId  UserId
	iMId int32
}

func (self *GetMatchInfoReq) ResetDefault() {
}

func (self *GetMatchInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchInfoRsp struct {
	tMatchInfo MatchInfo
}

func (self *GetMatchInfoRsp) ResetDefault() {
}

func (self *GetMatchInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tMatchInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tMatchInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GetRunningMatchReq struct {
	tId UserId
}

func (self *GetRunningMatchReq) ResetDefault() {
}

func (self *GetRunningMatchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRunningMatchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetRunningMatchRsp struct {
	tMatchInfo MatchInfo
	iCode      int32
}

func (self *GetRunningMatchRsp) ResetDefault() {
}

func (self *GetRunningMatchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tMatchInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRunningMatchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tMatchInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCode), 1)
	if err != nil {
		return err
	}
	return err
}

type GetRunningMatchExReq struct {
	tId UserId
}

func (self *GetRunningMatchExReq) ResetDefault() {
}

func (self *GetRunningMatchExReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRunningMatchExReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetRunningMatchExRsp struct {
	tMatchInfo MatchInfoEx
	iCode      int32
}

func (self *GetRunningMatchExRsp) ResetDefault() {
}

func (self *GetRunningMatchExRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tMatchInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRunningMatchExRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tMatchInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCode), 1)
	if err != nil {
		return err
	}
	return err
}

type TeamInfo struct {
	iTId     int32
	iMId     int32
	sName    string
	sPictrue string
	lPUid    int64
	iPShared int32
}

func (self *TeamInfo) ResetDefault() {
}

func (self *TeamInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sPictrue))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iPShared))
	if err != nil {
		return err
	}
	return err
}

func (self *TeamInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPictrue), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPShared), 5)
	if err != nil {
		return err
	}
	return err
}

type AddTeamReq struct {
	tId   UserId
	tInfo TeamInfo
}

func (self *AddTeamReq) ResetDefault() {
}

func (self *AddTeamReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *AddTeamReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type AddTeamRsp struct {
	iTId int32
}

func (self *AddTeamRsp) ResetDefault() {
}

func (self *AddTeamRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTId))
	if err != nil {
		return err
	}
	return err
}

func (self *AddTeamRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTId), 0)
	if err != nil {
		return err
	}
	return err
}

type UpdateTeamReq struct {
	tId   UserId
	tInfo TeamInfo
}

func (self *UpdateTeamReq) ResetDefault() {
}

func (self *UpdateTeamReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateTeamReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdateTeamRsp struct {
	iTId int32
}

func (self *UpdateTeamRsp) ResetDefault() {
}

func (self *UpdateTeamRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTId))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateTeamRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetTeamListReq struct {
	tId  UserId
	iMId int32
}

func (self *GetTeamListReq) ResetDefault() {
}

func (self *GetTeamListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetTeamListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetTeamListRsp struct {
	vTeamInfos []TeamInfo
}

func (self *GetTeamListRsp) ResetDefault() {
}

func (self *GetTeamListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vTeamInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetTeamListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vTeamInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type GetTeamInfoReq struct {
	tId  UserId
	iTId int32
}

func (self *GetTeamInfoReq) ResetDefault() {
}

func (self *GetTeamInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetTeamInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetTeamInfoRsp struct {
	tTeamInfo TeamInfo
}

func (self *GetTeamInfoRsp) ResetDefault() {
}

func (self *GetTeamInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tTeamInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetTeamInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tTeamInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GetTopPopTeamReq struct {
	tId  UserId
	iMId int32
}

func (self *GetTopPopTeamReq) ResetDefault() {
}

func (self *GetTopPopTeamReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetTopPopTeamReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetTopPopTeamRsp struct {
	tTeamInfo TeamInfo
	iMembers  int32
}

func (self *GetTopPopTeamRsp) ResetDefault() {
}

func (self *GetTopPopTeamRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tTeamInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMembers))
	if err != nil {
		return err
	}
	return err
}

func (self *GetTopPopTeamRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tTeamInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMembers), 1)
	if err != nil {
		return err
	}
	return err
}

type GetTopBeanTeamReq struct {
	tId  UserId
	iMId int32
}

func (self *GetTopBeanTeamReq) ResetDefault() {
}

func (self *GetTopBeanTeamReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetTopBeanTeamReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetTopBeanTeamRsp struct {
	tTeamInfo TeamInfo
	iBeanType int32
	lBeanNum  int64
}

func (self *GetTopBeanTeamRsp) ResetDefault() {
}

func (self *GetTopBeanTeamRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tTeamInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lBeanNum))
	if err != nil {
		return err
	}
	return err
}

func (self *GetTopBeanTeamRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tTeamInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBeanNum), 2)
	if err != nil {
		return err
	}
	return err
}

type UnitInfo struct {
	iSId        int32
	iTId        int32
	iTYpe       int32
	istate      int32
	iWinRate    int32
	iOddsFactor int32
	iOdds       int32
	iWinFlag    int32
	iBeanType   int32
	lBeanNum    int64
}

func (self *UnitInfo) ResetDefault() {
}

func (self *UnitInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTYpe))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.istate))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iWinRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iOddsFactor))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iOdds))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iWinFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.lBeanNum))
	if err != nil {
		return err
	}
	return err
}

func (self *UnitInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTYpe), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.istate), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinRate), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOddsFactor), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOdds), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinFlag), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBeanNum), 9)
	if err != nil {
		return err
	}
	return err
}

type ScheduleInfo struct {
	iSId       int32
	iMId       int32
	sName      string
	lStartTime int64
	iOrder     int32
	istate     int32
	iBuyerNum  int32
	iBeanType  int32
	lBeanNum   int64
	lIncome    int64
}

func (self *ScheduleInfo) ResetDefault() {
}

func (self *ScheduleInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iOrder))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.istate))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iBuyerNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lBeanNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.lIncome))
	if err != nil {
		return err
	}
	return err
}

func (self *ScheduleInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOrder), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.istate), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBuyerNum), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBeanNum), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lIncome), 9)
	if err != nil {
		return err
	}
	return err
}

type ScheduleDetailInfo struct {
	tInfo  ScheduleInfo
	tHome  UnitInfo
	tGuest UnitInfo
}

func (self *ScheduleDetailInfo) ResetDefault() {
}

func (self *ScheduleDetailInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tHome))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tGuest))
	if err != nil {
		return err
	}
	return err
}

func (self *ScheduleDetailInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tHome), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tGuest), 2)
	if err != nil {
		return err
	}
	return err
}

type AddScheduleReq struct {
	tId   UserId
	tInfo ScheduleDetailInfo
}

func (self *AddScheduleReq) ResetDefault() {
}

func (self *AddScheduleReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *AddScheduleReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type AddScheduleRsp struct {
	iSId int32
	iMId int32
}

func (self *AddScheduleRsp) ResetDefault() {
}

func (self *AddScheduleRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *AddScheduleRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdateScheduleReq struct {
	tId   UserId
	tInfo ScheduleInfo
}

func (self *UpdateScheduleReq) ResetDefault() {
}

func (self *UpdateScheduleReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateScheduleReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdateScheduleRsp struct {
	iSId int32
}

func (self *UpdateScheduleRsp) ResetDefault() {
}

func (self *UpdateScheduleRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSId))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateScheduleRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSId), 0)
	if err != nil {
		return err
	}
	return err
}

type LineScheduleReq struct {
	tId  UserId
	iOp  int32
	iSId int32
	iTId int32
}

func (self *LineScheduleReq) ResetDefault() {
}

func (self *LineScheduleReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iOp))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTId))
	if err != nil {
		return err
	}
	return err
}

func (self *LineScheduleReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOp), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTId), 3)
	if err != nil {
		return err
	}
	return err
}

type LineScheduleRsp struct {
	iSId int32
	iTId int32
}

func (self *LineScheduleRsp) ResetDefault() {
}

func (self *LineScheduleRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTId))
	if err != nil {
		return err
	}
	return err
}

func (self *LineScheduleRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTId), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdateScheduleUnitReq struct {
	tId   UserId
	tInfo UnitInfo
}

func (self *UpdateScheduleUnitReq) ResetDefault() {
}

func (self *UpdateScheduleUnitReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateScheduleUnitReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdateScheduleUnitRsp struct {
	iSId int32
	iTId int32
}

func (self *UpdateScheduleUnitRsp) ResetDefault() {
}

func (self *UpdateScheduleUnitRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTId))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateScheduleUnitRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetScheduleListReq struct {
	tId  UserId
	iMId int32
}

func (self *GetScheduleListReq) ResetDefault() {
}

func (self *GetScheduleListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetScheduleListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetScheduleListRsp struct {
	vInfos []ScheduleDetailInfo
}

func (self *GetScheduleListRsp) ResetDefault() {
}

func (self *GetScheduleListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetScheduleListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type GetScheduleInfoReq struct {
	tId  UserId
	iSId int32
}

func (self *GetScheduleInfoReq) ResetDefault() {
}

func (self *GetScheduleInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iSId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetScheduleInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetScheduleInfoRsp struct {
	tInfo ScheduleDetailInfo
}

func (self *GetScheduleInfoRsp) ResetDefault() {
}

func (self *GetScheduleInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetScheduleInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type BuyTransReq struct {
	tId       UserId
	lUid      int64
	iMId      int32
	iSId      int32
	iTId      int32
	iBeanType int32
	iBeanNum  int32
	iBuyType  int32
}

func (self *BuyTransReq) ResetDefault() {
}

func (self *BuyTransReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iMId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iTId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iBeanNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iBuyType))
	if err != nil {
		return err
	}
	return err
}

func (self *BuyTransReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanNum), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBuyType), 7)
	if err != nil {
		return err
	}
	return err
}

type BuyTransRsp struct {
	iSId  int32
	iTId  int32
	iOdds int32
}

func (self *BuyTransRsp) ResetDefault() {
}

func (self *BuyTransRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iOdds))
	if err != nil {
		return err
	}
	return err
}

func (self *BuyTransRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOdds), 2)
	if err != nil {
		return err
	}
	return err
}

type SIdTIdInfo struct {
	iSId int32
	iTId int32
}

func (self *SIdTIdInfo) ResetDefault() {
}

func (self *SIdTIdInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTId))
	if err != nil {
		return err
	}
	return err
}

func (self *SIdTIdInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTId), 1)
	if err != nil {
		return err
	}
	return err
}

type CheerTeamInfo struct {
	iSId      int32
	iTId      int32
	iCount    int32
	lUidCount map[int64]int64
}

func (self *CheerTeamInfo) ResetDefault() {
}

func (self *CheerTeamInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUidCount))
	if err != nil {
		return err
	}
	return err
}

func (self *CheerTeamInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUidCount), 3)
	if err != nil {
		return err
	}
	return err
}

type GetCheerTeamReq struct {
	tId    UserId
	vInfos []SIdTIdInfo
}

func (self *GetCheerTeamReq) ResetDefault() {
}

func (self *GetCheerTeamReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetCheerTeamReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vInfos), 1)
	if err != nil {
		return err
	}
	return err
}

type GetCheerTeamRsp struct {
	vInfos []CheerTeamInfo
}

func (self *GetCheerTeamRsp) ResetDefault() {
}

func (self *GetCheerTeamRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetCheerTeamRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type MyTransInfoInfo struct {
	iSId     int32
	iTId     int32
	lBeanNum int64
}

func (self *MyTransInfoInfo) ResetDefault() {
}

func (self *MyTransInfoInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lBeanNum))
	if err != nil {
		return err
	}
	return err
}

func (self *MyTransInfoInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBeanNum), 2)
	if err != nil {
		return err
	}
	return err
}

type GetMyTransInfoReq struct {
	tId     UserId
	lUid    int64
	tSIdTId SIdTIdInfo
}

func (self *GetMyTransInfoReq) ResetDefault() {
}

func (self *GetMyTransInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tSIdTId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMyTransInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tSIdTId), 2)
	if err != nil {
		return err
	}
	return err
}

type GetMyTransInfoRsp struct {
	tInfo MyTransInfoInfo
}

func (self *GetMyTransInfoRsp) ResetDefault() {
}

func (self *GetMyTransInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMyTransInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type addMatchGambleWhiteListReq struct {
	tId   UserId
	vPids []int64
	iMId  int32
}

func (self *addMatchGambleWhiteListReq) ResetDefault() {
}

func (self *addMatchGambleWhiteListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vPids))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *addMatchGambleWhiteListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPids), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 2)
	if err != nil {
		return err
	}
	return err
}

type delMatchGambleWhiteListReq struct {
	tId   UserId
	vPids []int64
	iMId  int32
}

func (self *delMatchGambleWhiteListReq) ResetDefault() {
}

func (self *delMatchGambleWhiteListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vPids))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *delMatchGambleWhiteListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPids), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 2)
	if err != nil {
		return err
	}
	return err
}

type getMatchGambleWhiteListReq struct {
	tId  UserId
	iMId int32
}

func (self *getMatchGambleWhiteListReq) ResetDefault() {
}

func (self *getMatchGambleWhiteListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *getMatchGambleWhiteListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 1)
	if err != nil {
		return err
	}
	return err
}

type getMatchGambleWhiteListRsp struct {
	vPids []int64
}

func (self *getMatchGambleWhiteListRsp) ResetDefault() {
}

func (self *getMatchGambleWhiteListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vPids))
	if err != nil {
		return err
	}
	return err
}

func (self *getMatchGambleWhiteListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPids), 0)
	if err != nil {
		return err
	}
	return err
}

type showScheduleListReq struct {
	tId  UserId
	lTid int64
	lSid int64
	lPid int64
	iMId int32
}

func (self *showScheduleListReq) ResetDefault() {
}

func (self *showScheduleListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *showScheduleListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 4)
	if err != nil {
		return err
	}
	return err
}

type CombineGambleReq struct {
	tId       UserId
	lUid      int64
	vTeamList []int64
}

func (self *CombineGambleReq) ResetDefault() {
}

func (self *CombineGambleReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vTeamList))
	if err != nil {
		return err
	}
	return err
}

func (self *CombineGambleReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vTeamList), 2)
	if err != nil {
		return err
	}
	return err
}

type EndMatchNotifyReq struct {
	tId     UserId
	iSId    int32
	iWinTId int32
}

func (self *EndMatchNotifyReq) ResetDefault() {
}

func (self *EndMatchNotifyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iWinTId))
	if err != nil {
		return err
	}
	return err
}

func (self *EndMatchNotifyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinTId), 2)
	if err != nil {
		return err
	}
	return err
}

type EndMatchNotifySecondReq struct {
	tId  UserId
	iMId int32
}

func (self *EndMatchNotifySecondReq) ResetDefault() {
}

func (self *EndMatchNotifySecondReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *EndMatchNotifySecondReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 1)
	if err != nil {
		return err
	}
	return err
}

type EndMatchNotifySecondRsp struct {
	iCode int32
}

func (self *EndMatchNotifySecondRsp) ResetDefault() {
}

func (self *EndMatchNotifySecondRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *EndMatchNotifySecondRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type EndScheduleNotifyReq struct {
	tId      UserId
	iTopicId int32
	iSId     int32
	vUnitId  []int32
}

func (self *EndScheduleNotifyReq) ResetDefault() {
}

func (self *EndScheduleNotifyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iSId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vUnitId))
	if err != nil {
		return err
	}
	return err
}

func (self *EndScheduleNotifyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTopicId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUnitId), 3)
	if err != nil {
		return err
	}
	return err
}

type showTopicListReq struct {
	tId  UserId
	lTid int64
	lSid int64
	lPid int64
	iMId int32
}

func (self *showTopicListReq) ResetDefault() {
}

func (self *showTopicListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iMId))
	if err != nil {
		return err
	}
	return err
}

func (self *showTopicListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMId), 4)
	if err != nil {
		return err
	}
	return err
}

type EndScheduleNotifyRsp struct {
	iCode int32
}

func (self *EndScheduleNotifyRsp) ResetDefault() {
}

func (self *EndScheduleNotifyRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *EndScheduleNotifyRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type UserSendPropReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lUid          int64
	iPropType     int32
	iCount        int32
}

func (self *UserSendPropReq) ResetDefault() {
}

func (self *UserSendPropReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iCount))
	if err != nil {
		return err
	}
	return err
}

func (self *UserSendPropReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 5)
	if err != nil {
		return err
	}
	return err
}

type UserSendPropResp struct {
	iCode int32
}

func (self *UserSendPropResp) ResetDefault() {
}

func (self *UserSendPropResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *UserSendPropResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterRankInfo struct {
	lChannelId    int64
	iShortChannel int32
	lSubchannelId int64
	lUid          int64
	sNick         string
	iProficiency  int32
}

func (self *PresenterRankInfo) ResetDefault() {
}

func (self *PresenterRankInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iProficiency))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterRankInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iProficiency), 5)
	if err != nil {
		return err
	}
	return err
}

type ChannelRankInfo struct {
	lChannelId      int64
	iShortChannel   int32
	lSubchannelId   int64
	sSubchannelName string
	iProficiency    int32
}

func (self *ChannelRankInfo) ResetDefault() {
}

func (self *ChannelRankInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sSubchannelName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iProficiency))
	if err != nil {
		return err
	}
	return err
}

func (self *ChannelRankInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSubchannelName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iProficiency), 4)
	if err != nil {
		return err
	}
	return err
}

type NewlyRichRankInfo struct {
	lUid      int64
	iIntegral int32
	sNick     string
}

func (self *NewlyRichRankInfo) ResetDefault() {
}

func (self *NewlyRichRankInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iIntegral))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNick))
	if err != nil {
		return err
	}
	return err
}

func (self *NewlyRichRankInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIntegral), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 2)
	if err != nil {
		return err
	}
	return err
}

type TodayStarRankInfo struct {
	lUid  int64
	iPure int32
	sNick string
}

func (self *TodayStarRankInfo) ResetDefault() {
}

func (self *TodayStarRankInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPure))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNick))
	if err != nil {
		return err
	}
	return err
}

func (self *TodayStarRankInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPure), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 2)
	if err != nil {
		return err
	}
	return err
}

type PresenterTotalRankInfo struct {
	lUid      int64
	iIntegral int32
	sNick     string
}

func (self *PresenterTotalRankInfo) ResetDefault() {
}

func (self *PresenterTotalRankInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iIntegral))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNick))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterTotalRankInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIntegral), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 2)
	if err != nil {
		return err
	}
	return err
}

type SupportRankInfo struct {
	lUserUid    int64
	iContribute int32
	sNick       string
}

func (self *SupportRankInfo) ResetDefault() {
}

func (self *SupportRankInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUserUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iContribute))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNick))
	if err != nil {
		return err
	}
	return err
}

func (self *SupportRankInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUserUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iContribute), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 2)
	if err != nil {
		return err
	}
	return err
}

type PresenterTaskPlaneInfo struct {
	lUid                  int64
	iTaskNum              int32
	iPropType             int32
	iPropCount            int32
	iRedHeartCount        int32
	iPropCountTotal       int32
	iRedHeartCountTotal   int32
	iWhitePlaneCount      int32
	iRosinessPlaneCount   int32
	iGoldenPlaneCount     int32
	iPresenterRank        int32
	iPresenterProficiency int32
}

func (self *PresenterTaskPlaneInfo) ResetDefault() {
}

func (self *PresenterTaskPlaneInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTaskNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPropCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iRedHeartCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iPropCountTotal))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iRedHeartCountTotal))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iWhitePlaneCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iRosinessPlaneCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iGoldenPlaneCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iPresenterRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iPresenterProficiency))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterTaskPlaneInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskNum), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCount), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRedHeartCount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCountTotal), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRedHeartCountTotal), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWhitePlaneCount), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRosinessPlaneCount), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGoldenPlaneCount), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterRank), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterProficiency), 11)
	if err != nil {
		return err
	}
	return err
}

type RankInfo struct {
	vPresenterRankLists  []PresenterRankInfo
	vChannelRankLists    []ChannelRankInfo
	iAdditionStatue      int32
	iActivityStatus      int32
	vNewlyRichRankLists  []NewlyRichRankInfo
	vPresenterTotalLists []PresenterTotalRankInfo
}

func (self *RankInfo) ResetDefault() {
}

func (self *RankInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vPresenterRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vChannelRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iAdditionStatue))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iActivityStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vNewlyRichRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vPresenterTotalLists))
	if err != nil {
		return err
	}
	return err
}

func (self *RankInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPresenterRankLists), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vChannelRankLists), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAdditionStatue), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActivityStatus), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vNewlyRichRankLists), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterTotalLists), 5)
	if err != nil {
		return err
	}
	return err
}

type PanelInfoReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lUid          int64
}

func (self *PanelInfoReq) ResetDefault() {
}

func (self *PanelInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *PanelInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	return err
}

type PanelInfoRsp struct {
	lUid                 int64
	iActivityStatus      int32
	iCurrentDay          int32
	iTotalDay            int32
	iAdditionStatue      int32
	sTaskPlaneInfo       PresenterTaskPlaneInfo
	vPresenterRankLists  []PresenterRankInfo
	vChannelRankLists    []ChannelRankInfo
	sActivityStartTime   string
	vNewlyRichRankLists  []NewlyRichRankInfo
	vPresenterTotalLists []PresenterTotalRankInfo
}

func (self *PanelInfoRsp) ResetDefault() {
}

func (self *PanelInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iActivityStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCurrentDay))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTotalDay))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iAdditionStatue))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sTaskPlaneInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.vPresenterRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.vChannelRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sActivityStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.vNewlyRichRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.vPresenterTotalLists))
	if err != nil {
		return err
	}
	return err
}

func (self *PanelInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActivityStatus), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCurrentDay), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalDay), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAdditionStatue), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTaskPlaneInfo), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterRankLists), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vChannelRankLists), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActivityStartTime), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vNewlyRichRankLists), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterTotalLists), 10)
	if err != nil {
		return err
	}
	return err
}

type PresenterPopupPlaneReq struct {
	tId           UserId
	lChannelId    int64
	iShortChannel int32
	lSubchannelId int64
	lUid          int64
	sNick         string
	iPlaneType    int32
	iPlaneCount   int32
}

func (self *PresenterPopupPlaneReq) ResetDefault() {
}

func (self *PresenterPopupPlaneReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iPlaneType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iPlaneCount))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterPopupPlaneReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPlaneType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPlaneCount), 7)
	if err != nil {
		return err
	}
	return err
}

type PresenterPopupPlaneRsp struct {
	iCode int32
}

func (self *PresenterPopupPlaneRsp) ResetDefault() {
}

func (self *PresenterPopupPlaneRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterPopupPlaneRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type UserClickPlaneReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lPid          int64
	lUid          int64
	sNick         string
	lKey          int64
	iWave         int32
}

func (self *UserClickPlaneReq) ResetDefault() {
}

func (self *UserClickPlaneReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iWave))
	if err != nil {
		return err
	}
	return err
}

func (self *UserClickPlaneReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lKey), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWave), 7)
	if err != nil {
		return err
	}
	return err
}

type UserClickPlaneRsp struct {
	iCode      int32
	iPropType  int32
	iPropCount int32
}

func (self *UserClickPlaneRsp) ResetDefault() {
}

func (self *UserClickPlaneRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPropCount))
	if err != nil {
		return err
	}
	return err
}

func (self *UserClickPlaneRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCount), 2)
	if err != nil {
		return err
	}
	return err
}

type PanelInfoV1Req struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lUid          int64
}

func (self *PanelInfoV1Req) ResetDefault() {
}

func (self *PanelInfoV1Req) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *PanelInfoV1Req) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	return err
}

type PanelInfoV1Rsp struct {
	lUid                 int64
	iActivityStatus      int32
	iCurrentDay          int32
	iTotalDay            int32
	iAdditionStatue      int32
	sTaskPlaneInfo       PresenterTaskPlaneInfo
	vPresenterRankLists  []PresenterRankInfo
	vChannelRankLists    []ChannelRankInfo
	sActivityStartTime   string
	vNewlyRichRankLists  []NewlyRichRankInfo
	vPresenterTotalLists []PresenterTotalRankInfo
	vSupportRankLists    []SupportRankInfo
}

func (self *PanelInfoV1Rsp) ResetDefault() {
}

func (self *PanelInfoV1Rsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iActivityStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCurrentDay))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTotalDay))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iAdditionStatue))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sTaskPlaneInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.vPresenterRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.vChannelRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sActivityStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.vNewlyRichRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.vPresenterTotalLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.vSupportRankLists))
	if err != nil {
		return err
	}
	return err
}

func (self *PanelInfoV1Rsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActivityStatus), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCurrentDay), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalDay), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAdditionStatue), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTaskPlaneInfo), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterRankLists), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vChannelRankLists), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActivityStartTime), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vNewlyRichRankLists), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterTotalLists), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSupportRankLists), 11)
	if err != nil {
		return err
	}
	return err
}

type PresenterPopupPlaneV1Req struct {
	tId           UserId
	lChannelId    int64
	iShortChannel int32
	lSubchannelId int64
	lUid          int64
	sNick         string
	iPlaneType    int32
	iPlaneCount   int32
}

func (self *PresenterPopupPlaneV1Req) ResetDefault() {
}

func (self *PresenterPopupPlaneV1Req) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iPlaneType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iPlaneCount))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterPopupPlaneV1Req) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPlaneType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPlaneCount), 7)
	if err != nil {
		return err
	}
	return err
}

type PresenterPopupPlaneV1Rsp struct {
	iCode int32
}

func (self *PresenterPopupPlaneV1Rsp) ResetDefault() {
}

func (self *PresenterPopupPlaneV1Rsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterPopupPlaneV1Rsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type UserClickPlaneV1Req struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lPid          int64
	lUid          int64
	sNick         string
	lKey          int64
	iWave         int32
}

func (self *UserClickPlaneV1Req) ResetDefault() {
}

func (self *UserClickPlaneV1Req) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iWave))
	if err != nil {
		return err
	}
	return err
}

func (self *UserClickPlaneV1Req) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lKey), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWave), 7)
	if err != nil {
		return err
	}
	return err
}

type UserClickPlaneV1Rsp struct {
	iCode      int32
	iPropType  int32
	iPropCount int32
}

func (self *UserClickPlaneV1Rsp) ResetDefault() {
}

func (self *UserClickPlaneV1Rsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPropCount))
	if err != nil {
		return err
	}
	return err
}

func (self *UserClickPlaneV1Rsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCount), 2)
	if err != nil {
		return err
	}
	return err
}

type IntegralTopThreeNotice struct {
	lUid  int64
	sNick string
	iRank int32
}

func (self *IntegralTopThreeNotice) ResetDefault() {
}

func (self *IntegralTopThreeNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iRank))
	if err != nil {
		return err
	}
	return err
}

func (self *IntegralTopThreeNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRank), 2)
	if err != nil {
		return err
	}
	return err
}

type PanelInfoNotice struct {
	panelInfoV1Rsp PanelInfoV1Rsp
}

func (self *PanelInfoNotice) ResetDefault() {
}

func (self *PanelInfoNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.panelInfoV1Rsp))
	if err != nil {
		return err
	}
	return err
}

func (self *PanelInfoNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.panelInfoV1Rsp), 0)
	if err != nil {
		return err
	}
	return err
}

type RankInfoNotice struct {
	rankInfo RankInfo
}

func (self *RankInfoNotice) ResetDefault() {
}

func (self *RankInfoNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.rankInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *RankInfoNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.rankInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterPopupV1Notice struct {
	lUid              int64
	lKey              int64
	iPlaneType        int32
	iPlaneCount       int32
	iDuration         int32
	iAlreadyStartTime int32
}

func (self *PresenterPopupV1Notice) ResetDefault() {
}

func (self *PresenterPopupV1Notice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPlaneType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPlaneCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iDuration))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iAlreadyStartTime))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterPopupV1Notice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lKey), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPlaneType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPlaneCount), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDuration), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAlreadyStartTime), 5)
	if err != nil {
		return err
	}
	return err
}

type DownPlaneNotice struct {
	sNick      string
	iPropType  int32
	iPropCount int32
}

func (self *DownPlaneNotice) ResetDefault() {
}

func (self *DownPlaneNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPropCount))
	if err != nil {
		return err
	}
	return err
}

func (self *DownPlaneNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sNick), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCount), 2)
	if err != nil {
		return err
	}
	return err
}

type PlayPlaneRankChangeNotice struct {
	iWinShortChannel  int32
	sWinNick          string
	iLoseShortChannel int32
	sLoseNick         string
	iRank             int32
}

func (self *PlayPlaneRankChangeNotice) ResetDefault() {
}

func (self *PlayPlaneRankChangeNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iWinShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sWinNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLoseShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sLoseNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iRank))
	if err != nil {
		return err
	}
	return err
}

func (self *PlayPlaneRankChangeNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iWinShortChannel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWinNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLoseShortChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLoseNick), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRank), 4)
	if err != nil {
		return err
	}
	return err
}

type PlanePopupNotice struct {
	lChannelId     int64
	lSubchannelId  int64
	iShortChannel  int32
	sPresenterNick string
	iPlaneType     int32
}

func (self *PlanePopupNotice) ResetDefault() {
}

func (self *PlanePopupNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sPresenterNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPlaneType))
	if err != nil {
		return err
	}
	return err
}

func (self *PlanePopupNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterNick), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPlaneType), 4)
	if err != nil {
		return err
	}
	return err
}

type UserSettingItem struct {
	sKey   string
	sValue string
}

func (self *UserSettingItem) ResetDefault() {
}

func (self *UserSettingItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sValue))
	if err != nil {
		return err
	}
	return err
}

func (self *UserSettingItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sKey), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sValue), 1)
	if err != nil {
		return err
	}
	return err
}

type SettingSetupReq struct {
	tId    UserId
	vItems []UserSettingItem
}

func (self *SettingSetupReq) ResetDefault() {
}

func (self *SettingSetupReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vItems))
	if err != nil {
		return err
	}
	return err
}

func (self *SettingSetupReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vItems), 1)
	if err != nil {
		return err
	}
	return err
}

type SettingSetupRsp struct {
	iLevel   int32
	sMessage string
}

func (self *SettingSetupRsp) ResetDefault() {
}

func (self *SettingSetupRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *SettingSetupRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iLevel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMessage), 1)
	if err != nil {
		return err
	}
	return err
}

type SettingFetchReq struct {
	tId           UserId
	vKeys         []string
	bEnableCached bool
}

func (self *SettingFetchReq) ResetDefault() {
}

func (self *SettingFetchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vKeys))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.bEnableCached))
	if err != nil {
		return err
	}
	return err
}

func (self *SettingFetchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vKeys), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bEnableCached), 2)
	if err != nil {
		return err
	}
	return err
}

type SettingFetchRsp struct {
	vItems []UserSettingItem
}

func (self *SettingFetchRsp) ResetDefault() {
}

func (self *SettingFetchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vItems))
	if err != nil {
		return err
	}
	return err
}

func (self *SettingFetchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vItems), 0)
	if err != nil {
		return err
	}
	return err
}

type UserSettingInfo struct {
	lUid  int64
	tItem UserSettingItem
}

func (self *UserSettingInfo) ResetDefault() {
}

func (self *UserSettingInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tItem))
	if err != nil {
		return err
	}
	return err
}

func (self *UserSettingInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tItem), 1)
	if err != nil {
		return err
	}
	return err
}

type BatchFetchUserSettingReq struct {
	tId   UserId
	vUids []int64
	sKey  string
}

func (self *BatchFetchUserSettingReq) ResetDefault() {
}

func (self *BatchFetchUserSettingReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sKey))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchFetchUserSettingReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sKey), 2)
	if err != nil {
		return err
	}
	return err
}

type BatchFetchUserSettingRsp struct {
	vInfo []UserSettingInfo
}

func (self *BatchFetchUserSettingRsp) ResetDefault() {
}

func (self *BatchFetchUserSettingRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchFetchUserSettingRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type LiveAnnouncementSettingReq struct {
	tId               UserId
	sLiveAnnouncement string
}

func (self *LiveAnnouncementSettingReq) ResetDefault() {
}

func (self *LiveAnnouncementSettingReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sLiveAnnouncement))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAnnouncementSettingReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveAnnouncement), 1)
	if err != nil {
		return err
	}
	return err
}

type LiveAnnouncementSettingRsp struct {
	sMessage string
}

func (self *LiveAnnouncementSettingRsp) ResetDefault() {
}

func (self *LiveAnnouncementSettingRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAnnouncementSettingRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sMessage), 0)
	if err != nil {
		return err
	}
	return err
}

type LiveAnnouncementFetchReq struct {
	tId  UserId
	lUId int64
}

func (self *LiveAnnouncementFetchReq) ResetDefault() {
}

func (self *LiveAnnouncementFetchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUId))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAnnouncementFetchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUId), 1)
	if err != nil {
		return err
	}
	return err
}

type LiveAnnouncementFetchRsp struct {
	sLiveAnnouncement string
}

func (self *LiveAnnouncementFetchRsp) ResetDefault() {
}

func (self *LiveAnnouncementFetchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sLiveAnnouncement))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAnnouncementFetchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sLiveAnnouncement), 0)
	if err != nil {
		return err
	}
	return err
}

type LiveAnnouncementBatchFetchReq struct {
	tId   UserId
	vUIds []int64
}

func (self *LiveAnnouncementBatchFetchReq) ResetDefault() {
}

func (self *LiveAnnouncementBatchFetchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUIds))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAnnouncementBatchFetchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUIds), 1)
	if err != nil {
		return err
	}
	return err
}

type LiveAnnouncementBatchFetchRsp struct {
	mpLiveAnnouncement map[int64]string
}

func (self *LiveAnnouncementBatchFetchRsp) ResetDefault() {
}

func (self *LiveAnnouncementBatchFetchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.mpLiveAnnouncement))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveAnnouncementBatchFetchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.mpLiveAnnouncement), 0)
	if err != nil {
		return err
	}
	return err
}

type PhonePushConf struct {
	lUid    int64
	iType   int32
	iSwitch int32
}

func (self *PhonePushConf) ResetDefault() {
}

func (self *PhonePushConf) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iSwitch))
	if err != nil {
		return err
	}
	return err
}

func (self *PhonePushConf) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSwitch), 2)
	if err != nil {
		return err
	}
	return err
}

type UpdatePushConfReq struct {
	tId    UserId
	vConfs []PhonePushConf
}

func (self *UpdatePushConfReq) ResetDefault() {
}

func (self *UpdatePushConfReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vConfs))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdatePushConfReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vConfs), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdatePushConfRsp struct {
	vConfs []PhonePushConf
}

func (self *UpdatePushConfRsp) ResetDefault() {
}

func (self *UpdatePushConfRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vConfs))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdatePushConfRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vConfs), 0)
	if err != nil {
		return err
	}
	return err
}

type GetPushConfReq struct {
	tId    UserId
	vTypes []int32
}

func (self *GetPushConfReq) ResetDefault() {
}

func (self *GetPushConfReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vTypes))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPushConfReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vTypes), 1)
	if err != nil {
		return err
	}
	return err
}

type GetPushConfRsp struct {
	vConfs []PhonePushConf
}

func (self *GetPushConfRsp) ResetDefault() {
}

func (self *GetPushConfRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vConfs))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPushConfRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vConfs), 0)
	if err != nil {
		return err
	}
	return err
}

type PushEntity struct {
	PushType int32
	alert    string
	action   string
}

func (self *PushEntity) ResetDefault() {
}

func (self *PushEntity) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.PushType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.alert))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.action))
	if err != nil {
		return err
	}
	return err
}

func (self *PushEntity) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.PushType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.alert), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.action), 2)
	if err != nil {
		return err
	}
	return err
}

type GetPhonePushByIdReq struct {
	tId    UserId
	iMsgId int32
}

func (self *GetPhonePushByIdReq) ResetDefault() {
}

func (self *GetPhonePushByIdReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMsgId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPhonePushByIdReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMsgId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetPhonePushByIdRsp struct {
	iMsgId    int32
	sANSPJson string
}

func (self *GetPhonePushByIdRsp) ResetDefault() {
}

func (self *GetPhonePushByIdRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iMsgId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sANSPJson))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPhonePushByIdRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iMsgId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sANSPJson), 1)
	if err != nil {
		return err
	}
	return err
}

type PhoneSubPushReq struct {
	tId             UserId
	lUid            int64
	lChannelId      int64
	lSubChannelId   int64
	lShortChannelId int64
	sGameName       string
	sName           string
	sPost           string
	vSubUids        []int64
	lMsgId          int64
	iPhoneType      int32
	lLiveId         int64
	iFull           int32
	sLiveDesc       string
}

func (self *PhoneSubPushReq) ResetDefault() {
}

func (self *PhoneSubPushReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lShortChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sPost))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.vSubUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.lMsgId))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iPhoneType))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iFull))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.sLiveDesc))
	if err != nil {
		return err
	}
	return err
}

func (self *PhoneSubPushReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lShortChannelId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPost), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSubUids), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lMsgId), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPhoneType), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFull), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveDesc), 13)
	if err != nil {
		return err
	}
	return err
}

type PhoneNoticeAndInfoPushReq struct {
	tId        UserId
	iPushType  int32
	lPushId    int64
	sAlert     string
	sAction    string
	lExpire    int64
	iPushRange int32
	vPushUids  []string
	sTitle     string
}

func (self *PhoneNoticeAndInfoPushReq) ResetDefault() {
}

func (self *PhoneNoticeAndInfoPushReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPushType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPushId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sAlert))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lExpire))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iPushRange))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.vPushUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sTitle))
	if err != nil {
		return err
	}
	return err
}

func (self *PhoneNoticeAndInfoPushReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPushType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPushId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAlert), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAction), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExpire), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPushRange), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPushUids), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTitle), 8)
	if err != nil {
		return err
	}
	return err
}

type PhoneGamblePushInfo struct {
	lUid    int64
	lBeans  int64
	lUnitId int64
}

func (self *PhoneGamblePushInfo) ResetDefault() {
}

func (self *PhoneGamblePushInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lBeans))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUnitId))
	if err != nil {
		return err
	}
	return err
}

func (self *PhoneGamblePushInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBeans), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUnitId), 2)
	if err != nil {
		return err
	}
	return err
}

type PhoneGamblePushReq struct {
	tId         UserId
	lPushId     int64
	sName       string
	iBeanType   int32
	vGambleUids []PhoneGamblePushInfo
	mUnitInfos  map[int64]string
}

func (self *PhoneGamblePushReq) ResetDefault() {
}

func (self *PhoneGamblePushReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPushId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vGambleUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.mUnitInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *PhoneGamblePushReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPushId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGambleUids), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mUnitInfos), 5)
	if err != nil {
		return err
	}
	return err
}

type GetRecommendedCategoryReq struct {
	tId UserId
}

func (self *GetRecommendedCategoryReq) ResetDefault() {
}

func (self *GetRecommendedCategoryReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecommendedCategoryReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetRecommendedCategoryRsp struct {
	vCategories []string
}

func (self *GetRecommendedCategoryRsp) ResetDefault() {
}

func (self *GetRecommendedCategoryRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vCategories))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecommendedCategoryRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vCategories), 0)
	if err != nil {
		return err
	}
	return err
}

type VideoDefinition struct {
	sSize       string
	sWidth      string
	sHeight     string
	sDefinition string
	sUrl        string
}

func (self *VideoDefinition) ResetDefault() {
}

func (self *VideoDefinition) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sSize))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sWidth))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sHeight))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sDefinition))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *VideoDefinition) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sSize), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWidth), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHeight), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDefinition), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUrl), 4)
	if err != nil {
		return err
	}
	return err
}

type VideoInfo struct {
	lUid             int64
	sAvatarUrl       string
	sNickName        string
	lVid             int64
	sVideoTitle      string
	sVideoCover      string
	lVideoPlayNum    int64
	lVideoCommentNum int64
	sVideoDuration   string
	sVideoUrl        string
	sVideoUploadTime string
	sVideoChannel    string
	sCategory        string
	vDefinitions     []VideoDefinition
}

func (self *VideoInfo) ResetDefault() {
}

func (self *VideoInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lVid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sVideoTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sVideoCover))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lVideoPlayNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lVideoCommentNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sVideoDuration))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sVideoUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sVideoUploadTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sVideoChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.sCategory))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.vDefinitions))
	if err != nil {
		return err
	}
	return err
}

func (self *VideoInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lVid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVideoTitle), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVideoCover), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lVideoPlayNum), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lVideoCommentNum), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVideoDuration), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVideoUrl), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVideoUploadTime), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVideoChannel), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCategory), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vDefinitions), 13)
	if err != nil {
		return err
	}
	return err
}

type GetRecommendedVideoListReq struct {
	tId            UserId
	iNumberPerPage int32
	iPageNumber    int32
	iVideoListType int32
	sCategory      string
	lUid           int64
	sKeyWord       string
}

func (self *GetRecommendedVideoListReq) ResetDefault() {
}

func (self *GetRecommendedVideoListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iNumberPerPage))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPageNumber))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iVideoListType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sCategory))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sKeyWord))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecommendedVideoListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNumberPerPage), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPageNumber), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVideoListType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCategory), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sKeyWord), 6)
	if err != nil {
		return err
	}
	return err
}

type GetRecommendedVideoListRsp struct {
	vVideos   []VideoInfo
	iLeftFlag int32
}

func (self *GetRecommendedVideoListRsp) ResetDefault() {
}

func (self *GetRecommendedVideoListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vVideos))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iLeftFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecommendedVideoListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vVideos), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLeftFlag), 1)
	if err != nil {
		return err
	}
	return err
}

type GetVideoViewerCountReq struct {
	tId UserId
}

func (self *GetVideoViewerCountReq) ResetDefault() {
}

func (self *GetVideoViewerCountReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetVideoViewerCountReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetVideoViewerCountRsp struct {
	iViewerCount int32
}

func (self *GetVideoViewerCountRsp) ResetDefault() {
}

func (self *GetVideoViewerCountRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iViewerCount))
	if err != nil {
		return err
	}
	return err
}

func (self *GetVideoViewerCountRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iViewerCount), 0)
	if err != nil {
		return err
	}
	return err
}

type GetVideoInfoReq struct {
	tId  UserId
	lVid int64
}

func (self *GetVideoInfoReq) ResetDefault() {
}

func (self *GetVideoInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lVid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetVideoInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lVid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetVideoInfoRsp struct {
	tInfo            VideoInfo
	iCanBeSubscribed int32
	iSubscribeStatus int32
}

func (self *GetVideoInfoRsp) ResetDefault() {
}

func (self *GetVideoInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCanBeSubscribed))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iSubscribeStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *GetVideoInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCanBeSubscribed), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubscribeStatus), 2)
	if err != nil {
		return err
	}
	return err
}

type GetRecommendedVideoFeedReq struct {
	tId UserId
}

func (self *GetRecommendedVideoFeedReq) ResetDefault() {
}

func (self *GetRecommendedVideoFeedReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecommendedVideoFeedReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetRecommendedVideoFeedRsp struct {
	vFeeds       []VideoInfo
	iViewerCount int32
}

func (self *GetRecommendedVideoFeedRsp) ResetDefault() {
}

func (self *GetRecommendedVideoFeedRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vFeeds))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iViewerCount))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecommendedVideoFeedRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vFeeds), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iViewerCount), 1)
	if err != nil {
		return err
	}
	return err
}

type GetRecommendedVideoListByUidReq struct {
	tId   UserId
	vUids []int64
}

func (self *GetRecommendedVideoListByUidReq) ResetDefault() {
}

func (self *GetRecommendedVideoListByUidReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecommendedVideoListByUidReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	return err
}

type GetRecommendedVideoListByUidRsp struct {
	vVideoLists [][]VideoInfo
}

func (self *GetRecommendedVideoListByUidRsp) ResetDefault() {
}

func (self *GetRecommendedVideoListByUidRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vVideoLists))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecommendedVideoListByUidRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vVideoLists), 0)
	if err != nil {
		return err
	}
	return err
}

type GetRecommendedVideoAuthorReq struct {
	tId   UserId
	vUids []int64
}

func (self *GetRecommendedVideoAuthorReq) ResetDefault() {
}

func (self *GetRecommendedVideoAuthorReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecommendedVideoAuthorReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	return err
}

type GetRecommendedVideoAuthorRsp struct {
	vUids []int64
}

func (self *GetRecommendedVideoAuthorRsp) ResetDefault() {
}

func (self *GetRecommendedVideoAuthorRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vUids))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecommendedVideoAuthorRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vUids), 0)
	if err != nil {
		return err
	}
	return err
}

type StartSpeedUpReq struct {
	tId UserId
}

func (self *StartSpeedUpReq) ResetDefault() {
}

func (self *StartSpeedUpReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *StartSpeedUpReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type StartSpeedUpRsp struct {
	sError string
}

func (self *StartSpeedUpRsp) ResetDefault() {
}

func (self *StartSpeedUpRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sError))
	if err != nil {
		return err
	}
	return err
}

func (self *StartSpeedUpRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sError), 0)
	if err != nil {
		return err
	}
	return err
}

type TelecomSpeedupNotice struct {
	lPresenterUid int64
	iResult       int32
	iRule         int32
	iStartTime    int32
	iEndTime      int32
	iUpRate       int32
	iDownRate     int32
}

func (self *TelecomSpeedupNotice) ResetDefault() {
}

func (self *TelecomSpeedupNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iResult))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iRule))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iUpRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iDownRate))
	if err != nil {
		return err
	}
	return err
}

func (self *TelecomSpeedupNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPresenterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iResult), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRule), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStartTime), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEndTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUpRate), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDownRate), 6)
	if err != nil {
		return err
	}
	return err
}

type MobilePushTokenInfo struct {
	lUid        int64
	sToken      string
	sIMei       string
	iType       int32
	sWayType    string
	sVersion    string
	dLon        float64
	dLat        float64
	sLocation   string
	sSysVersion string
}

func (self *MobilePushTokenInfo) ResetDefault() {
}

func (self *MobilePushTokenInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sToken))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sIMei))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sWayType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sVersion))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.dLon))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.dLat))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sLocation))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sSysVersion))
	if err != nil {
		return err
	}
	return err
}

func (self *MobilePushTokenInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sToken), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIMei), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWayType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVersion), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.dLon), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.dLat), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLocation), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSysVersion), 9)
	if err != nil {
		return err
	}
	return err
}

type UserLocation struct {
	dLon      float64
	dLat      float64
	sLocation string
}

func (self *UserLocation) ResetDefault() {
}

func (self *UserLocation) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.dLon))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.dLat))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sLocation))
	if err != nil {
		return err
	}
	return err
}

func (self *UserLocation) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.dLon), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.dLat), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLocation), 2)
	if err != nil {
		return err
	}
	return err
}

type setMobilePushTokenInfoReq struct {
	tId           UserId
	vToken        []byte
	sIMei         string
	tUserLocation UserLocation
	sSysVersion   string
}

func (self *setMobilePushTokenInfoReq) ResetDefault() {
}

func (self *setMobilePushTokenInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vToken))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sIMei))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.tUserLocation))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sSysVersion))
	if err != nil {
		return err
	}
	return err
}

func (self *setMobilePushTokenInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vToken), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIMei), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tUserLocation), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSysVersion), 4)
	if err != nil {
		return err
	}
	return err
}

type setMobilePushTokenInfoRsp struct {
	iRet     int32
	sMessage string
}

func (self *setMobilePushTokenInfoRsp) ResetDefault() {
}

func (self *setMobilePushTokenInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRet))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *setMobilePushTokenInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRet), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMessage), 1)
	if err != nil {
		return err
	}
	return err
}

type unbindMobilePushTokenReq struct {
	vToken []byte
}

func (self *unbindMobilePushTokenReq) ResetDefault() {
}

func (self *unbindMobilePushTokenReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vToken))
	if err != nil {
		return err
	}
	return err
}

func (self *unbindMobilePushTokenReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vToken), 0)
	if err != nil {
		return err
	}
	return err
}

type unbindMobilePushTokenRsp struct {
	iRet     int32
	sMessage string
}

func (self *unbindMobilePushTokenRsp) ResetDefault() {
}

func (self *unbindMobilePushTokenRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRet))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *unbindMobilePushTokenRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRet), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMessage), 1)
	if err != nil {
		return err
	}
	return err
}

type MGetActiveBarrageInfoReq struct {
	tId UserId
}

func (self *MGetActiveBarrageInfoReq) ResetDefault() {
}

func (self *MGetActiveBarrageInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *MGetActiveBarrageInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type MGetActiveBarrageInfoRsp struct {
	iLeftCount int32
}

func (self *MGetActiveBarrageInfoRsp) ResetDefault() {
}

func (self *MGetActiveBarrageInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iLeftCount))
	if err != nil {
		return err
	}
	return err
}

func (self *MGetActiveBarrageInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iLeftCount), 0)
	if err != nil {
		return err
	}
	return err
}

type MConsumeActiveBarrageReq struct {
	tId UserId
}

func (self *MConsumeActiveBarrageReq) ResetDefault() {
}

func (self *MConsumeActiveBarrageReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *MConsumeActiveBarrageReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type MConsumeActiveBarrageRsp struct {
	iLeftCount int32
}

func (self *MConsumeActiveBarrageRsp) ResetDefault() {
}

func (self *MConsumeActiveBarrageRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iLeftCount))
	if err != nil {
		return err
	}
	return err
}

func (self *MConsumeActiveBarrageRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iLeftCount), 0)
	if err != nil {
		return err
	}
	return err
}

type MGetActivityInfoReq struct {
	tId UserId
}

func (self *MGetActivityInfoReq) ResetDefault() {
}

func (self *MGetActivityInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *MGetActivityInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type MActivityConfig struct {
	iId         int32
	iType       int32
	iTargetType int32
	sTargetKey  string
	sIcon       string
	sActiveUrl  string
	iLoginLimit int32
	iBeginTime  int32
	iEndTime    int32
	sPlatform   string
	sVersion    string
	iShowTime   int32
}

func (self *MActivityConfig) ResetDefault() {
}

func (self *MActivityConfig) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTargetType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sTargetKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sActiveUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iLoginLimit))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iBeginTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sPlatform))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sVersion))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iShowTime))
	if err != nil {
		return err
	}
	return err
}

func (self *MActivityConfig) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTargetType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTargetKey), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIcon), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActiveUrl), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLoginLimit), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeginTime), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEndTime), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPlatform), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVersion), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShowTime), 11)
	if err != nil {
		return err
	}
	return err
}

type MGetActivityInfoRsp struct {
	vActivitys []MActivityConfig
}

func (self *MGetActivityInfoRsp) ResetDefault() {
}

func (self *MGetActivityInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vActivitys))
	if err != nil {
		return err
	}
	return err
}

func (self *MGetActivityInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vActivitys), 0)
	if err != nil {
		return err
	}
	return err
}

type MGetLiveH5ActivityReq struct {
	tId           UserId
	lPresenterUid int64
	lChannelId    int64
	lSubChannelId int64
}

func (self *MGetLiveH5ActivityReq) ResetDefault() {
}

func (self *MGetLiveH5ActivityReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	return err
}

func (self *MGetLiveH5ActivityReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 3)
	if err != nil {
		return err
	}
	return err
}

type MGetLiveH5ActivityRsp struct {
	sH5ActivityUrl string
}

func (self *MGetLiveH5ActivityRsp) ResetDefault() {
}

func (self *MGetLiveH5ActivityRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sH5ActivityUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *MGetLiveH5ActivityRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sH5ActivityUrl), 0)
	if err != nil {
		return err
	}
	return err
}

type WelcomeMsgNotice struct {
	lPresenterUid int64
	sWelcomeMsg   string
}

func (self *WelcomeMsgNotice) ResetDefault() {
}

func (self *WelcomeMsgNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sWelcomeMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *WelcomeMsgNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPresenterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWelcomeMsg), 1)
	if err != nil {
		return err
	}
	return err
}

type GetPraiseCountReq struct {
	tId  UserId
	lUid int64
}

func (self *GetPraiseCountReq) ResetDefault() {
}

func (self *GetPraiseCountReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPraiseCountReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetPraiseCountRsp struct {
	lUid                  int64
	iFreeCount            int32
	iPresenterPraiseCount int32
	iUsed                 int32
}

func (self *GetPraiseCountRsp) ResetDefault() {
}

func (self *GetPraiseCountRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iFreeCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPresenterPraiseCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iUsed))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPraiseCountRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFreeCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterPraiseCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUsed), 3)
	if err != nil {
		return err
	}
	return err
}

type ClickPraiseReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lUid          int64
}

func (self *ClickPraiseReq) ResetDefault() {
}

func (self *ClickPraiseReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *ClickPraiseReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	return err
}

type ClickPraiseRsp struct {
	iCode int32
	iUsed int32
}

func (self *ClickPraiseRsp) ResetDefault() {
}

func (self *ClickPraiseRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iUsed))
	if err != nil {
		return err
	}
	return err
}

func (self *ClickPraiseRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUsed), 1)
	if err != nil {
		return err
	}
	return err
}

type ClickPraiseNotice struct {
	lUid                  int64
	iPresenterPraiseCount int32
	vUserUids             []int64
}

func (self *ClickPraiseNotice) ResetDefault() {
}

func (self *ClickPraiseNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPresenterPraiseCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vUserUids))
	if err != nil {
		return err
	}
	return err
}

func (self *ClickPraiseNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterPraiseCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUserUids), 2)
	if err != nil {
		return err
	}
	return err
}

type SetVideoModeReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lPid          int64
	iVideoMode    int32
}

func (self *SetVideoModeReq) ResetDefault() {
}

func (self *SetVideoModeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iVideoMode))
	if err != nil {
		return err
	}
	return err
}

func (self *SetVideoModeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVideoMode), 4)
	if err != nil {
		return err
	}
	return err
}

type SetVideoModeRsp struct {
	sCode string
}

func (self *SetVideoModeRsp) ResetDefault() {
}

func (self *SetVideoModeRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sCode))
	if err != nil {
		return err
	}
	return err
}

func (self *SetVideoModeRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sCode), 0)
	if err != nil {
		return err
	}
	return err
}

type GetVideoModeReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lPid          int64
}

func (self *GetVideoModeReq) ResetDefault() {
}

func (self *GetVideoModeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetVideoModeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	return err
}

type GetVideoModeRsp struct {
	lPid       int64
	iVideoMode int32
}

func (self *GetVideoModeRsp) ResetDefault() {
}

func (self *GetVideoModeRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iVideoMode))
	if err != nil {
		return err
	}
	return err
}

func (self *GetVideoModeRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVideoMode), 1)
	if err != nil {
		return err
	}
	return err
}

type VideoModeNotice struct {
	lPid       int64
	iVideoMode int32
}

func (self *VideoModeNotice) ResetDefault() {
}

func (self *VideoModeNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iVideoMode))
	if err != nil {
		return err
	}
	return err
}

func (self *VideoModeNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVideoMode), 1)
	if err != nil {
		return err
	}
	return err
}

type SetStampReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lUid          int64
	lStampUid     int64
	iStampId      int32
	sSendContent  string
}

func (self *SetStampReq) ResetDefault() {
}

func (self *SetStampReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lStampUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iStampId))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sSendContent))
	if err != nil {
		return err
	}
	return err
}

func (self *SetStampReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStampUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStampId), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSendContent), 6)
	if err != nil {
		return err
	}
	return err
}

type SetStampRsp struct {
	iCode int32
}

func (self *SetStampRsp) ResetDefault() {
}

func (self *SetStampRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *SetStampRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type GetStampReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lUid          int64
}

func (self *GetStampReq) ResetDefault() {
}

func (self *GetStampReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetStampReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	return err
}

type GetStampRsp struct {
	lUid       int64
	lStampUid  int64
	sStampNick string
	lStampTime int64
	tStampInfo StampInfo
	lDeadline  int64
}

func (self *GetStampRsp) ResetDefault() {
}

func (self *GetStampRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lStampUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sStampNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lStampTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.tStampInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lDeadline))
	if err != nil {
		return err
	}
	return err
}

func (self *GetStampRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStampUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStampNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStampTime), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tStampInfo), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeadline), 5)
	if err != nil {
		return err
	}
	return err
}

type StampUserProfile struct {
	iRole       int32
	iNobleLevel int32
	iGuardLevel int32
	iGender     int32
	sNick       string
}

func (self *StampUserProfile) ResetDefault() {
}

func (self *StampUserProfile) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRole))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iGuardLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGender))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sNick))
	if err != nil {
		return err
	}
	return err
}

func (self *StampUserProfile) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRole), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGuardLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGender), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 4)
	if err != nil {
		return err
	}
	return err
}

type StampUserInChannelReq struct {
	tId               UserId
	lTopcid           int64
	lSubcid           int64
	tStampUserProfile StampUserProfile
}

func (self *StampUserInChannelReq) ResetDefault() {
}

func (self *StampUserInChannelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.tStampUserProfile))
	if err != nil {
		return err
	}
	return err
}

func (self *StampUserInChannelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopcid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubcid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tStampUserProfile), 3)
	if err != nil {
		return err
	}
	return err
}

type StampUserInChannelRsp struct {
	sCode string
}

func (self *StampUserInChannelRsp) ResetDefault() {
}

func (self *StampUserInChannelRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sCode))
	if err != nil {
		return err
	}
	return err
}

func (self *StampUserInChannelRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sCode), 0)
	if err != nil {
		return err
	}
	return err
}

type StampUserOutChannelReq struct {
	tId     UserId
	lTopcid int64
	lSubcid int64
}

func (self *StampUserOutChannelReq) ResetDefault() {
}

func (self *StampUserOutChannelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubcid))
	if err != nil {
		return err
	}
	return err
}

func (self *StampUserOutChannelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopcid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubcid), 2)
	if err != nil {
		return err
	}
	return err
}

type StampUserOutChannelRsp struct {
	sCode string
}

func (self *StampUserOutChannelRsp) ResetDefault() {
}

func (self *StampUserOutChannelRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sCode))
	if err != nil {
		return err
	}
	return err
}

func (self *StampUserOutChannelRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sCode), 0)
	if err != nil {
		return err
	}
	return err
}

type PrimaryTemplateStampUserInfo struct {
	lUid              int64
	lStampUid         int64
	sStampNick        string
	lStampTime        int64
	tStampInfo        StampInfo
	lDeadline         int64
	tStampUserProfile StampUserProfile
}

func (self *PrimaryTemplateStampUserInfo) ResetDefault() {
}

func (self *PrimaryTemplateStampUserInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lStampUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sStampNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lStampTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.tStampInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lDeadline))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.tStampUserProfile))
	if err != nil {
		return err
	}
	return err
}

func (self *PrimaryTemplateStampUserInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStampUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStampNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStampTime), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tStampInfo), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeadline), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tStampUserProfile), 6)
	if err != nil {
		return err
	}
	return err
}

type PrimaryTemplateStampUserInfoList struct {
	vUserStampInfoLists []PrimaryTemplateStampUserInfo
}

func (self *PrimaryTemplateStampUserInfoList) ResetDefault() {
}

func (self *PrimaryTemplateStampUserInfoList) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vUserStampInfoLists))
	if err != nil {
		return err
	}
	return err
}

func (self *PrimaryTemplateStampUserInfoList) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vUserStampInfoLists), 0)
	if err != nil {
		return err
	}
	return err
}

type GetHotFixInfoReq struct {
	tId      UserId
	sMd5     string
	iFixType int32
}

func (self *GetHotFixInfoReq) ResetDefault() {
}

func (self *GetHotFixInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMd5))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iFixType))
	if err != nil {
		return err
	}
	return err
}

func (self *GetHotFixInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFixType), 2)
	if err != nil {
		return err
	}
	return err
}

type HotFixInfo struct {
	iFixType int32
	sScript  string
}

func (self *HotFixInfo) ResetDefault() {
}

func (self *HotFixInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iFixType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sScript))
	if err != nil {
		return err
	}
	return err
}

func (self *HotFixInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iFixType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sScript), 1)
	if err != nil {
		return err
	}
	return err
}

type GetHotFixInfoRsp struct {
	sMd5    string
	sHotFix string
	iScene  int32
}

func (self *GetHotFixInfoRsp) ResetDefault() {
}

func (self *GetHotFixInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sMd5))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sHotFix))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iScene))
	if err != nil {
		return err
	}
	return err
}

func (self *GetHotFixInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sMd5), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHotFix), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScene), 2)
	if err != nil {
		return err
	}
	return err
}

type NotifyHotFixChangeReq struct {
	lOperUid int64
}

func (self *NotifyHotFixChangeReq) ResetDefault() {
}

func (self *NotifyHotFixChangeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lOperUid))
	if err != nil {
		return err
	}
	return err
}

func (self *NotifyHotFixChangeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lOperUid), 0)
	if err != nil {
		return err
	}
	return err
}

type MatchGambleMatchInfo struct {
	iMatchId      int32
	sMatchName    string
	iOrderWeight  int32
	iState        int32
	iBuyerNum     int32
	lWhitebeanNum int64
	lGreenbeanNum int64
}

func (self *MatchGambleMatchInfo) ResetDefault() {
}

func (self *MatchGambleMatchInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iMatchId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMatchName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iOrderWeight))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iState))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iBuyerNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lWhitebeanNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lGreenbeanNum))
	if err != nil {
		return err
	}
	return err
}

func (self *MatchGambleMatchInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iMatchId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMatchName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOrderWeight), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iState), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBuyerNum), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lWhitebeanNum), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGreenbeanNum), 6)
	if err != nil {
		return err
	}
	return err
}

type MatchGambleTeamInfo struct {
	iTeamId   int32
	iMatchId  int32
	sTeamName string
	sTeamPic  string
	lPUid     int64
	iWPShared int32
	iGPShared int32
}

func (self *MatchGambleTeamInfo) ResetDefault() {
}

func (self *MatchGambleTeamInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTeamId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMatchId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sTeamName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sTeamPic))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iWPShared))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iGPShared))
	if err != nil {
		return err
	}
	return err
}

func (self *MatchGambleTeamInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTeamId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMatchId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTeamName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTeamPic), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWPShared), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGPShared), 6)
	if err != nil {
		return err
	}
	return err
}

type MatchGambleTopicInfo struct {
	iTopicId      int32
	iMatchId      int32
	sTopicName    string
	iOrderWeight  int32
	iModel        int32
	iState        int32
	iBuyerNum     int32
	lWhitebeanNum int64
	lGreenbeanNum int64
}

func (self *MatchGambleTopicInfo) ResetDefault() {
}

func (self *MatchGambleTopicInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMatchId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sTopicName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iOrderWeight))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iModel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iState))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iBuyerNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lWhitebeanNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lGreenbeanNum))
	if err != nil {
		return err
	}
	return err
}

func (self *MatchGambleTopicInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTopicId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMatchId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTopicName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOrderWeight), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iModel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iState), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBuyerNum), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lWhitebeanNum), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGreenbeanNum), 8)
	if err != nil {
		return err
	}
	return err
}

type MatchGambleScheduleInfo struct {
	iScheduleId    int32
	iTopicId       int32
	iMatchId       int32
	sScheduleName  string
	iStarterType   int32
	lStarterUid    int64
	iOrderWeight   int32
	iStartTime     int32
	iState         int32
	iBuyerNum      int32
	iBeanType      int32
	lBeanNum       int64
	lStarterIncome int64
	iStarterShared int32
	lStartDeposit  int64
	lStarterAmount int64
}

func (self *MatchGambleScheduleInfo) ResetDefault() {
}

func (self *MatchGambleScheduleInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iScheduleId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iMatchId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sScheduleName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iStarterType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lStarterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iOrderWeight))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iState))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iBuyerNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.lBeanNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.lStarterIncome))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iStarterShared))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.lStartDeposit))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.lStarterAmount))
	if err != nil {
		return err
	}
	return err
}

func (self *MatchGambleScheduleInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iScheduleId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTopicId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMatchId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sScheduleName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStarterType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStarterUid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOrderWeight), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStartTime), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iState), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBuyerNum), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBeanNum), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStarterIncome), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStarterShared), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartDeposit), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStarterAmount), 15)
	if err != nil {
		return err
	}
	return err
}

type MatchGambleScheduleUnitInfo struct {
	iUnitId     int32
	iScheduleId int32
	iTeamId     int32
	sUnitName   string
	iTeamType   int32
	iWinRate    int32
	iOddsFactor int32
	iOdds       int32
	lPoolNum    int64
	iWinFlag    int32
	iBeanType   int32
	lBeanNum    int64
	iState      int32
}

func (self *MatchGambleScheduleUnitInfo) ResetDefault() {
}

func (self *MatchGambleScheduleUnitInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iScheduleId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTeamId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sUnitName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iTeamType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iWinRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iOddsFactor))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iOdds))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lPoolNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iWinFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.lBeanNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iState))
	if err != nil {
		return err
	}
	return err
}

func (self *MatchGambleScheduleUnitInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iUnitId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScheduleId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTeamId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUnitName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTeamType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinRate), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOddsFactor), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOdds), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPoolNum), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinFlag), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBeanNum), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iState), 12)
	if err != nil {
		return err
	}
	return err
}

type MatchGambleTransactionInfo struct {
	iTransId    int32
	lBuyerUid   int64
	iUnitId     int32
	iScheduleId int32
	iTeamId     int32
	iTransTime  int32
	iBeanType   int32
	iBuyType    int32
	lBuyNum     int64
	iWinFlag    int32
	lWinNum     int64
	iMatchId    int32
	iTopicId    int32
}

func (self *MatchGambleTransactionInfo) ResetDefault() {
}

func (self *MatchGambleTransactionInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTransId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lBuyerUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iScheduleId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iTeamId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iTransTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iBuyType))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lBuyNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iWinFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.lWinNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iMatchId))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	return err
}

func (self *MatchGambleTransactionInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTransId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBuyerUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScheduleId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTeamId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTransTime), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBuyType), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBuyNum), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinFlag), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lWinNum), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMatchId), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTopicId), 12)
	if err != nil {
		return err
	}
	return err
}

type AddMatchGambleMatchReq struct {
	tId        UserId
	tMatchInfo MatchGambleMatchInfo
}

func (self *AddMatchGambleMatchReq) ResetDefault() {
}

func (self *AddMatchGambleMatchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tMatchInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *AddMatchGambleMatchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tMatchInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type AddMatchGambleMatchRsp struct {
	iMatchId int32
}

func (self *AddMatchGambleMatchRsp) ResetDefault() {
}

func (self *AddMatchGambleMatchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iMatchId))
	if err != nil {
		return err
	}
	return err
}

func (self *AddMatchGambleMatchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iMatchId), 0)
	if err != nil {
		return err
	}
	return err
}

type UpdateMatchGambleMatchReq struct {
	tId        UserId
	tMatchInfo MatchGambleMatchInfo
}

func (self *UpdateMatchGambleMatchReq) ResetDefault() {
}

func (self *UpdateMatchGambleMatchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tMatchInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateMatchGambleMatchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tMatchInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdateMatchGambleMatchRsp struct {
	iMatchId int32
}

func (self *UpdateMatchGambleMatchRsp) ResetDefault() {
}

func (self *UpdateMatchGambleMatchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iMatchId))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateMatchGambleMatchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iMatchId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleMatchListReq struct {
	tId        UserId
	tMatchInfo MatchGambleMatchInfo
}

func (self *GetMatchGambleMatchListReq) ResetDefault() {
}

func (self *GetMatchGambleMatchListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tMatchInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleMatchListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tMatchInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleMatchListRsp struct {
	vMatchInfos []MatchGambleMatchInfo
}

func (self *GetMatchGambleMatchListRsp) ResetDefault() {
}

func (self *GetMatchGambleMatchListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vMatchInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleMatchListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vMatchInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type LineMatchGambleMatchReq struct {
	tId        UserId
	tMatchInfo MatchGambleMatchInfo
}

func (self *LineMatchGambleMatchReq) ResetDefault() {
}

func (self *LineMatchGambleMatchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tMatchInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *LineMatchGambleMatchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tMatchInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type LineMatchGambleMatchRsp struct {
	iMatchId int32
}

func (self *LineMatchGambleMatchRsp) ResetDefault() {
}

func (self *LineMatchGambleMatchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iMatchId))
	if err != nil {
		return err
	}
	return err
}

func (self *LineMatchGambleMatchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iMatchId), 0)
	if err != nil {
		return err
	}
	return err
}

type AddMatchGambleTeamReq struct {
	tId       UserId
	tTeamInfo MatchGambleTeamInfo
}

func (self *AddMatchGambleTeamReq) ResetDefault() {
}

func (self *AddMatchGambleTeamReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTeamInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *AddMatchGambleTeamReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTeamInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type AddMatchGambleTeamRsp struct {
	iTeamId int32
}

func (self *AddMatchGambleTeamRsp) ResetDefault() {
}

func (self *AddMatchGambleTeamRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTeamId))
	if err != nil {
		return err
	}
	return err
}

func (self *AddMatchGambleTeamRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTeamId), 0)
	if err != nil {
		return err
	}
	return err
}

type UpdateMatchGambleTeamReq struct {
	tId       UserId
	tTeamInfo MatchGambleTeamInfo
}

func (self *UpdateMatchGambleTeamReq) ResetDefault() {
}

func (self *UpdateMatchGambleTeamReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTeamInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateMatchGambleTeamReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTeamInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdateMatchGambleTeamRsp struct {
	iTeamId int32
}

func (self *UpdateMatchGambleTeamRsp) ResetDefault() {
}

func (self *UpdateMatchGambleTeamRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTeamId))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateMatchGambleTeamRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTeamId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleTeamListReq struct {
	tId       UserId
	tTeamInfo MatchGambleTeamInfo
}

func (self *GetMatchGambleTeamListReq) ResetDefault() {
}

func (self *GetMatchGambleTeamListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTeamInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleTeamListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTeamInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleTeamListRsp struct {
	vTeamInfos []MatchGambleTeamInfo
}

func (self *GetMatchGambleTeamListRsp) ResetDefault() {
}

func (self *GetMatchGambleTeamListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vTeamInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleTeamListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vTeamInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type LineMatchGambleTeamReq struct {
	tId       UserId
	tTeamInfo MatchGambleTeamInfo
}

func (self *LineMatchGambleTeamReq) ResetDefault() {
}

func (self *LineMatchGambleTeamReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTeamInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *LineMatchGambleTeamReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTeamInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type LineMatchGambleTeamRsp struct {
	iTeamId int32
}

func (self *LineMatchGambleTeamRsp) ResetDefault() {
}

func (self *LineMatchGambleTeamRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTeamId))
	if err != nil {
		return err
	}
	return err
}

func (self *LineMatchGambleTeamRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTeamId), 0)
	if err != nil {
		return err
	}
	return err
}

type AddMatchGambleScheduleReq struct {
	tId           UserId
	tScheduleInfo MatchGambleScheduleInfo
}

func (self *AddMatchGambleScheduleReq) ResetDefault() {
}

func (self *AddMatchGambleScheduleReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tScheduleInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *AddMatchGambleScheduleReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tScheduleInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type AddMatchGambleScheduleRsp struct {
	iScheduleId int32
}

func (self *AddMatchGambleScheduleRsp) ResetDefault() {
}

func (self *AddMatchGambleScheduleRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iScheduleId))
	if err != nil {
		return err
	}
	return err
}

func (self *AddMatchGambleScheduleRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iScheduleId), 0)
	if err != nil {
		return err
	}
	return err
}

type UpdateMatchGambleScheduleReq struct {
	tId           UserId
	tScheduleInfo MatchGambleScheduleInfo
}

func (self *UpdateMatchGambleScheduleReq) ResetDefault() {
}

func (self *UpdateMatchGambleScheduleReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tScheduleInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateMatchGambleScheduleReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tScheduleInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdateMatchGambleScheduleRsp struct {
	iScheduleId int32
}

func (self *UpdateMatchGambleScheduleRsp) ResetDefault() {
}

func (self *UpdateMatchGambleScheduleRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iScheduleId))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateMatchGambleScheduleRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iScheduleId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleScheduleListReq struct {
	tId           UserId
	tScheduleInfo MatchGambleScheduleInfo
}

func (self *GetMatchGambleScheduleListReq) ResetDefault() {
}

func (self *GetMatchGambleScheduleListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tScheduleInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleScheduleListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tScheduleInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleScheduleListRsp struct {
	vScheduleInfos []MatchGambleScheduleInfo
}

func (self *GetMatchGambleScheduleListRsp) ResetDefault() {
}

func (self *GetMatchGambleScheduleListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vScheduleInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleScheduleListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vScheduleInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type LineMatchGambleScheduleReq struct {
	tId           UserId
	tScheduleInfo MatchGambleScheduleInfo
	vUnitIds      []int32
}

func (self *LineMatchGambleScheduleReq) ResetDefault() {
}

func (self *LineMatchGambleScheduleReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tScheduleInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vUnitIds))
	if err != nil {
		return err
	}
	return err
}

func (self *LineMatchGambleScheduleReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tScheduleInfo), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUnitIds), 2)
	if err != nil {
		return err
	}
	return err
}

type LineMatchGambleScheduleRsp struct {
	iScheduleId int32
}

func (self *LineMatchGambleScheduleRsp) ResetDefault() {
}

func (self *LineMatchGambleScheduleRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iScheduleId))
	if err != nil {
		return err
	}
	return err
}

func (self *LineMatchGambleScheduleRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iScheduleId), 0)
	if err != nil {
		return err
	}
	return err
}

type AddMatchGambleScheduleUnitReq struct {
	tId               UserId
	tScheduleUnitInfo MatchGambleScheduleUnitInfo
}

func (self *AddMatchGambleScheduleUnitReq) ResetDefault() {
}

func (self *AddMatchGambleScheduleUnitReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tScheduleUnitInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *AddMatchGambleScheduleUnitReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tScheduleUnitInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type AddMatchGambleScheduleUnitRsp struct {
	iScheduleUnitId int32
}

func (self *AddMatchGambleScheduleUnitRsp) ResetDefault() {
}

func (self *AddMatchGambleScheduleUnitRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iScheduleUnitId))
	if err != nil {
		return err
	}
	return err
}

func (self *AddMatchGambleScheduleUnitRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iScheduleUnitId), 0)
	if err != nil {
		return err
	}
	return err
}

type UpdateMatchGambleScheduleUnitReq struct {
	tId               UserId
	tScheduleUnitInfo MatchGambleScheduleUnitInfo
}

func (self *UpdateMatchGambleScheduleUnitReq) ResetDefault() {
}

func (self *UpdateMatchGambleScheduleUnitReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tScheduleUnitInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateMatchGambleScheduleUnitReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tScheduleUnitInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdateMatchGambleScheduleUnitRsp struct {
	iScheduleUnitId int32
}

func (self *UpdateMatchGambleScheduleUnitRsp) ResetDefault() {
}

func (self *UpdateMatchGambleScheduleUnitRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iScheduleUnitId))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateMatchGambleScheduleUnitRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iScheduleUnitId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleScheduleUnitListReq struct {
	tId               UserId
	tScheduleUnitInfo MatchGambleScheduleUnitInfo
}

func (self *GetMatchGambleScheduleUnitListReq) ResetDefault() {
}

func (self *GetMatchGambleScheduleUnitListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tScheduleUnitInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleScheduleUnitListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tScheduleUnitInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleScheduleUnitListRsp struct {
	vScheduleUnitInfos []MatchGambleScheduleUnitInfo
}

func (self *GetMatchGambleScheduleUnitListRsp) ResetDefault() {
}

func (self *GetMatchGambleScheduleUnitListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vScheduleUnitInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleScheduleUnitListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vScheduleUnitInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type LineMatchGambleScheduleUnitReq struct {
	tId               UserId
	tScheduleUnitInfo MatchGambleScheduleUnitInfo
}

func (self *LineMatchGambleScheduleUnitReq) ResetDefault() {
}

func (self *LineMatchGambleScheduleUnitReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tScheduleUnitInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *LineMatchGambleScheduleUnitReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tScheduleUnitInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type LineMatchGambleScheduleUnitRsp struct {
	iScheduleUnitId int32
}

func (self *LineMatchGambleScheduleUnitRsp) ResetDefault() {
}

func (self *LineMatchGambleScheduleUnitRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iScheduleUnitId))
	if err != nil {
		return err
	}
	return err
}

func (self *LineMatchGambleScheduleUnitRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iScheduleUnitId), 0)
	if err != nil {
		return err
	}
	return err
}

type AddMatchGambleTopicReq struct {
	tId        UserId
	tTopicInfo MatchGambleTopicInfo
}

func (self *AddMatchGambleTopicReq) ResetDefault() {
}

func (self *AddMatchGambleTopicReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTopicInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *AddMatchGambleTopicReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTopicInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type AddMatchGambleTopicRsp struct {
	iTopicId int32
}

func (self *AddMatchGambleTopicRsp) ResetDefault() {
}

func (self *AddMatchGambleTopicRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	return err
}

func (self *AddMatchGambleTopicRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTopicId), 0)
	if err != nil {
		return err
	}
	return err
}

type UpdateMatchGambleTopicReq struct {
	tId        UserId
	tTopicInfo MatchGambleTopicInfo
}

func (self *UpdateMatchGambleTopicReq) ResetDefault() {
}

func (self *UpdateMatchGambleTopicReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTopicInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateMatchGambleTopicReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTopicInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type UpdateMatchGambleTopicRsp struct {
	iTopicId int32
}

func (self *UpdateMatchGambleTopicRsp) ResetDefault() {
}

func (self *UpdateMatchGambleTopicRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateMatchGambleTopicRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTopicId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleTopicListReq struct {
	tId        UserId
	tTopicInfo MatchGambleTopicInfo
}

func (self *GetMatchGambleTopicListReq) ResetDefault() {
}

func (self *GetMatchGambleTopicListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTopicInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleTopicListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTopicInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleTopicListRsp struct {
	vTopicInfos []MatchGambleTopicInfo
}

func (self *GetMatchGambleTopicListRsp) ResetDefault() {
}

func (self *GetMatchGambleTopicListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vTopicInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleTopicListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vTopicInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type LineMatchGambleTopicReq struct {
	tId        UserId
	tTopicInfo MatchGambleTopicInfo
}

func (self *LineMatchGambleTopicReq) ResetDefault() {
}

func (self *LineMatchGambleTopicReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTopicInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *LineMatchGambleTopicReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTopicInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type LineMatchGambleTopicRsp struct {
	iTopicId int32
}

func (self *LineMatchGambleTopicRsp) ResetDefault() {
}

func (self *LineMatchGambleTopicRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	return err
}

func (self *LineMatchGambleTopicRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTopicId), 0)
	if err != nil {
		return err
	}
	return err
}

type BuyMatchGambleTransReq struct {
	tId              UserId
	tTransactionInfo MatchGambleTransactionInfo
}

func (self *BuyMatchGambleTransReq) ResetDefault() {
}

func (self *BuyMatchGambleTransReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tTransactionInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *BuyMatchGambleTransReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTransactionInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type BuyMatchGambleTransRsp struct {
	iUnitId int32
	iOdds   int32
}

func (self *BuyMatchGambleTransRsp) ResetDefault() {
}

func (self *BuyMatchGambleTransRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iOdds))
	if err != nil {
		return err
	}
	return err
}

func (self *BuyMatchGambleTransRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iUnitId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOdds), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleCheerTeamReq struct {
	tId    UserId
	vInfos []int32
}

func (self *GetMatchGambleCheerTeamReq) ResetDefault() {
}

func (self *GetMatchGambleCheerTeamReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleCheerTeamReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vInfos), 1)
	if err != nil {
		return err
	}
	return err
}

type CheerBuyerInfo struct {
	iUnitId   int32
	mUidCount map[int64]int64
	iBuyerNum int32
}

func (self *CheerBuyerInfo) ResetDefault() {
}

func (self *CheerBuyerInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.mUidCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBuyerNum))
	if err != nil {
		return err
	}
	return err
}

func (self *CheerBuyerInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iUnitId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mUidCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBuyerNum), 2)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleCheerTeamRsp struct {
	vInfos []CheerBuyerInfo
}

func (self *GetMatchGambleCheerTeamRsp) ResetDefault() {
}

func (self *GetMatchGambleCheerTeamRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleCheerTeamRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleMyTransInfoReq struct {
	tId    UserId
	vUnits []SIdTIdInfo
}

func (self *GetMatchGambleMyTransInfoReq) ResetDefault() {
}

func (self *GetMatchGambleMyTransInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUnits))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleMyTransInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUnits), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleMyTransInfoRsp struct {
	vTransactionInfo []MyTransInfoInfo
}

func (self *GetMatchGambleMyTransInfoRsp) ResetDefault() {
}

func (self *GetMatchGambleMyTransInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vTransactionInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleMyTransInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vTransactionInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleTopPopTeamReq struct {
	tId      UserId
	iTopicId int32
}

func (self *GetMatchGambleTopPopTeamReq) ResetDefault() {
}

func (self *GetMatchGambleTopPopTeamReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleTopPopTeamReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTopicId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleTopPopTeamRsp struct {
	tTeamInfo MatchGambleTeamInfo
	iMembers  int32
}

func (self *GetMatchGambleTopPopTeamRsp) ResetDefault() {
}

func (self *GetMatchGambleTopPopTeamRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tTeamInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMembers))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleTopPopTeamRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tTeamInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMembers), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleTopBeanTeamReq struct {
	tId      UserId
	iTopicId int32
}

func (self *GetMatchGambleTopBeanTeamReq) ResetDefault() {
}

func (self *GetMatchGambleTopBeanTeamReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleTopBeanTeamReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTopicId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleTopBeanTeamRsp struct {
	tTeamInfo MatchGambleTeamInfo
	iBeanType int32
	lBeanNum  int64
}

func (self *GetMatchGambleTopBeanTeamRsp) ResetDefault() {
}

func (self *GetMatchGambleTopBeanTeamRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tTeamInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lBeanNum))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleTopBeanTeamRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tTeamInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBeanNum), 2)
	if err != nil {
		return err
	}
	return err
}

type UserBuyInfo struct {
	lBuyerUid int64
	iBuyNum   int32
}

func (self *UserBuyInfo) ResetDefault() {
}

func (self *UserBuyInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lBuyerUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBuyNum))
	if err != nil {
		return err
	}
	return err
}

func (self *UserBuyInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lBuyerUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBuyNum), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleTopBuyInfoReq struct {
	tId      UserId
	iTopicId int32
}

func (self *GetMatchGambleTopBuyInfoReq) ResetDefault() {
}

func (self *GetMatchGambleTopBuyInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleTopBuyInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTopicId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMatchGambleTopBuyInfoRsp struct {
	vGreenBeanBuyInfoList []UserBuyInfo
	vWhiteBeanBuyInfoList []UserBuyInfo
}

func (self *GetMatchGambleTopBuyInfoRsp) ResetDefault() {
}

func (self *GetMatchGambleTopBuyInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGreenBeanBuyInfoList))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vWhiteBeanBuyInfoList))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMatchGambleTopBuyInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGreenBeanBuyInfoList), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vWhiteBeanBuyInfoList), 1)
	if err != nil {
		return err
	}
	return err
}

type PanelTopicInfo struct {
	iTopicId   int32
	sTopicName string
}

func (self *PanelTopicInfo) ResetDefault() {
}

func (self *PanelTopicInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sTopicName))
	if err != nil {
		return err
	}
	return err
}

func (self *PanelTopicInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTopicId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTopicName), 2)
	if err != nil {
		return err
	}
	return err
}

type TopicListNotice struct {
	vTopicInfoList []PanelTopicInfo
	iMatchId       int32
	sMatchName     string
}

func (self *TopicListNotice) ResetDefault() {
}

func (self *TopicListNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vTopicInfoList))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMatchId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sMatchName))
	if err != nil {
		return err
	}
	return err
}

func (self *TopicListNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vTopicInfoList), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMatchId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMatchName), 2)
	if err != nil {
		return err
	}
	return err
}

type SyncReq struct {
	sSrcId    string
	sFuncName string
	lTid      int64
	lSid      int64
	lUid      int64
	sReserved string
}

func (self *SyncReq) ResetDefault() {
}

func (self *SyncReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sSrcId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sFuncName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sReserved))
	if err != nil {
		return err
	}
	return err
}

func (self *SyncReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sSrcId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sFuncName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sReserved), 5)
	if err != nil {
		return err
	}
	return err
}

type FansInfo struct {
	lUid        int64
	lBadgeId    int64
	iBadgeLevel int32
	iScore      int32
}

func (self *FansInfo) ResetDefault() {
}

func (self *FansInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lBadgeId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBadgeLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iScore))
	if err != nil {
		return err
	}
	return err
}

func (self *FansInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBadgeId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBadgeLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScore), 3)
	if err != nil {
		return err
	}
	return err
}

type GuardInfo struct {
	lUid        int64
	lPid        int64
	iGuardLevel int32
	lEndTime    int64
}

func (self *GuardInfo) ResetDefault() {
}

func (self *GuardInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iGuardLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lEndTime))
	if err != nil {
		return err
	}
	return err
}

func (self *GuardInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGuardLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTime), 3)
	if err != nil {
		return err
	}
	return err
}

type VipListReq struct {
	tUserId UserId
	lTid    int64
	lSid    int64
	iStart  int32
	iCount  int32
	lPid    int64
}

func (self *VipListReq) ResetDefault() {
}

func (self *VipListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iStart))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *VipListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStart), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 5)
	if err != nil {
		return err
	}
	return err
}

type VipBarItem struct {
	lUid             int64
	iTypes           int32
	tNobleInfo       NobleInfo
	tGuardInfo       GuardInfo
	tFansInfo        FansInfo
	sNickName        string
	iSuperPupleLevel int32
	iPotentialTypes  int32
	sLogo            string
	lExpiredTS       int64
}

func (self *VipBarItem) ResetDefault() {
}

func (self *VipBarItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTypes))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tNobleInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.tGuardInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.tFansInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iSuperPupleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iPotentialTypes))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sLogo))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.lExpiredTS))
	if err != nil {
		return err
	}
	return err
}

func (self *VipBarItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTypes), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tNobleInfo), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tGuardInfo), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFansInfo), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSuperPupleLevel), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPotentialTypes), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogo), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lExpiredTS), 9)
	if err != nil {
		return err
	}
	return err
}

type VipBarListRsp struct {
	iStart              int32
	iCount              int32
	iTotal              int32
	vVipBarItem         []VipBarItem
	sBadgeName          string
	iChangedHighestRank int32
	lPid                int64
}

func (self *VipBarListRsp) ResetDefault() {
}

func (self *VipBarListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.iStart))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTotal))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vVipBarItem))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sBadgeName))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iChangedHighestRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *VipBarListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStart), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotal), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vVipBarItem), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBadgeName), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChangedHighestRank), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 7)
	if err != nil {
		return err
	}
	return err
}

type VipCardReq struct {
	tUserId UserId
	lTid    int64
	lSid    int64
	lPid    int64
	lUid    int64
}

func (self *VipCardReq) ResetDefault() {
}

func (self *VipCardReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *VipCardReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	return err
}

type FansInfoEx struct {
	lUid        int64
	lBadgeId    int64
	sBadgeName  string
	iBadgeLevel int32
	iScore      int32
}

func (self *FansInfoEx) ResetDefault() {
}

func (self *FansInfoEx) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lBadgeId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sBadgeName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBadgeLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iScore))
	if err != nil {
		return err
	}
	return err
}

func (self *FansInfoEx) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBadgeId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBadgeName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBadgeLevel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScore), 4)
	if err != nil {
		return err
	}
	return err
}

type VipCardRsp struct {
	lUid       int64
	sNickName  string
	tNobleInfo NobleInfo
	tGuardInfo GuardInfo
	tFansInfo  FansInfoEx
	sLogoURL   string
}

func (self *VipCardRsp) ResetDefault() {
}

func (self *VipCardRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tNobleInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.tGuardInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.tFansInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sLogoURL))
	if err != nil {
		return err
	}
	return err
}

func (self *VipCardRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tNobleInfo), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tGuardInfo), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFansInfo), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL), 5)
	if err != nil {
		return err
	}
	return err
}

type WeekRankEnterBanner struct {
	lUid      int64
	sNickName string
	iRank     int32
	lPid      int64
}

func (self *WeekRankEnterBanner) ResetDefault() {
}

func (self *WeekRankEnterBanner) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *WeekRankEnterBanner) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRank), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	return err
}

type WeekRankChangeBanner struct {
	lPid        int64
	lUid        int64
	iRank       int32
	sNickName   string
	sLogoURL    string
	iNobleLevel int32
}

func (self *WeekRankChangeBanner) ResetDefault() {
}

func (self *WeekRankChangeBanner) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sLogoURL))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *WeekRankChangeBanner) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRank), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 5)
	if err != nil {
		return err
	}
	return err
}

type WeekRankInfo struct {
	lUid  int64
	iRank int32
}

func (self *WeekRankInfo) ResetDefault() {
}

func (self *WeekRankInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iRank))
	if err != nil {
		return err
	}
	return err
}

func (self *WeekRankInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRank), 1)
	if err != nil {
		return err
	}
	return err
}

type VipEnterBanner struct {
	lUid          int64
	sNickName     string
	lPid          int64
	tNobleInfo    NobleInfo
	tGuardInfo    GuardInfo
	tWeekRankInfo WeekRankInfo
	sLogoURL      string
}

func (self *VipEnterBanner) ResetDefault() {
}

func (self *VipEnterBanner) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.tNobleInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.tGuardInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.tWeekRankInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sLogoURL))
	if err != nil {
		return err
	}
	return err
}

func (self *VipEnterBanner) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tNobleInfo), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tGuardInfo), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tWeekRankInfo), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL), 6)
	if err != nil {
		return err
	}
	return err
}

type EnterPushInfo struct {
	tNobleInfo NobleInfo
}

func (self *EnterPushInfo) ResetDefault() {
}

func (self *EnterPushInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.tNobleInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *EnterPushInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tNobleInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type VipInfoChangedReq struct {
	iVipType int32
	lUid     int64
	lTid     int64
	lSid     int64
}

func (self *VipInfoChangedReq) ResetDefault() {
}

func (self *VipInfoChangedReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iVipType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *VipInfoChangedReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iVipType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 3)
	if err != nil {
		return err
	}
	return err
}

type WeekRankItem struct {
	lUid        int64
	sNickName   string
	iScore      int32
	iGuardLevel int32
	iNobleLevel int32
	sLogo       string
}

func (self *WeekRankItem) ResetDefault() {
}

func (self *WeekRankItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iScore))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGuardLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sLogo))
	if err != nil {
		return err
	}
	return err
}

func (self *WeekRankItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScore), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGuardLevel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogo), 5)
	if err != nil {
		return err
	}
	return err
}

type WeekRankListReq struct {
	tUserId UserId
	lTid    int64
	lSid    int64
	lPid    int64
}

func (self *WeekRankListReq) ResetDefault() {
}

func (self *WeekRankListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *WeekRankListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	return err
}

type WeekRankListRsp struct {
	vWeekRankItem []WeekRankItem
	iStart        int32
	iCount        int32
	iTotal        int32
	lPid          int64
}

func (self *WeekRankListRsp) ResetDefault() {
}

func (self *WeekRankListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vWeekRankItem))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iStart))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTotal))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *WeekRankListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vWeekRankItem), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStart), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotal), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 4)
	if err != nil {
		return err
	}
	return err
}

type GameAdvertisement struct {
	sGameUrl      string
	sPCLogoUrl    string
	iPCLogoHeight int32
	sGameAdName   string
	iStatus       int32
	sWebLogoUrl   string
	lID           int64
	sActivityName string
	sAppLogoUrl   string
}

func (self *GameAdvertisement) ResetDefault() {
}

func (self *GameAdvertisement) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sGameUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sPCLogoUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPCLogoHeight))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sGameAdName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sWebLogoUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lID))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sActivityName))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sAppLogoUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *GameAdvertisement) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sGameUrl), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPCLogoUrl), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPCLogoHeight), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameAdName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWebLogoUrl), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lID), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActivityName), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAppLogoUrl), 8)
	if err != nil {
		return err
	}
	return err
}

type AdvertisementConfig struct {
	tBaseInfo    GameAdvertisement
	lStartTS     int64
	lEndTS       int64
	vIncludedPid []int64
	vExcludedPid []int64
	vIncludedTid []int64
	vExcludedTid []int64
	vIncludedSid []int64
	vExcludedSid []int64
}

func (self *AdvertisementConfig) ResetDefault() {
}

func (self *AdvertisementConfig) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tBaseInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lStartTS))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lEndTS))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vIncludedPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vExcludedPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vIncludedTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.vExcludedTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.vIncludedSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.vExcludedSid))
	if err != nil {
		return err
	}
	return err
}

func (self *AdvertisementConfig) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tBaseInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTS), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTS), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vIncludedPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vExcludedPid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vIncludedTid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vExcludedTid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vIncludedSid), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vExcludedSid), 8)
	if err != nil {
		return err
	}
	return err
}

type AdvertisementListRsp struct {
	vInfoList []AdvertisementConfig
	iRet      int32
}

func (self *AdvertisementListRsp) ResetDefault() {
}

func (self *AdvertisementListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vInfoList))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iRet))
	if err != nil {
		return err
	}
	return err
}

func (self *AdvertisementListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vInfoList), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRet), 1)
	if err != nil {
		return err
	}
	return err
}

type AdvertisementRsp struct {
	iRet int32
}

func (self *AdvertisementRsp) ResetDefault() {
}

func (self *AdvertisementRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRet))
	if err != nil {
		return err
	}
	return err
}

func (self *AdvertisementRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRet), 0)
	if err != nil {
		return err
	}
	return err
}

type AdvanceUserEnterNotice struct {
	lUid        int64
	sNickName   string
	iWeekRank   int32
	iGuardLevel int32
}

func (self *AdvanceUserEnterNotice) ResetDefault() {
}

func (self *AdvanceUserEnterNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iWeekRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGuardLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *AdvanceUserEnterNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeekRank), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGuardLevel), 3)
	if err != nil {
		return err
	}
	return err
}

type FansRankListReq struct {
	tUserId UserId
	lPid    int64
}

func (self *FansRankListReq) ResetDefault() {
}

func (self *FansRankListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *FansRankListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 1)
	if err != nil {
		return err
	}
	return err
}

type FansRankItem struct {
	lUid      int64
	sNickName string
	iScore    int32
	iLevel    int32
}

func (self *FansRankItem) ResetDefault() {
}

func (self *FansRankItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iScore))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *FansRankItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScore), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 3)
	if err != nil {
		return err
	}
	return err
}

type FansRankListRsp struct {
	lBadgeId      int64
	sBadgeName    string
	vFansRankItem []FansRankItem
}

func (self *FansRankListRsp) ResetDefault() {
}

func (self *FansRankListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lBadgeId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sBadgeName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vFansRankItem))
	if err != nil {
		return err
	}
	return err
}

func (self *FansRankListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lBadgeId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBadgeName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vFansRankItem), 2)
	if err != nil {
		return err
	}
	return err
}

type BadgeReq struct {
	tUserId  UserId
	lBadgeId int64
}

func (self *BadgeReq) ResetDefault() {
}

func (self *BadgeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lBadgeId))
	if err != nil {
		return err
	}
	return err
}

func (self *BadgeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBadgeId), 1)
	if err != nil {
		return err
	}
	return err
}

type BadgeInfo struct {
	lUid               int64
	lBadgeId           int64
	sPresenterNickName string
	sBadgeName         string
	iBadgeLevel        int32
	iRank              int32
	iScore             int32
	iNextScore         int32
	iQuotaUsed         int32
	iQuota             int32
	lQuotaTS           int64
}

func (self *BadgeInfo) ResetDefault() {
}

func (self *BadgeInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lBadgeId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sPresenterNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sBadgeName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iBadgeLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iScore))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iNextScore))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iQuotaUsed))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iQuota))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.lQuotaTS))
	if err != nil {
		return err
	}
	return err
}

func (self *BadgeInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBadgeId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterNickName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBadgeName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBadgeLevel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRank), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScore), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNextScore), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iQuotaUsed), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iQuota), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lQuotaTS), 10)
	if err != nil {
		return err
	}
	return err
}

type InfoChanged struct {
	iType  int32
	iValue int32
}

func (self *InfoChanged) ResetDefault() {
}

func (self *InfoChanged) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iValue))
	if err != nil {
		return err
	}
	return err
}

func (self *InfoChanged) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iValue), 1)
	if err != nil {
		return err
	}
	return err
}

type BadgeScoreChanged struct {
	iScoreChanged        int32
	iBadgeLevelChanged   int32
	iOverBadgeCountLimit int32
	tBadgeInfo           BadgeInfo
}

func (self *BadgeScoreChanged) ResetDefault() {
}

func (self *BadgeScoreChanged) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iScoreChanged))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBadgeLevelChanged))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iOverBadgeCountLimit))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.tBadgeInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *BadgeScoreChanged) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iScoreChanged), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBadgeLevelChanged), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOverBadgeCountLimit), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tBadgeInfo), 3)
	if err != nil {
		return err
	}
	return err
}

type FansTips struct {
	iType      int32
	tBadgeInfo BadgeInfo
}

func (self *FansTips) ResetDefault() {
}

func (self *FansTips) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tBadgeInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *FansTips) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tBadgeInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type FansInfoNotice struct {
	iFansLevel       int32
	iGreenPopUpCount int32
	tTips            FansTips
}

func (self *FansInfoNotice) ResetDefault() {
}

func (self *FansInfoNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iFansLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGreenPopUpCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tTips))
	if err != nil {
		return err
	}
	return err
}

func (self *FansInfoNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iFansLevel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGreenPopUpCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTips), 2)
	if err != nil {
		return err
	}
	return err
}

type GiftInfo struct {
	iItemType  int32
	iItemCount int32
}

func (self *GiftInfo) ResetDefault() {
}

func (self *GiftInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iItemCount))
	if err != nil {
		return err
	}
	return err
}

func (self *GiftInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iItemType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCount), 1)
	if err != nil {
		return err
	}
	return err
}

type UserGiftNotice struct {
	tFansGiftInfo       GiftInfo
	tSuperPupleGiftInfo GiftInfo
}

func (self *UserGiftNotice) ResetDefault() {
}

func (self *UserGiftNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tFansGiftInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tSuperPupleGiftInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *UserGiftNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tFansGiftInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tSuperPupleGiftInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type BadgeInfoListReq struct {
	tUserId UserId
}

func (self *BadgeInfoListReq) ResetDefault() {
}

func (self *BadgeInfoListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	return err
}

func (self *BadgeInfoListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	return err
}

type BadgeInfoListRsp struct {
	vBadgeInfo    []BadgeInfo
	lUsingBadgeId int64
}

func (self *BadgeInfoListRsp) ResetDefault() {
}

func (self *BadgeInfoListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vBadgeInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUsingBadgeId))
	if err != nil {
		return err
	}
	return err
}

func (self *BadgeInfoListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vBadgeInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUsingBadgeId), 1)
	if err != nil {
		return err
	}
	return err
}

type UsedGreenPopUpReq struct {
	tUserId    UserId
	iUsedCount int32
}

func (self *UsedGreenPopUpReq) ResetDefault() {
}

func (self *UsedGreenPopUpReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iUsedCount))
	if err != nil {
		return err
	}
	return err
}

func (self *UsedGreenPopUpReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUsedCount), 1)
	if err != nil {
		return err
	}
	return err
}

type GrandCeremonyChampionPresenter struct {
	lUid  int64
	sNick string
}

func (self *GrandCeremonyChampionPresenter) ResetDefault() {
}

func (self *GrandCeremonyChampionPresenter) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	return err
}

func (self *GrandCeremonyChampionPresenter) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	return err
}

type ActivityStatusNotice struct {
	sStatusLogo  string
	sActivityUrl string
}

func (self *ActivityStatusNotice) ResetDefault() {
}

func (self *ActivityStatusNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sStatusLogo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sActivityUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *ActivityStatusNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sStatusLogo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActivityUrl), 1)
	if err != nil {
		return err
	}
	return err
}

type GiftRankListItem struct {
	lUid       int64
	sNickName  string
	iItemType  int32
	iItemCount int32
	iScore     int32
}

func (self *GiftRankListItem) ResetDefault() {
}

func (self *GiftRankListItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iItemCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iScore))
	if err != nil {
		return err
	}
	return err
}

func (self *GiftRankListItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCount), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScore), 4)
	if err != nil {
		return err
	}
	return err
}

type GiftBarRsp struct {
	vTopGiftRankList    []GiftRankListItem
	vRecentGiftRankList []GiftRankListItem
}

func (self *GiftBarRsp) ResetDefault() {
}

func (self *GiftBarRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vTopGiftRankList))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vRecentGiftRankList))
	if err != nil {
		return err
	}
	return err
}

func (self *GiftBarRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vTopGiftRankList), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vRecentGiftRankList), 1)
	if err != nil {
		return err
	}
	return err
}

type ActivityTimeEventCBData struct {
	lTid      int64
	lSid      int64
	sReserved string
}

func (self *ActivityTimeEventCBData) ResetDefault() {
}

func (self *ActivityTimeEventCBData) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sReserved))
	if err != nil {
		return err
	}
	return err
}

func (self *ActivityTimeEventCBData) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lTid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sReserved), 2)
	if err != nil {
		return err
	}
	return err
}

type ActivityTimeEventType struct {
	iIgnoreIfExists   int32
	iBroadcastTrigger int32
	iPeriod           int32
}

func (self *ActivityTimeEventType) ResetDefault() {
}

func (self *ActivityTimeEventType) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iIgnoreIfExists))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBroadcastTrigger))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPeriod))
	if err != nil {
		return err
	}
	return err
}

func (self *ActivityTimeEventType) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iIgnoreIfExists), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBroadcastTrigger), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPeriod), 2)
	if err != nil {
		return err
	}
	return err
}

type ActivityTimeEvent struct {
	iActivityId   int32
	lUid          int64
	iEventId      int32
	iTriggerDelay int32
	tType         ActivityTimeEventType
	tCallBackData ActivityTimeEventCBData
}

func (self *ActivityTimeEvent) ResetDefault() {
}

func (self *ActivityTimeEvent) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iActivityId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iEventId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTriggerDelay))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.tType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.tCallBackData))
	if err != nil {
		return err
	}
	return err
}

func (self *ActivityTimeEvent) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iActivityId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEventId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTriggerDelay), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tCallBackData), 5)
	if err != nil {
		return err
	}
	return err
}

type PKStartNotice struct {
	lPKSessionId int64
	lLeftImid    int64
	lRightImid   int64
}

func (self *PKStartNotice) ResetDefault() {
}

func (self *PKStartNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPKSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLeftImid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lRightImid))
	if err != nil {
		return err
	}
	return err
}

func (self *PKStartNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPKSessionId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLeftImid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lRightImid), 2)
	if err != nil {
		return err
	}
	return err
}

type PKEndNotice struct {
	lPKSessionId int64
	iReason      int32
}

func (self *PKEndNotice) ResetDefault() {
}

func (self *PKEndNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPKSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iReason))
	if err != nil {
		return err
	}
	return err
}

func (self *PKEndNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPKSessionId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iReason), 1)
	if err != nil {
		return err
	}
	return err
}

type PKRoundStartNotice struct {
	lPKSessionId int64
}

func (self *PKRoundStartNotice) ResetDefault() {
}

func (self *PKRoundStartNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPKSessionId))
	if err != nil {
		return err
	}
	return err
}

func (self *PKRoundStartNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPKSessionId), 0)
	if err != nil {
		return err
	}
	return err
}

type PKRoundEndNotice struct {
	lPKSessionId int64
	iReason      int32
}

func (self *PKRoundEndNotice) ResetDefault() {
}

func (self *PKRoundEndNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPKSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iReason))
	if err != nil {
		return err
	}
	return err
}

func (self *PKRoundEndNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPKSessionId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iReason), 1)
	if err != nil {
		return err
	}
	return err
}

type PKPresenterReq struct {
	tUserId UserId
	lTid    int64
	lSid    int64
}

func (self *PKPresenterReq) ResetDefault() {
}

func (self *PKPresenterReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *PKPresenterReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	return err
}

type StartPKModeReq struct {
	lPKVersion   int64
	tPKPresenter PKPresenterReq
}

func (self *StartPKModeReq) ResetDefault() {
}

func (self *StartPKModeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPKVersion))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tPKPresenter))
	if err != nil {
		return err
	}
	return err
}

func (self *StartPKModeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPKVersion), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tPKPresenter), 1)
	if err != nil {
		return err
	}
	return err
}

type StartPKModeRsp struct {
	iRet               int32
	iPKRoundResultTime int32
}

func (self *StartPKModeRsp) ResetDefault() {
}

func (self *StartPKModeRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRet))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPKRoundResultTime))
	if err != nil {
		return err
	}
	return err
}

func (self *StartPKModeRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRet), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPKRoundResultTime), 1)
	if err != nil {
		return err
	}
	return err
}

type StopPKModeReq struct {
	tPKPresenter PKPresenterReq
}

func (self *StopPKModeReq) ResetDefault() {
}

func (self *StopPKModeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tPKPresenter))
	if err != nil {
		return err
	}
	return err
}

func (self *StopPKModeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tPKPresenter), 0)
	if err != nil {
		return err
	}
	return err
}

type StopPKModeRsp struct {
	iRet int32
}

func (self *StopPKModeRsp) ResetDefault() {
}

func (self *StopPKModeRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRet))
	if err != nil {
		return err
	}
	return err
}

func (self *StopPKModeRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRet), 0)
	if err != nil {
		return err
	}
	return err
}

type InvitePKReq struct {
	iType    int32
	tInviter PKPresenterReq
	lImid    int64
}

func (self *InvitePKReq) ResetDefault() {
}

func (self *InvitePKReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tInviter))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lImid))
	if err != nil {
		return err
	}
	return err
}

func (self *InvitePKReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInviter), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lImid), 2)
	if err != nil {
		return err
	}
	return err
}

type ResponesPKInvitationReq struct {
	iType    int32
	tInviter PKPresenterReq
	tInvitee PKPresenterReq
}

func (self *ResponesPKInvitationReq) ResetDefault() {
}

func (self *ResponesPKInvitationReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tInviter))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tInvitee))
	if err != nil {
		return err
	}
	return err
}

func (self *ResponesPKInvitationReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInviter), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tInvitee), 2)
	if err != nil {
		return err
	}
	return err
}

type PKInviteeNotice struct {
	iType     int32
	lPid      int64
	sNickName string
	lTid      int64
	lSid      int64
}

func (self *PKInviteeNotice) ResetDefault() {
}

func (self *PKInviteeNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *PKInviteeNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 4)
	if err != nil {
		return err
	}
	return err
}

type PKInviterRsp struct {
	iType     int32
	lImid     int64
	sNickName string
	lTid      int64
	lSid      int64
}

func (self *PKInviterRsp) ResetDefault() {
}

func (self *PKInviterRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lImid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *PKInviterRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lImid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 4)
	if err != nil {
		return err
	}
	return err
}

type StartPKRoundReq struct {
	lPKSessionId int64
	tPKPresenter PKPresenterReq
}

func (self *StartPKRoundReq) ResetDefault() {
}

func (self *StartPKRoundReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPKSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tPKPresenter))
	if err != nil {
		return err
	}
	return err
}

func (self *StartPKRoundReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPKSessionId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tPKPresenter), 1)
	if err != nil {
		return err
	}
	return err
}

type StartPKRoundRsp struct {
	iRet int32
}

func (self *StartPKRoundRsp) ResetDefault() {
}

func (self *StartPKRoundRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRet))
	if err != nil {
		return err
	}
	return err
}

func (self *StartPKRoundRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRet), 0)
	if err != nil {
		return err
	}
	return err
}

type StopPKReq struct {
	lPKSessionId int64
	tPKPresenter PKPresenterReq
	iReason      int32
}

func (self *StopPKReq) ResetDefault() {
}

func (self *StopPKReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPKSessionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tPKPresenter))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iReason))
	if err != nil {
		return err
	}
	return err
}

func (self *StopPKReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPKSessionId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tPKPresenter), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iReason), 2)
	if err != nil {
		return err
	}
	return err
}

type StopPKRsp struct {
	iRet int32
}

func (self *StopPKRsp) ResetDefault() {
}

func (self *StopPKRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRet))
	if err != nil {
		return err
	}
	return err
}

func (self *StopPKRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRet), 0)
	if err != nil {
		return err
	}
	return err
}

type PKUser struct {
	lUid       int64
	sNickName  string
	sHDLogo    string
	iLogoIndex int32
	iScore     int32
}

func (self *PKUser) ResetDefault() {
}

func (self *PKUser) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sHDLogo))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iLogoIndex))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iScore))
	if err != nil {
		return err
	}
	return err
}

func (self *PKUser) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHDLogo), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLogoIndex), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScore), 4)
	if err != nil {
		return err
	}
	return err
}

type PKPresenter struct {
	lPid            int64
	sNickName       string
	sTeamName       string
	iScore          int32
	iLevel          int32
	vTopPKUser      []PKUser
	iTotalUser      int32
	iIsOurSide      int32
	iIsReady        int32
	iNextLevelScore int32
}

func (self *PKPresenter) ResetDefault() {
}

func (self *PKPresenter) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sTeamName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iScore))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vTopPKUser))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iTotalUser))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iIsOurSide))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iIsReady))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iNextLevelScore))
	if err != nil {
		return err
	}
	return err
}

func (self *PKPresenter) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTeamName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScore), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vTopPKUser), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalUser), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsOurSide), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsReady), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNextLevelScore), 9)
	if err != nil {
		return err
	}
	return err
}

type PKInfo struct {
	iStatus           int32
	iRemainingSeconds int32
	tLeftSide         PKPresenter
	tRightSide        PKPresenter
	iPKResult         int32
}

func (self *PKInfo) ResetDefault() {
}

func (self *PKInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iRemainingSeconds))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tLeftSide))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.tRightSide))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPKResult))
	if err != nil {
		return err
	}
	return err
}

func (self *PKInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStatus), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRemainingSeconds), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tLeftSide), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tRightSide), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPKResult), 4)
	if err != nil {
		return err
	}
	return err
}

type PKOpponentMsgReq struct {
	tUserId UserId
	iType   int32
	vMsg    []byte
}

func (self *PKOpponentMsgReq) ResetDefault() {
}

func (self *PKOpponentMsgReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *PKOpponentMsgReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vMsg), 2)
	if err != nil {
		return err
	}
	return err
}

type PKOpponentMsgRsp struct {
	iRet int32
}

func (self *PKOpponentMsgRsp) ResetDefault() {
}

func (self *PKOpponentMsgRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRet))
	if err != nil {
		return err
	}
	return err
}

func (self *PKOpponentMsgRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRet), 0)
	if err != nil {
		return err
	}
	return err
}

type PKLotteryNotice struct {
	iStartCountDown int32
	iTimes          int32
	iDuration       int32
	iInterval       int32
}

func (self *PKLotteryNotice) ResetDefault() {
}

func (self *PKLotteryNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStartCountDown))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTimes))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iDuration))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iInterval))
	if err != nil {
		return err
	}
	return err
}

func (self *PKLotteryNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStartCountDown), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTimes), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDuration), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iInterval), 3)
	if err != nil {
		return err
	}
	return err
}

type SpeakInPKReq struct {
	tUserId  UserId
	lTid     int64
	lSid     int64
	sContent string
}

func (self *SpeakInPKReq) ResetDefault() {
}

func (self *SpeakInPKReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sContent))
	if err != nil {
		return err
	}
	return err
}

func (self *SpeakInPKReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sContent), 3)
	if err != nil {
		return err
	}
	return err
}

type SpeakInPKRsp struct {
	lUid        int64
	lImid       int64
	sNickName   string
	iNobleLevel int32
	sTeamName   string
	iTeamType   int32
	sContent    string
}

func (self *SpeakInPKRsp) ResetDefault() {
}

func (self *SpeakInPKRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lImid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iNobleLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sTeamName))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iTeamType))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sContent))
	if err != nil {
		return err
	}
	return err
}

func (self *SpeakInPKRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lImid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNobleLevel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTeamName), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTeamType), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sContent), 6)
	if err != nil {
		return err
	}
	return err
}

type takePKGiftReq struct {
	tUserId UserId
	lTid    int64
	lSid    int64
	lPid    int64
}

func (self *takePKGiftReq) ResetDefault() {
}

func (self *takePKGiftReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *takePKGiftReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	return err
}

type takePKGiftRsp struct {
	iType  int32
	iCount int32
	sTips  string
}

func (self *takePKGiftRsp) ResetDefault() {
}

func (self *takePKGiftRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sTips))
	if err != nil {
		return err
	}
	return err
}

func (self *takePKGiftRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTips), 2)
	if err != nil {
		return err
	}
	return err
}

type GambleResultNotice struct {
	lUid          int64
	sMatchName    string
	sScheduleName string
}

func (self *GambleResultNotice) ResetDefault() {
}

func (self *GambleResultNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMatchName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sScheduleName))
	if err != nil {
		return err
	}
	return err
}

func (self *GambleResultNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMatchName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sScheduleName), 2)
	if err != nil {
		return err
	}
	return err
}

type PresenterHistoryReq struct {
	tId UserId
}

func (self *PresenterHistoryReq) ResetDefault() {
}

func (self *PresenterHistoryReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterHistoryReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterHistoryRsp struct {
	vGameLiveInfos []GameLiveInfo
}

func (self *PresenterHistoryRsp) ResetDefault() {
}

func (self *PresenterHistoryRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameLiveInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterHistoryRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameLiveInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterActiveReq struct {
	tId        UserId
	lChannelId int64
}

func (self *PresenterActiveReq) ResetDefault() {
}

func (self *PresenterActiveReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterActiveReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	return err
}

type PresenterActiveRsp struct {
	lUid       int64
	lChannelId int64
	sErrMsg    string
}

func (self *PresenterActiveRsp) ResetDefault() {
}

func (self *PresenterActiveRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sErrMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterActiveRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sErrMsg), 2)
	if err != nil {
		return err
	}
	return err
}

type starInfo struct {
	lUid           int64
	sNick          string
	sIntroduce     string
	sImagUrl       string
	lYYid          int64
	iIsTop         int32
	iWeight        int32
	lChannelId     int64
	lSubchannel    int64
	iAttendeeCount int32
	iIsReplay      int32
	iSourceType    int32
	iGameId        int32
	lLiveId        int64
	iScreenType    int32
	vHistoryList   []GameLiveHlsInfo
}

func (self *starInfo) ResetDefault() {
}

func (self *starInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sIntroduce))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sImagUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lYYid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iIsTop))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iWeight))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lSubchannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iAttendeeCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iIsReplay))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.iScreenType))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.vHistoryList))
	if err != nil {
		return err
	}
	return err
}

func (self *starInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIntroduce), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sImagUrl), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsTop), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeight), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannel), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAttendeeCount), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsReplay), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSourceType), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScreenType), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vHistoryList), 15)
	if err != nil {
		return err
	}
	return err
}

type getRecommendStarReq struct {
	tId       UserId
	iPage     int32
	iPageSize int32
}

func (self *getRecommendStarReq) ResetDefault() {
}

func (self *getRecommendStarReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPage))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPageSize))
	if err != nil {
		return err
	}
	return err
}

func (self *getRecommendStarReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPage), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPageSize), 2)
	if err != nil {
		return err
	}
	return err
}

type getRecommendStarRsp struct {
	vStarInfos []starInfo
}

func (self *getRecommendStarRsp) ResetDefault() {
}

func (self *getRecommendStarRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vStarInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *getRecommendStarRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vStarInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type HotList struct {
	lId       int64
	iType     int32
	iExtId    int32
	sName     string
	iRank     int32
	iGameId   int32
	sPlatform string
	iLimit    int32
	iPageSize int32
}

func (self *HotList) ResetDefault() {
}

func (self *HotList) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iExtId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sPlatform))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iLimit))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iPageSize))
	if err != nil {
		return err
	}
	return err
}

func (self *HotList) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iExtId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRank), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPlatform), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLimit), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPageSize), 8)
	if err != nil {
		return err
	}
	return err
}

type BusinessType struct {
	iBusType  int32
	sTypeName string
	iStatus   int32
}

func (self *BusinessType) ResetDefault() {
}

func (self *BusinessType) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iBusType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sTypeName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *BusinessType) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iBusType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTypeName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 2)
	if err != nil {
		return err
	}
	return err
}

type MainGames struct {
	iGameId        int32
	iBusType       int32
	sGameFullName  string
	iCustom        int32
	iLiveCount     int32
	iUserCount     int32
	iRank          int32
	sImageUrl      string
	sSkipUrl       string
	iOpTime        int32
	sImageUrl2     string
	sGameShortName string
}

func (self *MainGames) ResetDefault() {
}

func (self *MainGames) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBusType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sGameFullName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iCustom))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iLiveCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iUserCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sImageUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sSkipUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iOpTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sImageUrl2))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sGameShortName))
	if err != nil {
		return err
	}
	return err
}

func (self *MainGames) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBusType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameFullName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCustom), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLiveCount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUserCount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRank), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sImageUrl), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSkipUrl), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOpTime), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sImageUrl2), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameShortName), 11)
	if err != nil {
		return err
	}
	return err
}

type GameFixInfo struct {
	iGameId        int32
	sGameFullName  string
	sImageUrl      string
	sSkipUrl       string
	sGameShortName string
}

func (self *GameFixInfo) ResetDefault() {
}

func (self *GameFixInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sGameFullName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sImageUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sSkipUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sGameShortName))
	if err != nil {
		return err
	}
	return err
}

func (self *GameFixInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameFullName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sImageUrl), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSkipUrl), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameShortName), 4)
	if err != nil {
		return err
	}
	return err
}

type MTagInfo struct {
	iId    int32
	sName  string
	sColor string
}

func (self *MTagInfo) ResetDefault() {
}

func (self *MTagInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sColor))
	if err != nil {
		return err
	}
	return err
}

func (self *MTagInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sColor), 2)
	if err != nil {
		return err
	}
	return err
}

type GameChangeInfo struct {
	iGameId int32
	iCustom int32
}

func (self *GameChangeInfo) ResetDefault() {
}

func (self *GameChangeInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCustom))
	if err != nil {
		return err
	}
	return err
}

func (self *GameChangeInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCustom), 1)
	if err != nil {
		return err
	}
	return err
}

type CategoryInfo struct {
	iCategoryId       int32
	sCategoryName     string
	vCategoryGameList []GameChangeInfo
	sImageUrl         string
}

func (self *CategoryInfo) ResetDefault() {
}

func (self *CategoryInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCategoryId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sCategoryName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vCategoryGameList))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sImageUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *CategoryInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCategoryId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCategoryName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vCategoryGameList), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sImageUrl), 3)
	if err != nil {
		return err
	}
	return err
}

type MapGameFixInfo struct {
	mGameFixInfo map[int32]GameFixInfo
	vTags        []MTagInfo
}

func (self *MapGameFixInfo) ResetDefault() {
}

func (self *MapGameFixInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.mGameFixInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vTags))
	if err != nil {
		return err
	}
	return err
}

func (self *MapGameFixInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.mGameFixInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vTags), 1)
	if err != nil {
		return err
	}
	return err
}

type AllGameMd5Info struct {
	sMd5            string
	tMapGameFixInfo MapGameFixInfo
}

func (self *AllGameMd5Info) ResetDefault() {
}

func (self *AllGameMd5Info) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sMd5))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tMapGameFixInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *AllGameMd5Info) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sMd5), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tMapGameFixInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type GetAllCategoryGameReq struct {
	tId  UserId
	sMd5 string
}

func (self *GetAllCategoryGameReq) ResetDefault() {
}

func (self *GetAllCategoryGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMd5))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAllCategoryGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 1)
	if err != nil {
		return err
	}
	return err
}

type GetAllCategoryGameRsp struct {
	vCategoryInfo   []CategoryInfo
	tAllGameMd5Info AllGameMd5Info
}

func (self *GetAllCategoryGameRsp) ResetDefault() {
}

func (self *GetAllCategoryGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vCategoryInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tAllGameMd5Info))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAllCategoryGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vCategoryInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tAllGameMd5Info), 1)
	if err != nil {
		return err
	}
	return err
}

type PlayerBaseInfo struct {
	lUid        int64
	iPosition   int32
	iBankroll   int32
	iTotalGames int32
	iWinGames   int32
	sNickname   string
	sLogoURL    string
}

func (self *PlayerBaseInfo) ResetDefault() {
}

func (self *PlayerBaseInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPosition))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBankroll))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTotalGames))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iWinGames))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sNickname))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sLogoURL))
	if err != nil {
		return err
	}
	return err
}

func (self *PlayerBaseInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPosition), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBankroll), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalGames), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinGames), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickname), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL), 6)
	if err != nil {
		return err
	}
	return err
}

type TexasCardInfo struct {
	iCardType   int32
	iCardNumber int32
}

func (self *TexasCardInfo) ResetDefault() {
}

func (self *TexasCardInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCardType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCardNumber))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasCardInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCardType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCardNumber), 1)
	if err != nil {
		return err
	}
	return err
}

type PlayerDetailInfo struct {
	lUid        int64
	iPosition   int32
	iBankroll   int32
	iTotalGames int32
	iWinGames   int32
	sNickname   string
	sLogoURL    string
	iTotalBet   int32
	iBetInStep  int32
	iCurAction  int32
	iStatus     int32
	vCardInfo   []TexasCardInfo
}

func (self *PlayerDetailInfo) ResetDefault() {
}

func (self *PlayerDetailInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPosition))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBankroll))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTotalGames))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iWinGames))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sNickname))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sLogoURL))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iTotalBet))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iBetInStep))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iCurAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.vCardInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *PlayerDetailInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPosition), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBankroll), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalGames), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinGames), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickname), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalBet), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetInStep), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCurAction), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vCardInfo), 11)
	if err != nil {
		return err
	}
	return err
}

type SessionInfo struct {
	lChannel         int64
	lSubChannel      int64
	lPID             int64
	lYYID            int64
	iGameLevel       int32
	iGameRound       int32
	iDeskModel       int32
	iTotWeight       int32
	iPresenterIncome int32
	iDealerUID       int32
	iChipType        int32
	sNickname        string
	sLiveScreenshot  string
	sHallName        string
	sDeskName        string
	sLogoURL         string
	iIsSetPasswd     int32
	sIntroduction    string
	sLogoURL2        string
	iSystemFlag      int32
}

func (self *SessionInfo) ResetDefault() {
}

func (self *SessionInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPID))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lYYID))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iGameLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iGameRound))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iDeskModel))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iTotWeight))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iPresenterIncome))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iDealerUID))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iChipType))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sNickname))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.sLiveScreenshot))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.sHallName))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.sDeskName))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.sLogoURL))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.iIsSetPasswd))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.sIntroduction))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.sLogoURL2))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.iSystemFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *SessionInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPID), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYID), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameLevel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameRound), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDeskModel), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotWeight), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterIncome), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDealerUID), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChipType), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickname), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveScreenshot), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHallName), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDeskName), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsSetPasswd), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIntroduction), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL2), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSystemFlag), 19)
	if err != nil {
		return err
	}
	return err
}

type GetGameInfoRsp struct {
	lPID              int64
	iGameRound        int32
	iGameLevel        int32
	iDealerUID        int32
	iDeskModel        int32
	iUserRole         int32
	iChipType         int32
	vPublicCardInfo   []TexasCardInfo
	vPotList          []int64
	vPlayerDetailInfo []PlayerDetailInfo
}

func (self *GetGameInfoRsp) ResetDefault() {
}

func (self *GetGameInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPID))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameRound))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iGameLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iDealerUID))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iDeskModel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iUserRole))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iChipType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.vPublicCardInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.vPotList))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.vPlayerDetailInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPID), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameRound), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDealerUID), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDeskModel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUserRole), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChipType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPublicCardInfo), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPotList), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPlayerDetailInfo), 9)
	if err != nil {
		return err
	}
	return err
}

type DeskInfo struct {
	tSessionInfo    SessionInfo
	vPlayerBaseInfo []PlayerBaseInfo
}

func (self *DeskInfo) ResetDefault() {
}

func (self *DeskInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tSessionInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vPlayerBaseInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *DeskInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tSessionInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPlayerBaseInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type GetDeskListRsp struct {
	vDeskInfo []DeskInfo
}

func (self *GetDeskListRsp) ResetDefault() {
}

func (self *GetDeskListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vDeskInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetDeskListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vDeskInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GetGameInfoReq struct {
	tId         UserId
	lChannel    int64
	lSubChannel int64
}

func (self *GetGameInfoReq) ResetDefault() {
}

func (self *GetGameInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 2)
	if err != nil {
		return err
	}
	return err
}

type GetDeskListReq struct {
	tId       UserId
	iLevel    int32
	iChipType int32
}

func (self *GetDeskListReq) ResetDefault() {
}

func (self *GetDeskListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iChipType))
	if err != nil {
		return err
	}
	return err
}

func (self *GetDeskListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChipType), 2)
	if err != nil {
		return err
	}
	return err
}

type BannerItem struct {
	sExtval1   string
	sImage     string
	sMarketing string
	sSubject   string
	sUrl       string
	sContent   string
}

func (self *BannerItem) ResetDefault() {
}

func (self *BannerItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sExtval1))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sImage))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sMarketing))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sSubject))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sContent))
	if err != nil {
		return err
	}
	return err
}

func (self *BannerItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sExtval1), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sImage), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMarketing), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSubject), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUrl), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sContent), 5)
	if err != nil {
		return err
	}
	return err
}

type GetMobileBannerReq struct {
	tId         UserId
	sApp        string
	lSubid      int64
	sSourceType string
}

func (self *GetMobileBannerReq) ResetDefault() {
}

func (self *GetMobileBannerReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sApp))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sSourceType))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobileBannerReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sApp), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSourceType), 3)
	if err != nil {
		return err
	}
	return err
}

type GetMobileBannerRsp struct {
	vBanner []BannerItem
}

func (self *GetMobileBannerRsp) ResetDefault() {
}

func (self *GetMobileBannerRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vBanner))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobileBannerRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vBanner), 0)
	if err != nil {
		return err
	}
	return err
}

type MSectionInfo struct {
	iId     int32
	sName   string
	sIcon   string
	iType   int32
	sAction string
}

func (self *MSectionInfo) ResetDefault() {
}

func (self *MSectionInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sAction))
	if err != nil {
		return err
	}
	return err
}

func (self *MSectionInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIcon), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAction), 4)
	if err != nil {
		return err
	}
	return err
}

type MAdvertising struct {
	iId       int32
	sTitle    string
	sSubTitle string
	sIcon     string
	sAction   string
}

func (self *MAdvertising) ResetDefault() {
}

func (self *MAdvertising) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sSubTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sAction))
	if err != nil {
		return err
	}
	return err
}

func (self *MAdvertising) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTitle), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSubTitle), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIcon), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAction), 4)
	if err != nil {
		return err
	}
	return err
}

type MAnnouncement struct {
	iId          int32
	sContent     string
	sAction      string
	bEnableClose bool
	iValidTime   int32
}

func (self *MAnnouncement) ResetDefault() {
}

func (self *MAnnouncement) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sContent))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.bEnableClose))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iValidTime))
	if err != nil {
		return err
	}
	return err
}

func (self *MAnnouncement) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sContent), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAction), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bEnableClose), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iValidTime), 4)
	if err != nil {
		return err
	}
	return err
}

type LiveHotItemInfo struct {
	sTitle string
	sUrl   string
}

func (self *LiveHotItemInfo) ResetDefault() {
}

func (self *LiveHotItemInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveHotItemInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sTitle), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUrl), 1)
	if err != nil {
		return err
	}
	return err
}

type LiveHotItem struct {
	vLiveHotItemInfo []LiveHotItemInfo
	iThemeId         int32
}

func (self *LiveHotItem) ResetDefault() {
}

func (self *LiveHotItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vLiveHotItemInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iThemeId))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveHotItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vLiveHotItemInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iThemeId), 1)
	if err != nil {
		return err
	}
	return err
}

type MHotRecTheme struct {
	iId         int32
	sName       string
	sIcon       string
	sAction     string
	vLives      []GameLiveInfo
	iPageSize   int32
	iViewType   int32
	sActionText string
	vLiveHots   []LiveHotItemInfo
}

func (self *MHotRecTheme) ResetDefault() {
}

func (self *MHotRecTheme) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vLives))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iPageSize))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iViewType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sActionText))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.vLiveHots))
	if err != nil {
		return err
	}
	return err
}

func (self *MHotRecTheme) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIcon), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAction), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vLives), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPageSize), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iViewType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActionText), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vLiveHots), 8)
	if err != nil {
		return err
	}
	return err
}

type MGetHomePageDataReq struct {
	tId   UserId
	iType int32
}

func (self *MGetHomePageDataReq) ResetDefault() {
}

func (self *MGetHomePageDataReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iType))
	if err != nil {
		return err
	}
	return err
}

func (self *MGetHomePageDataReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 1)
	if err != nil {
		return err
	}
	return err
}

type MGetHomePageDataRsp struct {
	vAdvertisings  []MAdvertising
	vHotRecThemes  []MHotRecTheme
	vAnnouncements []MAnnouncement
	vBanner        []BannerItem
}

func (self *MGetHomePageDataRsp) ResetDefault() {
}

func (self *MGetHomePageDataRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.vAdvertisings))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vHotRecThemes))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vAnnouncements))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vBanner))
	if err != nil {
		return err
	}
	return err
}

func (self *MGetHomePageDataRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vAdvertisings), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vHotRecThemes), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vAnnouncements), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vBanner), 4)
	if err != nil {
		return err
	}
	return err
}

type MSectionListReq struct {
	tId   UserId
	iType int32
}

func (self *MSectionListReq) ResetDefault() {
}

func (self *MSectionListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iType))
	if err != nil {
		return err
	}
	return err
}

func (self *MSectionListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 1)
	if err != nil {
		return err
	}
	return err
}

type MSectionListRsp struct {
	vSections []MSectionInfo
}

func (self *MSectionListRsp) ResetDefault() {
}

func (self *MSectionListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vSections))
	if err != nil {
		return err
	}
	return err
}

func (self *MSectionListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vSections), 0)
	if err != nil {
		return err
	}
	return err
}

type MGetLiveListReq struct {
	tId        UserId
	iSectionId int32
	iTag       int32
	iPage      int32
	iPageSize  int32
}

func (self *MGetLiveListReq) ResetDefault() {
}

func (self *MGetLiveListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iSectionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTag))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPage))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPageSize))
	if err != nil {
		return err
	}
	return err
}

func (self *MGetLiveListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSectionId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTag), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPage), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPageSize), 4)
	if err != nil {
		return err
	}
	return err
}

type MGetLiveListRsp struct {
	iTotalCount int32
	vLives      []GameLiveInfo
	vTags       []MTagInfo
	vBanners    []BannerItem
	iViewType   int32
	iHasMore    int32
}

func (self *MGetLiveListRsp) ResetDefault() {
}

func (self *MGetLiveListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(1, false, &(self.iTotalCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vLives))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vTags))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vBanners))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iViewType))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iHasMore))
	if err != nil {
		return err
	}
	return err
}

func (self *MGetLiveListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTotalCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vLives), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vTags), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vBanners), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iViewType), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHasMore), 6)
	if err != nil {
		return err
	}
	return err
}

type MLiveNearbyListReq struct {
	tId        UserId
	iSectionId int32
	lReferUid  int64
}

func (self *MLiveNearbyListReq) ResetDefault() {
}

func (self *MLiveNearbyListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iSectionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lReferUid))
	if err != nil {
		return err
	}
	return err
}

func (self *MLiveNearbyListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSectionId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lReferUid), 2)
	if err != nil {
		return err
	}
	return err
}

type MLiveNearbyListRsp struct {
	vPreLives  []GameLiveInfo
	vPostLives []GameLiveInfo
}

func (self *MLiveNearbyListRsp) ResetDefault() {
}

func (self *MLiveNearbyListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vPreLives))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vPostLives))
	if err != nil {
		return err
	}
	return err
}

func (self *MLiveNearbyListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPreLives), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPostLives), 1)
	if err != nil {
		return err
	}
	return err
}

type MGetUserLiveStatusReq struct {
	tId  UserId
	lUid int64
}

func (self *MGetUserLiveStatusReq) ResetDefault() {
}

func (self *MGetUserLiveStatusReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *MGetUserLiveStatusReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type MGetUserLiveStatusRsp struct {
	iStatus       int32
	tGameLiveInfo GameLiveInfo
}

func (self *MGetUserLiveStatusRsp) ResetDefault() {
}

func (self *MGetUserLiveStatusRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tGameLiveInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *MGetUserLiveStatusRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStatus), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tGameLiveInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type MSplash struct {
	sUrl       string
	sImage     string
	sTitle     string
	iIsSkip    int32
	iKeepTime  int32
	lEndDate   int64
	lBeginDate int64
}

func (self *MSplash) ResetDefault() {
}

func (self *MSplash) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sImage))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iIsSkip))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iKeepTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lEndDate))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lBeginDate))
	if err != nil {
		return err
	}
	return err
}

func (self *MSplash) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sUrl), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sImage), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTitle), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsSkip), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iKeepTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndDate), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBeginDate), 6)
	if err != nil {
		return err
	}
	return err
}

type MSplashReq struct {
	tId UserId
}

func (self *MSplashReq) ResetDefault() {
}

func (self *MSplashReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *MSplashReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type MSplashRsp struct {
	vInfo []MSplash
}

func (self *MSplashRsp) ResetDefault() {
}

func (self *MSplashRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *MSplashRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type MMagazine struct {
	sTitle string
	sValue string
}

func (self *MMagazine) ResetDefault() {
}

func (self *MMagazine) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sValue))
	if err != nil {
		return err
	}
	return err
}

func (self *MMagazine) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sTitle), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sValue), 1)
	if err != nil {
		return err
	}
	return err
}

type MDiscoveryItem struct {
	iId          string
	sName        string
	sDesc        string
	sIcon        string
	iPos         int32
	sActionUrl   string
	iIsNew       int32
	iViewType    int32
	lAccessCount int64
	sSmallIcon   string
}

func (self *MDiscoveryItem) ResetDefault() {
}

func (self *MDiscoveryItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sDesc))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPos))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sActionUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iIsNew))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iViewType))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lAccessCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sSmallIcon))
	if err != nil {
		return err
	}
	return err
}

func (self *MDiscoveryItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDesc), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIcon), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPos), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActionUrl), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsNew), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iViewType), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAccessCount), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSmallIcon), 9)
	if err != nil {
		return err
	}
	return err
}

type MDiscoverySection struct {
	iId          string
	sName        string
	sDesc        string
	sIcon        string
	iPos         int32
	sActionUrl   string
	iIsNew       int32
	iViewType    int32
	vChildren    []MDiscoveryItem
	vExpandItems []MDiscoveryItem
	iType        int32
	sSmallIcon   string
}

func (self *MDiscoverySection) ResetDefault() {
}

func (self *MDiscoverySection) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sDesc))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPos))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sActionUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iIsNew))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iViewType))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.vChildren))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.vExpandItems))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sSmallIcon))
	if err != nil {
		return err
	}
	return err
}

func (self *MDiscoverySection) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDesc), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIcon), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPos), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActionUrl), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsNew), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iViewType), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vChildren), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vExpandItems), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSmallIcon), 11)
	if err != nil {
		return err
	}
	return err
}

type MDiscoveryGroup struct {
	vItems []MDiscoverySection
}

func (self *MDiscoveryGroup) ResetDefault() {
}

func (self *MDiscoveryGroup) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vItems))
	if err != nil {
		return err
	}
	return err
}

func (self *MDiscoveryGroup) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vItems), 0)
	if err != nil {
		return err
	}
	return err
}

type MMagazineReq struct {
	tId UserId
}

func (self *MMagazineReq) ResetDefault() {
}

func (self *MMagazineReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *MMagazineReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type MMagazineRsp struct {
	vInfo []MMagazine
}

func (self *MMagazineRsp) ResetDefault() {
}

func (self *MMagazineRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *MMagazineRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type MAnnouncementReq struct {
	tId UserId
}

func (self *MAnnouncementReq) ResetDefault() {
}

func (self *MAnnouncementReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *MAnnouncementReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type MAnnouncementRsp struct {
	vInfo []MAnnouncement
}

func (self *MAnnouncementRsp) ResetDefault() {
}

func (self *MAnnouncementRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *MAnnouncementRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type MDiscoveryListReq struct {
	tId UserId
}

func (self *MDiscoveryListReq) ResetDefault() {
}

func (self *MDiscoveryListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *MDiscoveryListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type MDiscoveryListRsp struct {
	vItems []MDiscoverySection
}

func (self *MDiscoveryListRsp) ResetDefault() {
}

func (self *MDiscoveryListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vItems))
	if err != nil {
		return err
	}
	return err
}

func (self *MDiscoveryListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vItems), 0)
	if err != nil {
		return err
	}
	return err
}

type MDiscoveryDataReq struct {
	tId UserId
}

func (self *MDiscoveryDataReq) ResetDefault() {
}

func (self *MDiscoveryDataReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *MDiscoveryDataReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type MDiscoveryDataRsp struct {
	vItems []MDiscoveryGroup
}

func (self *MDiscoveryDataRsp) ResetDefault() {
}

func (self *MDiscoveryDataRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vItems))
	if err != nil {
		return err
	}
	return err
}

func (self *MDiscoveryDataRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vItems), 0)
	if err != nil {
		return err
	}
	return err
}

type MDiscoveryFocusListReq struct {
	tId UserId
}

func (self *MDiscoveryFocusListReq) ResetDefault() {
}

func (self *MDiscoveryFocusListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *MDiscoveryFocusListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type MDiscoveryFocusPresenter struct {
	lUid        int64
	lYYId       int64
	sNick       string
	sAvatar     string
	bSubscribed bool
	bLiving     bool
	lTopCid     int64
	lSubCid     int64
	iSourceType int32
	iScreenType int32
}

func (self *MDiscoveryFocusPresenter) ResetDefault() {
}

func (self *MDiscoveryFocusPresenter) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lYYId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sAvatar))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.bSubscribed))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.bLiving))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lTopCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lSubCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iScreenType))
	if err != nil {
		return err
	}
	return err
}

func (self *MDiscoveryFocusPresenter) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatar), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bSubscribed), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bLiving), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopCid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubCid), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSourceType), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScreenType), 9)
	if err != nil {
		return err
	}
	return err
}

type MDiscoveryFocusInfo struct {
	iId         int32
	sTitle      string
	sImage      string
	sAbstract   string
	vPresenters []MDiscoveryFocusPresenter
	sAction     string
	sShareImg   string
}

func (self *MDiscoveryFocusInfo) ResetDefault() {
}

func (self *MDiscoveryFocusInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sImage))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sAbstract))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vPresenters))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sShareImg))
	if err != nil {
		return err
	}
	return err
}

func (self *MDiscoveryFocusInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTitle), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sImage), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAbstract), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenters), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAction), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sShareImg), 6)
	if err != nil {
		return err
	}
	return err
}

type MDiscroveryFocusListRsp struct {
	vFocus []MDiscoveryFocusInfo
}

func (self *MDiscroveryFocusListRsp) ResetDefault() {
}

func (self *MDiscroveryFocusListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vFocus))
	if err != nil {
		return err
	}
	return err
}

func (self *MDiscroveryFocusListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vFocus), 0)
	if err != nil {
		return err
	}
	return err
}

type MIndividualConfig struct {
	sVIPSeatGuideUrl       string
	sVIPSeatGuideTip       string
	iSJLiveSwitch          int32
	sSJButtonAction        string
	iDefaultStreamLine     int32
	iDefaultBitRate        int32
	vShowLiveIconSectionId []int32
	sNobleResourceUrl      string
	vDefaultSearchKey      []string
	sLastVersion           string
}

func (self *MIndividualConfig) ResetDefault() {
}

func (self *MIndividualConfig) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sVIPSeatGuideUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sVIPSeatGuideTip))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iSJLiveSwitch))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sSJButtonAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iDefaultStreamLine))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iDefaultBitRate))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.vShowLiveIconSectionId))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sNobleResourceUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.vDefaultSearchKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sLastVersion))
	if err != nil {
		return err
	}
	return err
}

func (self *MIndividualConfig) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sVIPSeatGuideUrl), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVIPSeatGuideTip), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSJLiveSwitch), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSJButtonAction), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDefaultStreamLine), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDefaultBitRate), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vShowLiveIconSectionId), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNobleResourceUrl), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vDefaultSearchKey), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLastVersion), 9)
	if err != nil {
		return err
	}
	return err
}

type MLuanchConfigReq struct {
	tId   UserId
	iType int32
}

func (self *MLuanchConfigReq) ResetDefault() {
}

func (self *MLuanchConfigReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iType))
	if err != nil {
		return err
	}
	return err
}

func (self *MLuanchConfigReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 1)
	if err != nil {
		return err
	}
	return err
}

type MLuanchConfigRsp struct {
	vSplash   []MSplash
	vMagazine []MMagazine
	tConf     MIndividualConfig
}

func (self *MLuanchConfigRsp) ResetDefault() {
}

func (self *MLuanchConfigRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vSplash))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vMagazine))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tConf))
	if err != nil {
		return err
	}
	return err
}

func (self *MLuanchConfigRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vSplash), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vMagazine), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tConf), 2)
	if err != nil {
		return err
	}
	return err
}

type MUploadLogReq struct {
	iUploadDeliverType int32
	vUids              []int64
	lTid               int64
	lSid               int64
	lOperUid           int64
	iClientType        int32
	iSampleRatio       int32
	iUploadNetLevel    int32
	iUploadBackupLog   int32
	sContent           string
}

func (self *MUploadLogReq) ResetDefault() {
}

func (self *MUploadLogReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iUploadDeliverType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lOperUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iClientType))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iSampleRatio))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iUploadNetLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iUploadBackupLog))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sContent))
	if err != nil {
		return err
	}
	return err
}

func (self *MUploadLogReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iUploadDeliverType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lOperUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iClientType), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSampleRatio), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUploadNetLevel), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUploadBackupLog), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sContent), 9)
	if err != nil {
		return err
	}
	return err
}

type MuteUserReq struct {
	tId           UserId
	iScope        int32
	lUid          int64
	lTopCid       int64
	lSubCid       int64
	lPresenterUid int64
}

func (self *MuteUserReq) ResetDefault() {
}

func (self *MuteUserReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iScope))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lTopCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSubCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	return err
}

func (self *MuteUserReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScope), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopCid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubCid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 5)
	if err != nil {
		return err
	}
	return err
}

type MuteUserRsp struct {
	iResult       int32
	iScope        int32
	lUid          int64
	lTopCid       int64
	lSubCid       int64
	lPresenterUid int64
}

func (self *MuteUserRsp) ResetDefault() {
}

func (self *MuteUserRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iResult))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iScope))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lTopCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSubCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	return err
}

func (self *MuteUserRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iResult), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScope), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopCid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubCid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 5)
	if err != nil {
		return err
	}
	return err
}

type IllegalLiveReportReq struct {
	tId            UserId
	lPresenterUid  int64
	iLevel         int32
	sAbstract      string
	iNewReportType int32
	sImei          string
	sCaptureUrl    string
	iAppid         int32
}

func (self *IllegalLiveReportReq) ResetDefault() {
}

func (self *IllegalLiveReportReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sAbstract))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iNewReportType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sImei))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sCaptureUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iAppid))
	if err != nil {
		return err
	}
	return err
}

func (self *IllegalLiveReportReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAbstract), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNewReportType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sImei), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCaptureUrl), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAppid), 7)
	if err != nil {
		return err
	}
	return err
}

type MSProfileTag struct {
	iTagId    int32
	sTagName  string
	sTagColor string
	iScore    int32
}

func (self *MSProfileTag) ResetDefault() {
}

func (self *MSProfileTag) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTagId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sTagName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sTagColor))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iScore))
	if err != nil {
		return err
	}
	return err
}

func (self *MSProfileTag) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTagId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTagName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTagColor), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScore), 3)
	if err != nil {
		return err
	}
	return err
}

type SSGameInfo struct {
	sGameName  string
	iGameId    int32
	iLiveCount int32
	iAudiences int32
	sImgUrl    string
}

func (self *SSGameInfo) ResetDefault() {
}

func (self *SSGameInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLiveCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iAudiences))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sImgUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *SSGameInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sGameName), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLiveCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAudiences), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sImgUrl), 4)
	if err != nil {
		return err
	}
	return err
}

type SSPresenterInfo struct {
	lPresenterId        int64
	sNickName           string
	lSubscribe          int64
	bLive               bool
	lTid                int64
	lSTid               int64
	lSid                int64
	sSidName            string
	tTag                MSProfileTag
	sAvatarUrl          string
	sLiveIntro          string
	iGameId             int32
	sGameName           string
	lAttendeeCount      int64
	sSimpleNick         string
	iSourceType         int32
	iScreenType         int32
	lImid               int64
	sPrivateHost        string
	iSortIdx            int32
	lLiveCompatibleFlag int64
	iAid                int32
}

func (self *SSPresenterInfo) ResetDefault() {
}

func (self *SSPresenterInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPresenterId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubscribe))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.bLive))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sSidName))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.tTag))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sLiveIntro))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.lAttendeeCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.sSimpleNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.iScreenType))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.lImid))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.sPrivateHost))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.iSortIdx))
	if err != nil {
		return err
	}
	err = jis.ReadField(20, false, &(self.lLiveCompatibleFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(21, false, &(self.iAid))
	if err != nil {
		return err
	}
	return err
}

func (self *SSPresenterInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPresenterId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubscribe), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bLive), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSTid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSidName), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tTag), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveIntro), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAttendeeCount), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSimpleNick), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSourceType), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScreenType), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lImid), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPrivateHost), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSortIdx), 19)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveCompatibleFlag), 20)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAid), 21)
	if err != nil {
		return err
	}
	return err
}

type LiveChannelInfo struct {
	sName               string
	sScreenshot         string
	lPopularity         int64
	sAvatarUrl          string
	sGameName           string
	lTid                int64
	lSTid               int64
	lSid                int64
	sLiveIntro          string
	sNick               string
	lAttendeeCount      int64
	iGameId             int32
	iSourceType         int32
	lPuid               int32
	lPimid              int32
	iRecType            int32
	sSimpleNick         string
	iScreenType         int32
	sPrivateHost        string
	iSortIdx            int32
	lLiveCompatibleFlag int64
	lHuyaRankScore      int64
	iAid                int32
}

func (self *LiveChannelInfo) ResetDefault() {
}

func (self *LiveChannelInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sScreenshot))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPopularity))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lSTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sLiveIntro))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.lAttendeeCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.lPuid))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.lPimid))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.iRecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.sSimpleNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.iScreenType))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.sPrivateHost))
	if err != nil {
		return err
	}
	err = jis.ReadField(20, false, &(self.iSortIdx))
	if err != nil {
		return err
	}
	err = jis.ReadField(21, false, &(self.lLiveCompatibleFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(22, false, &(self.lHuyaRankScore))
	if err != nil {
		return err
	}
	err = jis.ReadField(23, false, &(self.iAid))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveChannelInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sName), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sScreenshot), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPopularity), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSTid), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveIntro), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAttendeeCount), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSourceType), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPuid), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPimid), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRecType), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSimpleNick), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScreenType), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPrivateHost), 19)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSortIdx), 20)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveCompatibleFlag), 21)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lHuyaRankScore), 22)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAid), 23)
	if err != nil {
		return err
	}
	return err
}

type GetAssociateKeyWordReq struct {
	sKeyWord string
}

func (self *GetAssociateKeyWordReq) ResetDefault() {
}

func (self *GetAssociateKeyWordReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sKeyWord))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAssociateKeyWordReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sKeyWord), 0)
	if err != nil {
		return err
	}
	return err
}

type GetAssociateKeyWordRsp struct {
	vAssociateWords []string
}

func (self *GetAssociateKeyWordRsp) ResetDefault() {
}

func (self *GetAssociateKeyWordRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vAssociateWords))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAssociateKeyWordRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vAssociateWords), 0)
	if err != nil {
		return err
	}
	return err
}

type GetResultByKeyWordReq struct {
	sKeyWord             string
	iPresentPageSize     int32
	iPresentFirstPageNum int32
	iLivePageSize        int32
	iLiveFirstPageNum    int32
	iTerminalType        int32
	tId                  UserId
	iForLoLBox           int32
}

func (self *GetResultByKeyWordReq) ResetDefault() {
}

func (self *GetResultByKeyWordReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sKeyWord))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPresentPageSize))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPresentFirstPageNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iLivePageSize))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iLiveFirstPageNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iTerminalType))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iForLoLBox))
	if err != nil {
		return err
	}
	return err
}

func (self *GetResultByKeyWordReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sKeyWord), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresentPageSize), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresentFirstPageNum), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLivePageSize), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLiveFirstPageNum), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTerminalType), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tId), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iForLoLBox), 7)
	if err != nil {
		return err
	}
	return err
}

type GetResultByKeyWordRsp struct {
	bGetSearchResult     bool
	vGameInfo            []SSGameInfo
	vPresenterInfo       []SSPresenterInfo
	vSubChannelInfo      []LiveChannelInfo
	vRecommendInfo       []LiveChannelInfo
	vPresenterMatchWord  []string
	vSubChannelMatchWord []string
	iPresentTotalNum     int32
	iLiveTotalNum        int32
	sCacheId             string
	vPresenterRecommend  []SSPresenterInfo
}

func (self *GetResultByKeyWordRsp) ResetDefault() {
}

func (self *GetResultByKeyWordRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.bGetSearchResult))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vGameInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vPresenterInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vSubChannelInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vRecommendInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vPresenterMatchWord))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.vSubChannelMatchWord))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iPresentTotalNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iLiveTotalNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sCacheId))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.vPresenterRecommend))
	if err != nil {
		return err
	}
	return err
}

func (self *GetResultByKeyWordRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.bGetSearchResult), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameInfo), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterInfo), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSubChannelInfo), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vRecommendInfo), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterMatchWord), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSubChannelMatchWord), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresentTotalNum), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLiveTotalNum), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCacheId), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterRecommend), 10)
	if err != nil {
		return err
	}
	return err
}

type GetAssociateWordsReq struct {
	tId UserId
}

func (self *GetAssociateWordsReq) ResetDefault() {
}

func (self *GetAssociateWordsReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAssociateWordsReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetAssociateWordsRsp struct {
	mTypeWords map[int32][]string
}

func (self *GetAssociateWordsRsp) ResetDefault() {
}

func (self *GetAssociateWordsRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.mTypeWords))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAssociateWordsRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.mTypeWords), 0)
	if err != nil {
		return err
	}
	return err
}

type SMForbidHotkeyReq struct {
	skeyword   string
	iTimeStamp int32
	sOperMan   string
}

func (self *SMForbidHotkeyReq) ResetDefault() {
}

func (self *SMForbidHotkeyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.skeyword))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTimeStamp))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sOperMan))
	if err != nil {
		return err
	}
	return err
}

func (self *SMForbidHotkeyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.skeyword), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTimeStamp), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOperMan), 2)
	if err != nil {
		return err
	}
	return err
}

type SMGetTopHotkeyReq struct {
	iTopAmount int32
}

func (self *SMGetTopHotkeyReq) ResetDefault() {
}

func (self *SMGetTopHotkeyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTopAmount))
	if err != nil {
		return err
	}
	return err
}

func (self *SMGetTopHotkeyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTopAmount), 0)
	if err != nil {
		return err
	}
	return err
}

type SMGetTopHotkeyRsp struct {
	vKeyword []string
	vTimes   []int32
}

func (self *SMGetTopHotkeyRsp) ResetDefault() {
}

func (self *SMGetTopHotkeyRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vKeyword))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vTimes))
	if err != nil {
		return err
	}
	return err
}

func (self *SMGetTopHotkeyRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vKeyword), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vTimes), 1)
	if err != nil {
		return err
	}
	return err
}

type SMGetFinalHotKeywordsRsp struct {
	vHotKeys []string
}

func (self *SMGetFinalHotKeywordsRsp) ResetDefault() {
}

func (self *SMGetFinalHotKeywordsRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vHotKeys))
	if err != nil {
		return err
	}
	return err
}

func (self *SMGetFinalHotKeywordsRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vHotKeys), 0)
	if err != nil {
		return err
	}
	return err
}

type CdnSettingValue struct {
	iPushType             int32
	sMainLine             string
	sBackupLine           string
	mPullStreamTypeWeb    map[string]int32
	mPullStreamTypePC     map[string]int32
	mPullStreamTypeMobile map[string]int32
	iIdType               int32
	sIdValue              string
	sRemark               string
	iOperTime             int32
	sOperMan              string
	iOperType             int32
	bTemporary            bool
}

func (self *CdnSettingValue) ResetDefault() {
}

func (self *CdnSettingValue) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPushType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMainLine))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sBackupLine))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.mPullStreamTypeWeb))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.mPullStreamTypePC))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.mPullStreamTypeMobile))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iIdType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sIdValue))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sRemark))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iOperTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sOperMan))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iOperType))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.bTemporary))
	if err != nil {
		return err
	}
	return err
}

func (self *CdnSettingValue) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPushType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMainLine), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBackupLine), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mPullStreamTypeWeb), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mPullStreamTypePC), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mPullStreamTypeMobile), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIdType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIdValue), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sRemark), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOperTime), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sOperMan), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOperType), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bTemporary), 12)
	if err != nil {
		return err
	}
	return err
}

type modifyCdnReq struct {
	tValue CdnSettingValue
}

func (self *modifyCdnReq) ResetDefault() {
}

func (self *modifyCdnReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tValue))
	if err != nil {
		return err
	}
	return err
}

func (self *modifyCdnReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tValue), 0)
	if err != nil {
		return err
	}
	return err
}

type GetSettingByIdReq struct {
	lId              int64
	iIdType          int32
	iPushType        int32
	sMainLine        string
	sBackupLine      string
	iPageIndex       int32
	iPageRecordCount int32
}

func (self *GetSettingByIdReq) ResetDefault() {
}

func (self *GetSettingByIdReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iIdType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPushType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sMainLine))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sBackupLine))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iPageIndex))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iPageRecordCount))
	if err != nil {
		return err
	}
	return err
}

func (self *GetSettingByIdReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIdType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPushType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMainLine), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBackupLine), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPageIndex), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPageRecordCount), 6)
	if err != nil {
		return err
	}
	return err
}

type GetSettingByIdRsp struct {
	vCdnSettingValues []CdnSettingValue
	iTotalPageNum     int32
	iTotalRecordNum   int32
}

func (self *GetSettingByIdRsp) ResetDefault() {
}

func (self *GetSettingByIdRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vCdnSettingValues))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTotalPageNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTotalRecordNum))
	if err != nil {
		return err
	}
	return err
}

func (self *GetSettingByIdRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vCdnSettingValues), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalPageNum), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalRecordNum), 2)
	if err != nil {
		return err
	}
	return err
}

type getCdnOperRecordReq struct {
	iPageIndex       int32
	iPageRecordCount int32
}

func (self *getCdnOperRecordReq) ResetDefault() {
}

func (self *getCdnOperRecordReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPageIndex))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPageRecordCount))
	if err != nil {
		return err
	}
	return err
}

func (self *getCdnOperRecordReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPageIndex), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPageRecordCount), 1)
	if err != nil {
		return err
	}
	return err
}

type getCdnOperRecordRsp struct {
	vOperRecords    []CdnSettingValue
	iTotalPageNum   int32
	iTotalRecordNum int32
}

func (self *getCdnOperRecordRsp) ResetDefault() {
}

func (self *getCdnOperRecordRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vOperRecords))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTotalPageNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTotalRecordNum))
	if err != nil {
		return err
	}
	return err
}

func (self *getCdnOperRecordRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vOperRecords), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalPageNum), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalRecordNum), 2)
	if err != nil {
		return err
	}
	return err
}

type CdnActionInfo struct {
	iTimeStamp   int32
	sCdnName     string
	sActionName  string
	lPuid        int64
	lTid         int64
	lSid         int64
	lLiveid      int64
	sPushType    string
	sStreamName  string
	sStreamUrl   string
	sPresenterIp string
	sRtmpIp      string
	sCdnIp       string
}

func (self *CdnActionInfo) ResetDefault() {
}

func (self *CdnActionInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTimeStamp))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sCdnName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sActionName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPuid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lLiveid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sPushType))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sStreamName))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sStreamUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sPresenterIp))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.sRtmpIp))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.sCdnIp))
	if err != nil {
		return err
	}
	return err
}

func (self *CdnActionInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTimeStamp), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCdnName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActionName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPuid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPushType), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStreamName), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sStreamUrl), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterIp), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sRtmpIp), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCdnIp), 12)
	if err != nil {
		return err
	}
	return err
}

type GetCdnActionReq struct {
	iPageIndex       int32
	iPageRecordCount int32
	lPUid            int64
	lStartTimestamp  int64
	lEndTimestamp    int64
}

func (self *GetCdnActionReq) ResetDefault() {
}

func (self *GetCdnActionReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPageIndex))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPageRecordCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lStartTimestamp))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lEndTimestamp))
	if err != nil {
		return err
	}
	return err
}

func (self *GetCdnActionReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPageIndex), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPageRecordCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTimestamp), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTimestamp), 4)
	if err != nil {
		return err
	}
	return err
}

type GetCdnActionRsp struct {
	vOperRecords    []CdnActionInfo
	iTotalPageNum   int32
	iTotalRecordNum int32
}

func (self *GetCdnActionRsp) ResetDefault() {
}

func (self *GetCdnActionRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vOperRecords))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTotalPageNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTotalRecordNum))
	if err != nil {
		return err
	}
	return err
}

func (self *GetCdnActionRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vOperRecords), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalPageNum), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalRecordNum), 2)
	if err != nil {
		return err
	}
	return err
}

type InterveneCountInfo struct {
	lSubChannelId  int64
	lAttendeeCount int64
}

func (self *InterveneCountInfo) ResetDefault() {
}

func (self *InterveneCountInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lAttendeeCount))
	if err != nil {
		return err
	}
	return err
}

func (self *InterveneCountInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lSubChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAttendeeCount), 1)
	if err != nil {
		return err
	}
	return err
}

type InterveneCountReq struct {
	tId        UserId
	lChannelId int64
}

func (self *InterveneCountReq) ResetDefault() {
}

func (self *InterveneCountReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	return err
}

func (self *InterveneCountReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	return err
}

type InterveneCountRsp struct {
	lTimeStamp  int64
	iExpire     int32
	lChannelId  int64
	vCountInfos []InterveneCountInfo
}

func (self *InterveneCountRsp) ResetDefault() {
}

func (self *InterveneCountRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lTimeStamp))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iExpire))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vCountInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *InterveneCountRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lTimeStamp), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iExpire), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vCountInfos), 3)
	if err != nil {
		return err
	}
	return err
}

type MGameInfo struct {
	iId   int32
	sName string
	sIcon string
}

func (self *MGameInfo) ResetDefault() {
}

func (self *MGameInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sIcon))
	if err != nil {
		return err
	}
	return err
}

func (self *MGameInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIcon), 2)
	if err != nil {
		return err
	}
	return err
}

type GetMobileHotGameReq struct {
	tId         UserId
	iSourceType int32
	iPage       int32
	iPageSize   int32
}

func (self *GetMobileHotGameReq) ResetDefault() {
}

func (self *GetMobileHotGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iSourceType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPage))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPageSize))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobileHotGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSourceType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPage), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPageSize), 3)
	if err != nil {
		return err
	}
	return err
}

type GetMobileHotGameRsp struct {
	vGameInfos []MGameInfo
}

func (self *GetMobileHotGameRsp) ResetDefault() {
}

func (self *GetMobileHotGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobileHotGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameInfos), 0)
	if err != nil {
		return err
	}
	return err
}

type GuardianNoticeInfo struct {
	lGuardianUid  int64
	sGuardianNick string
	iLevel        int32
	lEndTime      int64
	iUseMonth     int32
	iLeftMonth    int32
}

func (self *GuardianNoticeInfo) ResetDefault() {
}

func (self *GuardianNoticeInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lGuardianUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sGuardianNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iUseMonth))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iLeftMonth))
	if err != nil {
		return err
	}
	return err
}

func (self *GuardianNoticeInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lGuardianUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGuardianNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTime), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUseMonth), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLeftMonth), 5)
	if err != nil {
		return err
	}
	return err
}

type GuardianNoticeInfoList struct {
	lPid                int64
	vOnlineGuardianList []GuardianNoticeInfo
	vAllGuardianList    []GuardianNoticeInfo
}

func (self *GuardianNoticeInfoList) ResetDefault() {
}

func (self *GuardianNoticeInfoList) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vOnlineGuardianList))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vAllGuardianList))
	if err != nil {
		return err
	}
	return err
}

func (self *GuardianNoticeInfoList) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vOnlineGuardianList), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vAllGuardianList), 2)
	if err != nil {
		return err
	}
	return err
}

type GuardianPresenterInfoNotice struct {
	lUid          int64
	sNick         string
	iLevel        int32
	lGuardianUid  int64
	sGuardianNick string
	eNoticeType   int32
}

func (self *GuardianPresenterInfoNotice) ResetDefault() {
}

func (self *GuardianPresenterInfoNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lGuardianUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sGuardianNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.eNoticeType))
	if err != nil {
		return err
	}
	return err
}

func (self *GuardianPresenterInfoNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGuardianUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGuardianNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eNoticeType), 5)
	if err != nil {
		return err
	}
	return err
}

type GetUserAllGuardianReq struct {
	tId UserId
}

func (self *GetUserAllGuardianReq) ResetDefault() {
}

func (self *GetUserAllGuardianReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserAllGuardianReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetGuardianNoticeReq struct {
	tId  UserId
	lTid int64
	lSid int64
}

func (self *GetGuardianNoticeReq) ResetDefault() {
}

func (self *GetGuardianNoticeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGuardianNoticeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	return err
}

type GuardPresenterInfo struct {
	lUid   int64
	sNick  string
	iLevel int32
}

func (self *GuardPresenterInfo) ResetDefault() {
}

func (self *GuardPresenterInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *GuardPresenterInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 2)
	if err != nil {
		return err
	}
	return err
}

type GetUserAllGuardianRsp struct {
	lUid           int64
	vPresenterInfo []GuardPresenterInfo
}

func (self *GetUserAllGuardianRsp) ResetDefault() {
}

func (self *GetUserAllGuardianRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vPresenterInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserAllGuardianRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type PushNewGuardianReq struct {
	tId           UserId
	lUid          int64
	sNick         string
	iLevel        int32
	lStartTime    int64
	lEndTime      int64
	lGuardianUid  int64
	sGuardianNick string
}

func (self *PushNewGuardianReq) ResetDefault() {
}

func (self *PushNewGuardianReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lGuardianUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sGuardianNick))
	if err != nil {
		return err
	}
	return err
}

func (self *PushNewGuardianReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTime), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGuardianUid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGuardianNick), 7)
	if err != nil {
		return err
	}
	return err
}

type PushNewGuardianRsp struct {
	lUid     int64
	iRetCode int32
	sMsg     string
}

func (self *PushNewGuardianRsp) ResetDefault() {
}

func (self *PushNewGuardianRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *PushNewGuardianRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRetCode), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 2)
	if err != nil {
		return err
	}
	return err
}

type AddOnReadyReq struct {
	tId         UserId
	lChannel    int64
	lSubChannel int64
}

func (self *AddOnReadyReq) ResetDefault() {
}

func (self *AddOnReadyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	return err
}

func (self *AddOnReadyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 2)
	if err != nil {
		return err
	}
	return err
}

type AddOnReadyRsp struct {
	sServerName string
}

func (self *AddOnReadyRsp) ResetDefault() {
}

func (self *AddOnReadyRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sServerName))
	if err != nil {
		return err
	}
	return err
}

func (self *AddOnReadyRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sServerName), 0)
	if err != nil {
		return err
	}
	return err
}

type DailyPresentNotice struct {
	iLevel     int32
	iItemType  int32
	iItemCount int32
}

func (self *DailyPresentNotice) ResetDefault() {
}

func (self *DailyPresentNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iItemCount))
	if err != nil {
		return err
	}
	return err
}

func (self *DailyPresentNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iLevel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCount), 2)
	if err != nil {
		return err
	}
	return err
}

type PresenterFirstMicReq struct {
	tId            UserId
	lChannel       int64
	lSubChannel    int64
	eOperationType int32
}

func (self *PresenterFirstMicReq) ResetDefault() {
}

func (self *PresenterFirstMicReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.eOperationType))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterFirstMicReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eOperationType), 3)
	if err != nil {
		return err
	}
	return err
}

type AdvertContext struct {
	lId      int64
	sUrl     string
	sIcon    string
	sContext string
}

func (self *AdvertContext) ResetDefault() {
}

func (self *AdvertContext) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sContext))
	if err != nil {
		return err
	}
	return err
}

func (self *AdvertContext) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUrl), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIcon), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sContext), 3)
	if err != nil {
		return err
	}
	return err
}

type AdvertItem struct {
	lId            int64
	iState         int32
	lTop           int64
	lSid           string
	lStartTime     int64
	lEndTime       int64
	vAdvertContext []AdvertContext
}

func (self *AdvertItem) ResetDefault() {
}

func (self *AdvertItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iState))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lTop))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.vAdvertContext))
	if err != nil {
		return err
	}
	return err
}

func (self *AdvertItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iState), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTop), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTime), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vAdvertContext), 6)
	if err != nil {
		return err
	}
	return err
}

type ScreenSkinData struct {
	lId           int64
	sTitle        string
	sPicUrl       string
	iStatus       int16
	iTemplate     int32
	iPresenterUid int64
	sWebPicUrl    string
}

func (self *ScreenSkinData) ResetDefault() {
}

func (self *ScreenSkinData) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sPicUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iTemplate))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sWebPicUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *ScreenSkinData) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTitle), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPicUrl), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTemplate), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterUid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWebPicUrl), 6)
	if err != nil {
		return err
	}
	return err
}

type ComingSoonPictureData struct {
	lId           int64
	sTitle        string
	sJumpUrl      string
	sPicUrl       string
	lBeginTime    int64
	lEndTime      int64
	iTemplate     int32
	iPresenterUid int64
}

func (self *ComingSoonPictureData) ResetDefault() {
}

func (self *ComingSoonPictureData) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sJumpUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sPicUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lBeginTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iTemplate))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iPresenterUid))
	if err != nil {
		return err
	}
	return err
}

func (self *ComingSoonPictureData) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTitle), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sJumpUrl), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPicUrl), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBeginTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTime), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTemplate), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterUid), 7)
	if err != nil {
		return err
	}
	return err
}

type UpdateAdvertInfoReq struct {
	vAdvertItem AdvertItem
}

func (self *UpdateAdvertInfoReq) ResetDefault() {
}

func (self *UpdateAdvertInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vAdvertItem))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateAdvertInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vAdvertItem), 0)
	if err != nil {
		return err
	}
	return err
}

type UpdateAdvertInfoRsp struct {
	iRetCode int32
}

func (self *UpdateAdvertInfoRsp) ResetDefault() {
}

func (self *UpdateAdvertInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	return err
}

func (self *UpdateAdvertInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	return err
}

type QueryAdvertInfoReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
}

func (self *QueryAdvertInfoReq) ResetDefault() {
}

func (self *QueryAdvertInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryAdvertInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	return err
}

type QueryAdvertInfoRsp struct {
	iRetCode    int32
	vAdvertItem AdvertItem
}

func (self *QueryAdvertInfoRsp) ResetDefault() {
}

func (self *QueryAdvertInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vAdvertItem))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryAdvertInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vAdvertItem), 1)
	if err != nil {
		return err
	}
	return err
}

type BroadAdvertInfo struct {
	sData AdvertItem
}

func (self *BroadAdvertInfo) ResetDefault() {
}

func (self *BroadAdvertInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sData))
	if err != nil {
		return err
	}
	return err
}

func (self *BroadAdvertInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sData), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterPopData struct {
	lId          int64
	sContent     string
	sExtenalLink string
	lStartTime   int64
	lEndTime     int64
	iPopInterval int64
	lNowTime     int64
}

func (self *PresenterPopData) ResetDefault() {
}

func (self *PresenterPopData) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sContent))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sExtenalLink))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iPopInterval))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lNowTime))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterPopData) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sContent), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sExtenalLink), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPopInterval), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lNowTime), 6)
	if err != nil {
		return err
	}
	return err
}

type getScreenSkinReq struct {
	tId           UserId
	lPresenterUid int64
	iTemplate     int32
	iFromType     int32
}

func (self *getScreenSkinReq) ResetDefault() {
}

func (self *getScreenSkinReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTemplate))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iFromType))
	if err != nil {
		return err
	}
	return err
}

func (self *getScreenSkinReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTemplate), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFromType), 3)
	if err != nil {
		return err
	}
	return err
}

type getScreenSkinRsp struct {
	iRetCode int32
	data     ScreenSkinData
}

func (self *getScreenSkinRsp) ResetDefault() {
}

func (self *getScreenSkinRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.data))
	if err != nil {
		return err
	}
	return err
}

func (self *getScreenSkinRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.data), 1)
	if err != nil {
		return err
	}
	return err
}

type ShowScreenSkinNotify struct {
	data ScreenSkinData
}

func (self *ShowScreenSkinNotify) ResetDefault() {
}

func (self *ShowScreenSkinNotify) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.data))
	if err != nil {
		return err
	}
	return err
}

func (self *ShowScreenSkinNotify) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.data), 0)
	if err != nil {
		return err
	}
	return err
}

type HideScreenSkinNotify struct {
	lId int64
}

func (self *HideScreenSkinNotify) ResetDefault() {
}

func (self *HideScreenSkinNotify) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lId))
	if err != nil {
		return err
	}
	return err
}

func (self *HideScreenSkinNotify) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lId), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterNotifyPopupReq struct {
	tId        UserId
	lSid       int64
	lSubSid    int64
	iLiveType  int32
	iFromType  int32
	iProceesId int32
}

func (self *PresenterNotifyPopupReq) ResetDefault() {
}

func (self *PresenterNotifyPopupReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iLiveType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iFromType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iProceesId))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterNotifyPopupReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLiveType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFromType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iProceesId), 5)
	if err != nil {
		return err
	}
	return err
}

type PresenterNotifyPopupRsp struct {
	iRetCode int32
	data     []PresenterPopData
}

func (self *PresenterNotifyPopupRsp) ResetDefault() {
}

func (self *PresenterNotifyPopupRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.data))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterNotifyPopupRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.data), 1)
	if err != nil {
		return err
	}
	return err
}

type PetardSendPropReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lUid          int64
	iPropType     int32
	iCount        int32
	iItemGroup    int32
	iGroup        int32
}

func (self *PetardSendPropReq) ResetDefault() {
}

func (self *PetardSendPropReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iItemGroup))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iGroup))
	if err != nil {
		return err
	}
	return err
}

func (self *PetardSendPropReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemGroup), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGroup), 7)
	if err != nil {
		return err
	}
	return err
}

type PetardSendPropResp struct {
	sCode string
}

func (self *PetardSendPropResp) ResetDefault() {
}

func (self *PetardSendPropResp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sCode))
	if err != nil {
		return err
	}
	return err
}

func (self *PetardSendPropResp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sCode), 0)
	if err != nil {
		return err
	}
	return err
}

type PetardPresenterRankInfo struct {
	lChannelId    int64
	iShortChannel int32
	lSubchannelId int64
	lUid          int64
	sNick         string
	iLuck         int32
}

func (self *PetardPresenterRankInfo) ResetDefault() {
}

func (self *PetardPresenterRankInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iLuck))
	if err != nil {
		return err
	}
	return err
}

func (self *PetardPresenterRankInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLuck), 5)
	if err != nil {
		return err
	}
	return err
}

type WarriorRankInfo struct {
	lUid       int64
	sNick      string
	iStandings int32
}

func (self *WarriorRankInfo) ResetDefault() {
}

func (self *WarriorRankInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iStandings))
	if err != nil {
		return err
	}
	return err
}

func (self *WarriorRankInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStandings), 2)
	if err != nil {
		return err
	}
	return err
}

type PresenterTaskPetardInfo struct {
	lUid               int64
	iTaskNum           int32
	iPropType          int32
	iPropCount         int32
	iPetardCount       int32
	iPropCountTotal    int32
	iPetardCountTotal  int32
	iSmallLuckBagCount int32
	iBigLuckBagCount   int32
	iPresenterRank     int32
	iPresenterLuck     int32
}

func (self *PresenterTaskPetardInfo) ResetDefault() {
}

func (self *PresenterTaskPetardInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTaskNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPropCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPetardCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iPropCountTotal))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iPetardCountTotal))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iSmallLuckBagCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iBigLuckBagCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iPresenterRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iPresenterLuck))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterTaskPetardInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTaskNum), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCount), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPetardCount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCountTotal), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPetardCountTotal), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSmallLuckBagCount), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBigLuckBagCount), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterRank), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterLuck), 10)
	if err != nil {
		return err
	}
	return err
}

type PetardRankInfo struct {
	vPetardPresenterRankLists []PetardPresenterRankInfo
	vWarriorRankLists         []WarriorRankInfo
	iActivityStatus           int32
	eTemplateType             int32
}

func (self *PetardRankInfo) ResetDefault() {
}

func (self *PetardRankInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vPetardPresenterRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vWarriorRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iActivityStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.eTemplateType))
	if err != nil {
		return err
	}
	return err
}

func (self *PetardRankInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPetardPresenterRankLists), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vWarriorRankLists), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActivityStatus), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eTemplateType), 3)
	if err != nil {
		return err
	}
	return err
}

type PetardPanelInfoReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lUid          int64
}

func (self *PetardPanelInfoReq) ResetDefault() {
}

func (self *PetardPanelInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *PetardPanelInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	return err
}

type HurtMonstorInfo struct {
	lUserUid   int64
	sNick      string
	sLogo      string
	iHurtBlood int32
	iPercent   int32
	iMVP       int32
	iLast      int32
	iMVPCount  int32
	iLastCount int32
}

func (self *HurtMonstorInfo) ResetDefault() {
}

func (self *HurtMonstorInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUserUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sLogo))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iHurtBlood))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPercent))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iMVP))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iLast))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iMVPCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iLastCount))
	if err != nil {
		return err
	}
	return err
}

func (self *HurtMonstorInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUserUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogo), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHurtBlood), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPercent), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMVP), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLast), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMVPCount), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLastCount), 8)
	if err != nil {
		return err
	}
	return err
}

type PetardPanelInfoRsp struct {
	lUid                      int64
	iActivityStatus           int32
	iCurrentDay               int32
	iTotalDay                 int32
	sTaskPetardInfo           PresenterTaskPetardInfo
	vPetardPresenterRankLists []PetardPresenterRankInfo
	vWarriorRankLists         []WarriorRankInfo
	sActivityStartTime        string
	iBlood                    int32
	iTotalBlood               int32
	vHurtRank                 []HurtMonstorInfo
	iCountDown                int32
	iBonusPercent             int32
	iTotalBonusPercent        int32
}

func (self *PetardPanelInfoRsp) ResetDefault() {
}

func (self *PetardPanelInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iActivityStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCurrentDay))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTotalDay))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sTaskPetardInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vPetardPresenterRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.vWarriorRankLists))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sActivityStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iBlood))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iTotalBlood))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.vHurtRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iCountDown))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iBonusPercent))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iTotalBonusPercent))
	if err != nil {
		return err
	}
	return err
}

func (self *PetardPanelInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActivityStatus), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCurrentDay), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalDay), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTaskPetardInfo), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPetardPresenterRankLists), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vWarriorRankLists), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActivityStartTime), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBlood), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalBlood), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vHurtRank), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCountDown), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBonusPercent), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalBonusPercent), 13)
	if err != nil {
		return err
	}
	return err
}

type GrantLuckBagReq struct {
	tId           UserId
	lChannelId    int64
	iShortChannel int32
	lSubchannelId int64
	lUid          int64
	sNick         string
	iLuckBagType  int32
	iLuckBagCount int32
}

func (self *GrantLuckBagReq) ResetDefault() {
}

func (self *GrantLuckBagReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iLuckBagType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iLuckBagCount))
	if err != nil {
		return err
	}
	return err
}

func (self *GrantLuckBagReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLuckBagType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLuckBagCount), 7)
	if err != nil {
		return err
	}
	return err
}

type GrantLuckBagRsp struct {
	sCode string
}

func (self *GrantLuckBagRsp) ResetDefault() {
}

func (self *GrantLuckBagRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sCode))
	if err != nil {
		return err
	}
	return err
}

func (self *GrantLuckBagRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sCode), 0)
	if err != nil {
		return err
	}
	return err
}

type ClickLuckBagReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lPid          int64
	lUid          int64
	sNick         string
	lKey          int64
	iWave         int32
}

func (self *ClickLuckBagReq) ResetDefault() {
}

func (self *ClickLuckBagReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iWave))
	if err != nil {
		return err
	}
	return err
}

func (self *ClickLuckBagReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lKey), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWave), 7)
	if err != nil {
		return err
	}
	return err
}

type ClickLuckBagRsp struct {
	sCode         string
	iPropType     int32
	iPropCount    int32
	iPopupTimeout int32
}

func (self *ClickLuckBagRsp) ResetDefault() {
}

func (self *ClickLuckBagRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPropCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPopupTimeout))
	if err != nil {
		return err
	}
	return err
}

func (self *ClickLuckBagRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPopupTimeout), 3)
	if err != nil {
		return err
	}
	return err
}

type EndMonstorReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	lUid          int64
}

func (self *EndMonstorReq) ResetDefault() {
}

func (self *EndMonstorReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *EndMonstorReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	return err
}

type EndMonstorRsp struct {
	sCode string
}

func (self *EndMonstorRsp) ResetDefault() {
}

func (self *EndMonstorRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sCode))
	if err != nil {
		return err
	}
	return err
}

func (self *EndMonstorRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sCode), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterGrantNotice struct {
	lUid              int64
	iLuckBagType      int32
	lKey              int64
	iLuckBagCount     int32
	iLuckBagDuration  int32
	iAlreadyStartTime int32
	eTemplateType     int32
}

func (self *PresenterGrantNotice) ResetDefault() {
}

func (self *PresenterGrantNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iLuckBagType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iLuckBagCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iLuckBagDuration))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iAlreadyStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.eTemplateType))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterGrantNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLuckBagType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lKey), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLuckBagCount), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLuckBagDuration), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAlreadyStartTime), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eTemplateType), 6)
	if err != nil {
		return err
	}
	return err
}

type PresenterGrantBigLuckBagNotice struct {
	lChannelId    int64
	lSubchannelId int64
	iShortChannel int32
	sNick         string
	iLuckBagType  int32
	eTemplateType int32
}

func (self *PresenterGrantBigLuckBagNotice) ResetDefault() {
}

func (self *PresenterGrantBigLuckBagNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iLuckBagType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.eTemplateType))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterGrantBigLuckBagNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLuckBagType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eTemplateType), 5)
	if err != nil {
		return err
	}
	return err
}

type RankChangeNotice struct {
	iWinShortChannel  int32
	sWinNick          string
	iLoseShortChannel int32
	sLoseNick         string
	iRank             int32
	eTemplateType     int32
}

func (self *RankChangeNotice) ResetDefault() {
}

func (self *RankChangeNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iWinShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sWinNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLoseShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sLoseNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.eTemplateType))
	if err != nil {
		return err
	}
	return err
}

func (self *RankChangeNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iWinShortChannel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWinNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLoseShortChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLoseNick), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRank), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eTemplateType), 5)
	if err != nil {
		return err
	}
	return err
}

type ClickLuckBagNotice struct {
	sNick      string
	iPropType  int32
	iPropCount int32
}

func (self *ClickLuckBagNotice) ResetDefault() {
}

func (self *ClickLuckBagNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPropCount))
	if err != nil {
		return err
	}
	return err
}

func (self *ClickLuckBagNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sNick), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCount), 2)
	if err != nil {
		return err
	}
	return err
}

type MonsterEntryNotice struct {
	lChannelId    int64
	lSubchannelId int64
	iShortChannel int32
	lUid          int64
	sNick         string
	iBonus        int32
	iCartoonTime  int32
	eTemplateType int32
}

func (self *MonsterEntryNotice) ResetDefault() {
}

func (self *MonsterEntryNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iShortChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iBonus))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iCartoonTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.eTemplateType))
	if err != nil {
		return err
	}
	return err
}

func (self *MonsterEntryNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBonus), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCartoonTime), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eTemplateType), 7)
	if err != nil {
		return err
	}
	return err
}

type AwardNotice struct {
	mItemTypeCount map[int32]int64
}

func (self *AwardNotice) ResetDefault() {
}

func (self *AwardNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.mItemTypeCount))
	if err != nil {
		return err
	}
	return err
}

func (self *AwardNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.mItemTypeCount), 0)
	if err != nil {
		return err
	}
	return err
}

type MonstorPanelNotice struct {
	iBlood        int32
	iTotalBlood   int32
	vHurtRank     []HurtMonstorInfo
	lChannelId    int64
	lSubchannelId int64
	lUid          int64
	iBonus        int32
}

func (self *MonstorPanelNotice) ResetDefault() {
}

func (self *MonstorPanelNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iBlood))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTotalBlood))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vHurtRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iBonus))
	if err != nil {
		return err
	}
	return err
}

func (self *MonstorPanelNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iBlood), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalBlood), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vHurtRank), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBonus), 6)
	if err != nil {
		return err
	}
	return err
}

type BeatMonstorResultNotice struct {
	iDead      int32
	iStandings int32
	iStar      int32
	vHurtRank  []HurtMonstorInfo
	sMonstorId string
}

func (self *BeatMonstorResultNotice) ResetDefault() {
}

func (self *BeatMonstorResultNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iDead))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iStandings))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iStar))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vHurtRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sMonstorId))
	if err != nil {
		return err
	}
	return err
}

func (self *BeatMonstorResultNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iDead), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStandings), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStar), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vHurtRank), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMonstorId), 4)
	if err != nil {
		return err
	}
	return err
}

type CountDownNotice struct {
	lUid          int64
	sNick         string
	iBonus        int32
	iBonusPercent int32
	iBlood        int32
	iTotalBlood   int32
	iCartoonTime  int32
	iDurationTime int32
	sMonstorId    string
}

func (self *CountDownNotice) ResetDefault() {
}

func (self *CountDownNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBonus))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBonusPercent))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iBlood))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iTotalBlood))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iCartoonTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iDurationTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sMonstorId))
	if err != nil {
		return err
	}
	return err
}

func (self *CountDownNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBonus), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBonusPercent), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBlood), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalBlood), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCartoonTime), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDurationTime), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMonstorId), 8)
	if err != nil {
		return err
	}
	return err
}

type StandingsTopThreeNotice struct {
	lUid  int64
	sNick string
	iRank int32
}

func (self *StandingsTopThreeNotice) ResetDefault() {
}

func (self *StandingsTopThreeNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iRank))
	if err != nil {
		return err
	}
	return err
}

func (self *StandingsTopThreeNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRank), 2)
	if err != nil {
		return err
	}
	return err
}

type EndMonstorNotice struct {
	lUid       int64
	sMonstorId string
}

func (self *EndMonstorNotice) ResetDefault() {
}

func (self *EndMonstorNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMonstorId))
	if err != nil {
		return err
	}
	return err
}

func (self *EndMonstorNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMonstorId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetFreePropNotice struct {
	iPropType  int32
	iPropCount int32
}

func (self *GetFreePropNotice) ResetDefault() {
}

func (self *GetFreePropNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPropCount))
	if err != nil {
		return err
	}
	return err
}

func (self *GetFreePropNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPropType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCount), 1)
	if err != nil {
		return err
	}
	return err
}

type PetardTaskInt64Key struct {
	lKey int64
}

func (self *PetardTaskInt64Key) ResetDefault() {
}

func (self *PetardTaskInt64Key) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lKey))
	if err != nil {
		return err
	}
	return err
}

func (self *PetardTaskInt64Key) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lKey), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterTaskPetardInfoCache struct {
	sTaskPetardInfo PresenterTaskPetardInfo
	lCacheExpire    int64
}

func (self *PresenterTaskPetardInfoCache) ResetDefault() {
}

func (self *PresenterTaskPetardInfoCache) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sTaskPetardInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lCacheExpire))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterTaskPetardInfoCache) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sTaskPetardInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lCacheExpire), 1)
	if err != nil {
		return err
	}
	return err
}

type PetardTaskInfo struct {
	iTaskNum     int32
	iPropType    int32
	iPropCount   int32
	iPetardCount int32
}

func (self *PetardTaskInfo) ResetDefault() {
}

func (self *PetardTaskInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTaskNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPropCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPetardCount))
	if err != nil {
		return err
	}
	return err
}

func (self *PetardTaskInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTaskNum), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPetardCount), 3)
	if err != nil {
		return err
	}
	return err
}

type LuckBagProbabilityInfo struct {
	iLuckBagType int32
	iProbability int32
}

func (self *LuckBagProbabilityInfo) ResetDefault() {
}

func (self *LuckBagProbabilityInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iLuckBagType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iProbability))
	if err != nil {
		return err
	}
	return err
}

func (self *LuckBagProbabilityInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iLuckBagType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iProbability), 1)
	if err != nil {
		return err
	}
	return err
}

type GrantLuckBagInt64Key struct {
	lChannelId    int64
	lSubchannelId int64
	lKey          int64
}

func (self *GrantLuckBagInt64Key) ResetDefault() {
}

func (self *GrantLuckBagInt64Key) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lKey))
	if err != nil {
		return err
	}
	return err
}

func (self *GrantLuckBagInt64Key) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lKey), 2)
	if err != nil {
		return err
	}
	return err
}

type PetardAwardInfo struct {
	iPropType  int32
	iPropCount int32
}

func (self *PetardAwardInfo) ResetDefault() {
}

func (self *PetardAwardInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPropType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPropCount))
	if err != nil {
		return err
	}
	return err
}

func (self *PetardAwardInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPropType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropCount), 1)
	if err != nil {
		return err
	}
	return err
}

type PetardAwardInfoCache struct {
	vFirstAward  []PetardAwardInfo
	vSecondAward []PetardAwardInfo
	vThirdAward  []PetardAwardInfo
	lCacheExpire int64
	iLuckBagType int32
	lStartTime   int64
}

func (self *PetardAwardInfoCache) ResetDefault() {
}

func (self *PetardAwardInfoCache) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vFirstAward))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vSecondAward))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vThirdAward))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lCacheExpire))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iLuckBagType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	return err
}

func (self *PetardAwardInfoCache) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vFirstAward), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSecondAward), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vThirdAward), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lCacheExpire), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLuckBagType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 5)
	if err != nil {
		return err
	}
	return err
}

type PetardPanelInfoValue struct {
	lChannelId    int64
	lSubchannelId int64
	sInfo         PetardPanelInfoRsp
}

func (self *PetardPanelInfoValue) ResetDefault() {
}

func (self *PetardPanelInfoValue) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *PetardPanelInfoValue) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sInfo), 2)
	if err != nil {
		return err
	}
	return err
}

type PresenterLuckBagInt64Key struct {
	lUid int64
}

func (self *PresenterLuckBagInt64Key) ResetDefault() {
}

func (self *PresenterLuckBagInt64Key) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterLuckBagInt64Key) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	return err
}

type PresenterLuckBagCache struct {
	vGrantLuckBagHistory []int64
	lChannelId           int64
	lSubchannelId        int64
	lUid                 int64
	sNick                string
}

func (self *PresenterLuckBagCache) ResetDefault() {
}

func (self *PresenterLuckBagCache) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGrantLuckBagHistory))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sNick))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterLuckBagCache) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGrantLuckBagHistory), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 4)
	if err != nil {
		return err
	}
	return err
}

type MonsterInfo struct {
	lChannelId    int64
	lSubchannelId int64
	lUid          int64
	iBlood        int32
	lStartTime    int64
	lDeadLine     int64
	iDead         int32
	iBonus        int32
}

func (self *MonsterInfo) ResetDefault() {
}

func (self *MonsterInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBlood))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lDeadLine))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iDead))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iBonus))
	if err != nil {
		return err
	}
	return err
}

func (self *MonsterInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBlood), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeadLine), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDead), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBonus), 7)
	if err != nil {
		return err
	}
	return err
}

type MonstorInt64Key struct {
	lUid int64
}

func (self *MonstorInt64Key) ResetDefault() {
}

func (self *MonstorInt64Key) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *MonstorInt64Key) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	return err
}

type MonstorInfoCache struct {
	tMonstorInfo MonsterInfo
	lCacheExpire int64
}

func (self *MonstorInfoCache) ResetDefault() {
}

func (self *MonstorInfoCache) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tMonstorInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lCacheExpire))
	if err != nil {
		return err
	}
	return err
}

func (self *MonstorInfoCache) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tMonstorInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lCacheExpire), 1)
	if err != nil {
		return err
	}
	return err
}

type PayUserInfo struct {
	lUserUid  int64
	iPayCount int32
}

func (self *PayUserInfo) ResetDefault() {
}

func (self *PayUserInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUserUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPayCount))
	if err != nil {
		return err
	}
	return err
}

func (self *PayUserInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUserUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPayCount), 1)
	if err != nil {
		return err
	}
	return err
}

type PetardInChannelReq struct {
	tId           UserId
	lChannelId    int64
	lSubchannelId int64
	eTemplateType int32
}

func (self *PetardInChannelReq) ResetDefault() {
}

func (self *PetardInChannelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.eTemplateType))
	if err != nil {
		return err
	}
	return err
}

func (self *PetardInChannelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannelId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.eTemplateType), 3)
	if err != nil {
		return err
	}
	return err
}

type GetMonkeyInitDataReq struct {
	tId         UserId
	lChannel    int64
	lSubChannel int64
}

func (self *GetMonkeyInitDataReq) ResetDefault() {
}

func (self *GetMonkeyInitDataReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMonkeyInitDataReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 2)
	if err != nil {
		return err
	}
	return err
}

type MonkeyInitData struct {
	iBeanType   int32
	iDailyTimes int32
	iTotalTimes int32
	lMaxJackpot int64
	lMinJackpot int64
	vRate       []int32
}

func (self *MonkeyInitData) ResetDefault() {
}

func (self *MonkeyInitData) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iDailyTimes))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTotalTimes))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lMaxJackpot))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lMinJackpot))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vRate))
	if err != nil {
		return err
	}
	return err
}

func (self *MonkeyInitData) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iBeanType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDailyTimes), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalTimes), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lMaxJackpot), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lMinJackpot), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vRate), 5)
	if err != nil {
		return err
	}
	return err
}

type GetMonkeyInitDataRsp struct {
	vInitData []MonkeyInitData
	GameStat  int32
}

func (self *GetMonkeyInitDataRsp) ResetDefault() {
}

func (self *GetMonkeyInitDataRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vInitData))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.GameStat))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMonkeyInitDataRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vInitData), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.GameStat), 1)
	if err != nil {
		return err
	}
	return err
}

type CreateGameReq struct {
	tId         UserId
	sNick       string
	lChannel    int64
	lSubChannel int64
	iBeanType   int32
	lJackpot    int64
}

func (self *CreateGameReq) ResetDefault() {
}

func (self *CreateGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lJackpot))
	if err != nil {
		return err
	}
	return err
}

func (self *CreateGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lJackpot), 5)
	if err != nil {
		return err
	}
	return err
}

type CreateGameRsp struct {
	iRetCode int32
}

func (self *CreateGameRsp) ResetDefault() {
}

func (self *CreateGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	return err
}

func (self *CreateGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	return err
}

type GameStartNotice struct {
	lTotJackpot int64
	iCountDown  int32
	iBeanType   int32
	iGameID     int32
}

func (self *GameStartNotice) ResetDefault() {
}

func (self *GameStartNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lTotJackpot))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCountDown))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGameID))
	if err != nil {
		return err
	}
	return err
}

func (self *GameStartNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lTotJackpot), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCountDown), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameID), 3)
	if err != nil {
		return err
	}
	return err
}

type TeaseMonkeyReq struct {
	tId         UserId
	sNick       string
	lChannel    int64
	lSubChannel int64
	iPropsType  int32
	ipropsCount int32
	lPid        int64
	iGameID     int32
}

func (self *TeaseMonkeyReq) ResetDefault() {
}

func (self *TeaseMonkeyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPropsType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.ipropsCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iGameID))
	if err != nil {
		return err
	}
	return err
}

func (self *TeaseMonkeyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPropsType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.ipropsCount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameID), 7)
	if err != nil {
		return err
	}
	return err
}

type TeaseMonkeyRsp struct {
	iBonusCount     int32
	iBonusType      int32
	iRetCode        int32
	iUsedPropsCount int32
	iLeftjackpot    int32
}

func (self *TeaseMonkeyRsp) ResetDefault() {
}

func (self *TeaseMonkeyRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iBonusCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBonusType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iUsedPropsCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iLeftjackpot))
	if err != nil {
		return err
	}
	return err
}

func (self *TeaseMonkeyRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iBonusCount), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBonusType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRetCode), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUsedPropsCount), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLeftjackpot), 4)
	if err != nil {
		return err
	}
	return err
}

type HeartBeatReq struct {
	tId         UserId
	lChannel    int64
	lSubChannel int64
}

func (self *HeartBeatReq) ResetDefault() {
}

func (self *HeartBeatReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	return err
}

func (self *HeartBeatReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 2)
	if err != nil {
		return err
	}
	return err
}

type EndGameReq struct {
	tId         UserId
	lChannel    int64
	lSubChannel int64
	iEndType    int32
}

func (self *EndGameReq) ResetDefault() {
}

func (self *EndGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iEndType))
	if err != nil {
		return err
	}
	return err
}

func (self *EndGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEndType), 3)
	if err != nil {
		return err
	}
	return err
}

type EndGameRsp struct {
	iRetCode int32
	iGameID  int32
}

func (self *EndGameRsp) ResetDefault() {
}

func (self *EndGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameID))
	if err != nil {
		return err
	}
	return err
}

func (self *EndGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameID), 1)
	if err != nil {
		return err
	}
	return err
}

type UserTeaseRecord struct {
	sNick       string
	iBonusCount int32
}

func (self *UserTeaseRecord) ResetDefault() {
}

func (self *UserTeaseRecord) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBonusCount))
	if err != nil {
		return err
	}
	return err
}

func (self *UserTeaseRecord) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sNick), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBonusCount), 1)
	if err != nil {
		return err
	}
	return err
}

type UserTeaseRecordsBroadcast struct {
	vTeaseRecords []UserTeaseRecord
	lLeftJackpot  int64
	lTotJackpot   int64
	iCountDown    int32
	iBeanType     int32
	iGameID       int32
	iUserCount    int32
}

func (self *UserTeaseRecordsBroadcast) ResetDefault() {
}

func (self *UserTeaseRecordsBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vTeaseRecords))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLeftJackpot))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lTotJackpot))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iCountDown))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iGameID))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iUserCount))
	if err != nil {
		return err
	}
	return err
}

func (self *UserTeaseRecordsBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vTeaseRecords), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLeftJackpot), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTotJackpot), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCountDown), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameID), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUserCount), 6)
	if err != nil {
		return err
	}
	return err
}

type LuckyUserNotice struct {
	sNick       string
	iBonusCount int32
	iBonusType  int32
}

func (self *LuckyUserNotice) ResetDefault() {
}

func (self *LuckyUserNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBonusCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBonusType))
	if err != nil {
		return err
	}
	return err
}

func (self *LuckyUserNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sNick), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBonusCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBonusType), 2)
	if err != nil {
		return err
	}
	return err
}

type TeaseMonkeyGameInfoReq struct {
	tId         UserId
	lChannel    int64
	lSubChannel int64
}

func (self *TeaseMonkeyGameInfoReq) ResetDefault() {
}

func (self *TeaseMonkeyGameInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	return err
}

func (self *TeaseMonkeyGameInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 2)
	if err != nil {
		return err
	}
	return err
}

type TeaseMonkeyGameInfoRsp struct {
	pid          int64
	sNick        string
	iDailyTimes  int32
	iTotalTimes  int32
	lTotJackpot  int64
	lLeftJackpot int64
	iCountDown   int32
	iUserCount   int32
	iBeanType    int32
}

func (self *TeaseMonkeyGameInfoRsp) ResetDefault() {
}

func (self *TeaseMonkeyGameInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.pid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iDailyTimes))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTotalTimes))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lTotJackpot))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lLeftJackpot))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iCountDown))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iUserCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	return err
}

func (self *TeaseMonkeyGameInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.pid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDailyTimes), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalTimes), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTotJackpot), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLeftJackpot), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCountDown), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUserCount), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBeanType), 8)
	if err != nil {
		return err
	}
	return err
}

type EndGameNotice struct {
	iEndType int32
	iGameID  int32
}

func (self *EndGameNotice) ResetDefault() {
}

func (self *EndGameNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iEndType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameID))
	if err != nil {
		return err
	}
	return err
}

func (self *EndGameNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iEndType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameID), 1)
	if err != nil {
		return err
	}
	return err
}

type CheckMonkeyGameStatReq struct {
	tId         UserId
	lChannel    int64
	lSubChannel int64
}

func (self *CheckMonkeyGameStatReq) ResetDefault() {
}

func (self *CheckMonkeyGameStatReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	return err
}

func (self *CheckMonkeyGameStatReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 2)
	if err != nil {
		return err
	}
	return err
}

type CheckMonkeyGameStatRsp struct {
	iStat int32
}

func (self *CheckMonkeyGameStatRsp) ResetDefault() {
}

func (self *CheckMonkeyGameStatRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStat))
	if err != nil {
		return err
	}
	return err
}

func (self *CheckMonkeyGameStatRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStat), 0)
	if err != nil {
		return err
	}
	return err
}

type PushConfigInfo struct {
	sConfig string
}

func (self *PushConfigInfo) ResetDefault() {
}

func (self *PushConfigInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sConfig))
	if err != nil {
		return err
	}
	return err
}

func (self *PushConfigInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sConfig), 0)
	if err != nil {
		return err
	}
	return err
}

type MPresenterInfo struct {
	tPresenterInfo  SSPresenterInfo
	iMPresenterType int32
}

func (self *MPresenterInfo) ResetDefault() {
}

func (self *MPresenterInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tPresenterInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMPresenterType))
	if err != nil {
		return err
	}
	return err
}

func (self *MPresenterInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tPresenterInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMPresenterType), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMobileResultByKeywordReq struct {
	tId                    UserId
	sKeyword               string
	iPresenterListPageSize int32
	iPresenterListPages    int32
	iGameLiveListPageSize  int32
	iGameLiveListPages     int32
	iRecommendedVideoSize  int32
}

func (self *GetMobileResultByKeywordReq) ResetDefault() {
}

func (self *GetMobileResultByKeywordReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sKeyword))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPresenterListPageSize))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPresenterListPages))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iGameLiveListPageSize))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iGameLiveListPages))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iRecommendedVideoSize))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobileResultByKeywordReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sKeyword), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterListPageSize), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterListPages), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameLiveListPageSize), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameLiveListPages), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRecommendedVideoSize), 6)
	if err != nil {
		return err
	}
	return err
}

type GetMobileResultByKeywordRsp struct {
	bSearchResult        bool
	vPresenters          []MPresenterInfo
	vGameList            []SSGameInfo
	vGameLiveList        []LiveChannelInfo
	vRecommendLiveList   []LiveChannelInfo
	iPresenterTotalPages int32
	iGameLiveListPages   int32
	sCacheKey            string
	vVideos              []VideoInfo
}

func (self *GetMobileResultByKeywordRsp) ResetDefault() {
}

func (self *GetMobileResultByKeywordRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.bSearchResult))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vPresenters))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vGameList))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vGameLiveList))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vRecommendLiveList))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iPresenterTotalPages))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iGameLiveListPages))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sCacheKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.vVideos))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobileResultByKeywordRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.bSearchResult), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenters), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameList), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameLiveList), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vRecommendLiveList), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterTotalPages), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameLiveListPages), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCacheKey), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vVideos), 8)
	if err != nil {
		return err
	}
	return err
}

type GetMobilePageInfoReq struct {
	tId                  UserId
	iPresenterPageNum    int32
	iGameLiveListPageNum int32
	sCacheKey            string
}

func (self *GetMobilePageInfoReq) ResetDefault() {
}

func (self *GetMobilePageInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPresenterPageNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iGameLiveListPageNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sCacheKey))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobilePageInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterPageNum), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameLiveListPageNum), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCacheKey), 3)
	if err != nil {
		return err
	}
	return err
}

type GetMobilePageInfoRsp struct {
	vPresenters   []MPresenterInfo
	vGameLiveList []LiveChannelInfo
	sCacheKey     string
}

func (self *GetMobilePageInfoRsp) ResetDefault() {
}

func (self *GetMobilePageInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vPresenters))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vGameLiveList))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sCacheKey))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobilePageInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPresenters), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameLiveList), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCacheKey), 2)
	if err != nil {
		return err
	}
	return err
}

type GetMobileHotKeywordReq struct {
	tId UserId
}

func (self *GetMobileHotKeywordReq) ResetDefault() {
}

func (self *GetMobileHotKeywordReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobileHotKeywordReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMobileHotKeywordRsp struct {
	vHotKeywords []string
}

func (self *GetMobileHotKeywordRsp) ResetDefault() {
}

func (self *GetMobileHotKeywordRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vHotKeywords))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobileHotKeywordRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vHotKeywords), 0)
	if err != nil {
		return err
	}
	return err
}

type TexasPokerPlayerRankInfo struct {
	lUid          int64
	sNickname     string
	iRankType     int32
	iRankIndex    int32
	lChannelId    int64
	lSubChannelId int64
	iAmount       int32
	lWinBeanCount int64
	sUpdateDate   string
}

func (self *TexasPokerPlayerRankInfo) ResetDefault() {
}

func (self *TexasPokerPlayerRankInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickname))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iRankType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iRankIndex))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iAmount))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lWinBeanCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sUpdateDate))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPokerPlayerRankInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickname), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRankType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRankIndex), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAmount), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lWinBeanCount), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUpdateDate), 8)
	if err != nil {
		return err
	}
	return err
}

type GetTexasPokerPlayerRankInfoReq struct {
	lChannelId    int64
	lSubChannelId int64
}

func (self *GetTexasPokerPlayerRankInfoReq) ResetDefault() {
}

func (self *GetTexasPokerPlayerRankInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetTexasPokerPlayerRankInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetTexasPokerPlayerRankInfoRsp struct {
	vPlayerRankInfo []TexasPokerPlayerRankInfo
}

func (self *GetTexasPokerPlayerRankInfoRsp) ResetDefault() {
}

func (self *GetTexasPokerPlayerRankInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vPlayerRankInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetTexasPokerPlayerRankInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPlayerRankInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type CoverHostReq struct {
	tId UserId
}

func (self *CoverHostReq) ResetDefault() {
}

func (self *CoverHostReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *CoverHostReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type CoverHostRsp struct {
	iRet int32
}

func (self *CoverHostRsp) ResetDefault() {
}

func (self *CoverHostRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRet))
	if err != nil {
		return err
	}
	return err
}

func (self *CoverHostRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRet), 0)
	if err != nil {
		return err
	}
	return err
}

type CoverHostInfo struct {
	lUid      int64
	iWarnType int32
	sWarnName string
	sWarnTips string
	iTime     int32
	iStatus   int32
	sWarnUrl  string
}

func (self *CoverHostInfo) ResetDefault() {
}

func (self *CoverHostInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iWarnType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sWarnName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sWarnTips))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sWarnUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *CoverHostInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWarnType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWarnName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWarnTips), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWarnUrl), 6)
	if err != nil {
		return err
	}
	return err
}

type GetMLiveGameNameInfoReq struct {
	tId  UserId
	sMd5 string
}

func (self *GetMLiveGameNameInfoReq) ResetDefault() {
}

func (self *GetMLiveGameNameInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMd5))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMLiveGameNameInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 1)
	if err != nil {
		return err
	}
	return err
}

type MLiveGameNameInfo struct {
	tInfo              GameNameInfo
	iDefaultScreenType int32
}

func (self *MLiveGameNameInfo) ResetDefault() {
}

func (self *MLiveGameNameInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iDefaultScreenType))
	if err != nil {
		return err
	}
	return err
}

func (self *MLiveGameNameInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDefaultScreenType), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMLiveGameNameInfoRsp struct {
	vGameInfos []MLiveGameNameInfo
	sMd5       string
}

func (self *GetMLiveGameNameInfoRsp) ResetDefault() {
}

func (self *GetMLiveGameNameInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameInfos))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMd5))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMLiveGameNameInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameInfos), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 1)
	if err != nil {
		return err
	}
	return err
}

type GetPhoneByUserIdReq struct {
	tId UserId
}

func (self *GetPhoneByUserIdReq) ResetDefault() {
}

func (self *GetPhoneByUserIdReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPhoneByUserIdReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetPhoneByUserIdRsp struct {
	iValidate int32
	sPhone    string
}

func (self *GetPhoneByUserIdRsp) ResetDefault() {
}

func (self *GetPhoneByUserIdRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iValidate))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sPhone))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPhoneByUserIdRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iValidate), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPhone), 1)
	if err != nil {
		return err
	}
	return err
}

type GetPresenterVeriInfoReq struct {
	tId           UserId
	lPresenterUid int64
}

func (self *GetPresenterVeriInfoReq) ResetDefault() {
}

func (self *GetPresenterVeriInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPresenterVeriInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetPresenterVeriInfoRsp struct {
	iVerified       int32
	sVerifiedAvatar string
	sPresenterName  string
	sVerifyUrl      string
	iIsForceVerify  int32
}

func (self *GetPresenterVeriInfoRsp) ResetDefault() {
}

func (self *GetPresenterVeriInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iVerified))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sVerifiedAvatar))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sPresenterName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sVerifyUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iIsForceVerify))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPresenterVeriInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iVerified), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVerifiedAvatar), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVerifyUrl), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsForceVerify), 4)
	if err != nil {
		return err
	}
	return err
}

type GetDllPathReq struct {
	tId           UserId
	lHostId       int64
	lChannelid    int64
	lSubChannelid int64
}

func (self *GetDllPathReq) ResetDefault() {
}

func (self *GetDllPathReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lHostId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannelid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannelid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetDllPathReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lHostId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelid), 3)
	if err != nil {
		return err
	}
	return err
}

type GetDllPathRsp struct {
	sPath string
	sMd5  string
}

func (self *GetDllPathRsp) ResetDefault() {
}

func (self *GetDllPathRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sPath))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMd5))
	if err != nil {
		return err
	}
	return err
}

func (self *GetDllPathRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sPath), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 1)
	if err != nil {
		return err
	}
	return err
}

type WebSocketCommand struct {
	iCmdType int32
	vData    []byte
}

func (self *WebSocketCommand) ResetDefault() {
}

func (self *WebSocketCommand) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCmdType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vData))
	if err != nil {
		return err
	}
	return err
}

func (self *WebSocketCommand) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCmdType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vData), 1)
	if err != nil {
		return err
	}
	return err
}

type WSVerifyCookieReq struct {
	lUid    int64
	sUA     string
	sCookie string
}

func (self *WSVerifyCookieReq) ResetDefault() {
}

func (self *WSVerifyCookieReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sUA))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sCookie))
	if err != nil {
		return err
	}
	return err
}

func (self *WSVerifyCookieReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUA), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCookie), 2)
	if err != nil {
		return err
	}
	return err
}

type WSVerifyCookieRsp struct {
	iValidate int32
}

func (self *WSVerifyCookieRsp) ResetDefault() {
}

func (self *WSVerifyCookieRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iValidate))
	if err != nil {
		return err
	}
	return err
}

func (self *WSVerifyCookieRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iValidate), 0)
	if err != nil {
		return err
	}
	return err
}

type WSVerifyHuyaTokenReq struct {
	tId UserId
}

func (self *WSVerifyHuyaTokenReq) ResetDefault() {
}

func (self *WSVerifyHuyaTokenReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *WSVerifyHuyaTokenReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type WSVerifyHuyaTokenRsp struct {
	iValidate int32
}

func (self *WSVerifyHuyaTokenRsp) ResetDefault() {
}

func (self *WSVerifyHuyaTokenRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iValidate))
	if err != nil {
		return err
	}
	return err
}

func (self *WSVerifyHuyaTokenRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iValidate), 0)
	if err != nil {
		return err
	}
	return err
}

type WSUserInfo struct {
	lUid       int64
	bAnonymous bool
	sGuid      string
	sToken     string
	lTid       int64
	lSid       int64
	lGroupId   int64
	lGroupType int64
}

func (self *WSUserInfo) ResetDefault() {
}

func (self *WSUserInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.bAnonymous))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sGuid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sToken))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lGroupId))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lGroupType))
	if err != nil {
		return err
	}
	return err
}

func (self *WSUserInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bAnonymous), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGuid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sToken), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGroupId), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGroupType), 7)
	if err != nil {
		return err
	}
	return err
}

type WSRegisterRsp struct {
	iResCode    int32
	lRequestId  int64
	sMessage    string
	sBCConnHost string
}

func (self *WSRegisterRsp) ResetDefault() {
}

func (self *WSRegisterRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iResCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lRequestId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sMessage))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sBCConnHost))
	if err != nil {
		return err
	}
	return err
}

func (self *WSRegisterRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iResCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lRequestId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMessage), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBCConnHost), 3)
	if err != nil {
		return err
	}
	return err
}

type WSDeRegisterReq struct {
	iDeRegisterType int32
}

func (self *WSDeRegisterReq) ResetDefault() {
}

func (self *WSDeRegisterReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iDeRegisterType))
	if err != nil {
		return err
	}
	return err
}

func (self *WSDeRegisterReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iDeRegisterType), 0)
	if err != nil {
		return err
	}
	return err
}

type WSDeRegisterRsp struct {
	iResCode int32
}

func (self *WSDeRegisterRsp) ResetDefault() {
}

func (self *WSDeRegisterRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iResCode))
	if err != nil {
		return err
	}
	return err
}

func (self *WSDeRegisterRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iResCode), 0)
	if err != nil {
		return err
	}
	return err
}

type WSPushMessage struct {
	ePushType     int32
	iUri          int64
	sMsg          []byte
	iProtocolType int32
}

func (self *WSPushMessage) ResetDefault() {
}

func (self *WSPushMessage) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.ePushType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iUri))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sMsg))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iProtocolType))
	if err != nil {
		return err
	}
	return err
}

func (self *WSPushMessage) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.ePushType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUri), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iProtocolType), 3)
	if err != nil {
		return err
	}
	return err
}

type WSHeartBeat struct {
	iState int32
}

func (self *WSHeartBeat) ResetDefault() {
}

func (self *WSHeartBeat) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iState))
	if err != nil {
		return err
	}
	return err
}

func (self *WSHeartBeat) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iState), 0)
	if err != nil {
		return err
	}
	return err
}

type GetZhuShouTipsReq struct {
	tId UserId
}

func (self *GetZhuShouTipsReq) ResetDefault() {
}

func (self *GetZhuShouTipsReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetZhuShouTipsReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetZhuShouTipsRsp struct {
	iStop int32
	sTips string
}

func (self *GetZhuShouTipsRsp) ResetDefault() {
}

func (self *GetZhuShouTipsRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStop))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sTips))
	if err != nil {
		return err
	}
	return err
}

func (self *GetZhuShouTipsRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStop), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTips), 1)
	if err != nil {
		return err
	}
	return err
}

type GameRecBanner struct {
	lId         int64
	lGid        int64
	iRecType    int32
	lUid        int64
	lChannel    int64
	lSubChannel int64
	sTitle      string
	sPicUrl     string
	sWebUrl     string
	sAppUrl     string
}

func (self *GameRecBanner) ResetDefault() {
}

func (self *GameRecBanner) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lGid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iRecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sPicUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sWebUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sAppUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *GameRecBanner) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRecType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTitle), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPicUrl), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWebUrl), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAppUrl), 9)
	if err != nil {
		return err
	}
	return err
}

type GameRecBannerShedule struct {
	iPlatformType   int32
	lBannerId       int64
	iWeight         int32
	lStartDate      int64
	lEndDate        int64
	sDailyStartTime string
	sDailyEndTime   string
	iIsPublish      int32
	iIsTop          int32
}

func (self *GameRecBannerShedule) ResetDefault() {
}

func (self *GameRecBannerShedule) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPlatformType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lBannerId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iWeight))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lStartDate))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lEndDate))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sDailyStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sDailyEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iIsPublish))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iIsTop))
	if err != nil {
		return err
	}
	return err
}

func (self *GameRecBannerShedule) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPlatformType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBannerId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeight), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartDate), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndDate), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDailyStartTime), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDailyEndTime), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsPublish), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsTop), 8)
	if err != nil {
		return err
	}
	return err
}

type GameRecBannerSheduleDetail struct {
	iPlatformType   int32
	lBannerId       int64
	iWeight         int32
	lStartDate      int64
	lEndDate        int64
	sDailyStartTime string
	sDailyEndTime   string
	iIsPublish      int32
	iIsTop          int32
	iGid            int32
	iRecType        int32
	lUid            int64
	lChannel        int64
	lSubChannel     int64
	sTitle          string
	sPicUrl         string
	sWebUrl         string
	sAppUrl         string
	sAppResultUrl   string
	sWebResultUrl   string
	sGameName       string
	iRand           int32
}

func (self *GameRecBannerSheduleDetail) ResetDefault() {
}

func (self *GameRecBannerSheduleDetail) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPlatformType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lBannerId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iWeight))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lStartDate))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lEndDate))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sDailyStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sDailyEndTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iIsPublish))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iIsTop))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iGid))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iRecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.sTitle))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.sPicUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.sWebUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.sAppUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.sAppResultUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.sWebResultUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(20, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(21, false, &(self.iRand))
	if err != nil {
		return err
	}
	return err
}

func (self *GameRecBannerSheduleDetail) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPlatformType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBannerId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWeight), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStartDate), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lEndDate), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDailyStartTime), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDailyEndTime), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsPublish), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsTop), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGid), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRecType), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTitle), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPicUrl), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWebUrl), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAppUrl), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAppResultUrl), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWebResultUrl), 19)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 20)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRand), 21)
	if err != nil {
		return err
	}
	return err
}

type WebBannerItem struct {
	sPicUrl    string
	sActionUrl string
	lGid       int64
	sGameName  string
}

func (self *WebBannerItem) ResetDefault() {
}

func (self *WebBannerItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sPicUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sActionUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lGid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sGameName))
	if err != nil {
		return err
	}
	return err
}

func (self *WebBannerItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sPicUrl), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sActionUrl), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 3)
	if err != nil {
		return err
	}
	return err
}

type GetPhoneBannerReq struct {
	tId     UserId
	lGameId int64
}

func (self *GetPhoneBannerReq) ResetDefault() {
}

func (self *GetPhoneBannerReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPhoneBannerReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGameId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetPhoneBannerRsp struct {
	vBanner []BannerItem
}

func (self *GetPhoneBannerRsp) ResetDefault() {
}

func (self *GetPhoneBannerRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vBanner))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPhoneBannerRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vBanner), 0)
	if err != nil {
		return err
	}
	return err
}

type GetWebBannerReq struct {
	tId     UserId
	lGameId int64
}

func (self *GetWebBannerReq) ResetDefault() {
}

func (self *GetWebBannerReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetWebBannerReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGameId), 1)
	if err != nil {
		return err
	}
	return err
}

type GetWebBannerRsp struct {
	vBanner []WebBannerItem
}

func (self *GetWebBannerRsp) ResetDefault() {
}

func (self *GetWebBannerRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vBanner))
	if err != nil {
		return err
	}
	return err
}

func (self *GetWebBannerRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vBanner), 0)
	if err != nil {
		return err
	}
	return err
}

type AuditorItem struct {
	lUid       int64
	lYYID      int64
	sNick      string
	sAvatarUrl string
}

func (self *AuditorItem) ResetDefault() {
}

func (self *AuditorItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lYYID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *AuditorItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 3)
	if err != nil {
		return err
	}
	return err
}

type GetAuditorListReq struct {
	tId           UserId
	lPresenterUid int64
}

func (self *GetAuditorListReq) ResetDefault() {
}

func (self *GetAuditorListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAuditorListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetAuditorListRsp struct {
	vAuditorItem []AuditorItem
}

func (self *GetAuditorListRsp) ResetDefault() {
}

func (self *GetAuditorListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vAuditorItem))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAuditorListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vAuditorItem), 0)
	if err != nil {
		return err
	}
	return err
}

type AlterAuditorReq struct {
	tId           UserId
	lAuditorUid   int64
	lPresenterUid int64
	iAction       int32
}

func (self *AlterAuditorReq) ResetDefault() {
}

func (self *AlterAuditorReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lAuditorUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iAction))
	if err != nil {
		return err
	}
	return err
}

func (self *AlterAuditorReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAuditorUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAction), 3)
	if err != nil {
		return err
	}
	return err
}

type AlterAuditorRsp struct {
	iRetCode int32
	sMsg     string
}

func (self *AlterAuditorRsp) ResetDefault() {
}

func (self *AlterAuditorRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *AlterAuditorRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 1)
	if err != nil {
		return err
	}
	return err
}

type MuteRoomUserReq struct {
	tId           UserId
	lUid          int64
	sText         string
	lPresenterUid int64
	lSubcid       int64
	iMutedTime    int32
	iMutedAction  int32
	iReasonType   int32
	sReason       string
}

func (self *MuteRoomUserReq) ResetDefault() {
}

func (self *MuteRoomUserReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sText))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSubcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iMutedTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iMutedAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iReasonType))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sReason))
	if err != nil {
		return err
	}
	return err
}

func (self *MuteRoomUserReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sText), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubcid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMutedTime), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMutedAction), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iReasonType), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sReason), 8)
	if err != nil {
		return err
	}
	return err
}

type MuteRoomUserRsp struct {
	iRetCode int32
	sMsg     string
}

func (self *MuteRoomUserRsp) ResetDefault() {
}

func (self *MuteRoomUserRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *MuteRoomUserRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 1)
	if err != nil {
		return err
	}
	return err
}

type UnMuteRoomUserReq struct {
	tId           UserId
	lUid          int64
	lPresenterUid int64
	lSubcid       int64
	iUnMuteAction int32
	sIP           string
}

func (self *UnMuteRoomUserReq) ResetDefault() {
}

func (self *UnMuteRoomUserReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iUnMuteAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sIP))
	if err != nil {
		return err
	}
	return err
}

func (self *UnMuteRoomUserReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubcid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnMuteAction), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIP), 5)
	if err != nil {
		return err
	}
	return err
}

type UnMuteRoomUserRsp struct {
	iRetCode int32
	sMsg     string
}

func (self *UnMuteRoomUserRsp) ResetDefault() {
}

func (self *UnMuteRoomUserRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *UnMuteRoomUserRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 1)
	if err != nil {
		return err
	}
	return err
}

type IsMutedReq struct {
	lUid    int64
	lSubcid int64
	lTopcid int64
}

func (self *IsMutedReq) ResetDefault() {
}

func (self *IsMutedReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lTopcid))
	if err != nil {
		return err
	}
	return err
}

func (self *IsMutedReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubcid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopcid), 2)
	if err != nil {
		return err
	}
	return err
}

type IsMutedRsp struct {
	bMuted           bool
	iMutedTime       int32
	lAutoUnmutedTime int64
	iMutedType       int32
}

func (self *IsMutedRsp) ResetDefault() {
}

func (self *IsMutedRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.bMuted))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMutedTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lAutoUnmutedTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iMutedType))
	if err != nil {
		return err
	}
	return err
}

func (self *IsMutedRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.bMuted), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMutedTime), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAutoUnmutedTime), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMutedType), 3)
	if err != nil {
		return err
	}
	return err
}

type GetUserTypeReq struct {
	tId           UserId
	lUid          int64
	lPresenterUid int64
	lTid          int64
	lSubcid       int64
}

func (self *GetUserTypeReq) ResetDefault() {
}

func (self *GetUserTypeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSubcid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserTypeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubcid), 4)
	if err != nil {
		return err
	}
	return err
}

type GetUserTypeRsp struct {
	lUid          int64
	lPresenterUid int64
	iType         int32
	tIsMutedRsp   IsMutedRsp
}

func (self *GetUserTypeRsp) ResetDefault() {
}

func (self *GetUserTypeRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.tIsMutedRsp))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserTypeRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tIsMutedRsp), 4)
	if err != nil {
		return err
	}
	return err
}

type AuditorEnterLiveNotice struct {
	iUserType                int32
	lUid                     int64
	sNick                    string
	bSendMessagePopUp        bool
	sSendMessageTips         string
	lSubcid                  int64
	iSendMessagePopUpAmtTime int32
}

func (self *AuditorEnterLiveNotice) ResetDefault() {
}

func (self *AuditorEnterLiveNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iUserType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.bSendMessagePopUp))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sSendMessageTips))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSubcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iSendMessagePopUpAmtTime))
	if err != nil {
		return err
	}
	return err
}

func (self *AuditorEnterLiveNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iUserType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bSendMessagePopUp), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSendMessageTips), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubcid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSendMessagePopUpAmtTime), 6)
	if err != nil {
		return err
	}
	return err
}

type AuditorRoleChangeNotice struct {
	iOldUserType             int32
	iNewUserType             int32
	lUid                     int64
	lSubcid                  int64
	sNick                    string
	bPopUp                   bool
	sSystemTips              string
	bSendMessagePopUp        bool
	sSendMessageTips         string
	iSendMessagePopUpAmtTime int32
}

func (self *AuditorRoleChangeNotice) ResetDefault() {
}

func (self *AuditorRoleChangeNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iOldUserType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iNewUserType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.bPopUp))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sSystemTips))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.bSendMessagePopUp))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sSendMessageTips))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iSendMessagePopUpAmtTime))
	if err != nil {
		return err
	}
	return err
}

func (self *AuditorRoleChangeNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iOldUserType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNewUserType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubcid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bPopUp), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSystemTips), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bSendMessagePopUp), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSendMessageTips), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSendMessagePopUpAmtTime), 9)
	if err != nil {
		return err
	}
	return err
}

type BatchAddAuditorWithGroupReq struct {
	tId            UserId
	iGroupID       int32
	vPresenterYYID []int64
	vAuditorYYID   []int64
}

func (self *BatchAddAuditorWithGroupReq) ResetDefault() {
}

func (self *BatchAddAuditorWithGroupReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGroupID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vPresenterYYID))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vAuditorYYID))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchAddAuditorWithGroupReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGroupID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPresenterYYID), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vAuditorYYID), 3)
	if err != nil {
		return err
	}
	return err
}

type BatchAddAuditorWithGroupRsp struct {
	iRetCode int32
	sMsg     string
}

func (self *BatchAddAuditorWithGroupRsp) ResetDefault() {
}

func (self *BatchAddAuditorWithGroupRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchAddAuditorWithGroupRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 1)
	if err != nil {
		return err
	}
	return err
}

type DelRoomAuditorGroupReq struct {
	tId      UserId
	iGroupID int32
}

func (self *DelRoomAuditorGroupReq) ResetDefault() {
}

func (self *DelRoomAuditorGroupReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGroupID))
	if err != nil {
		return err
	}
	return err
}

func (self *DelRoomAuditorGroupReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGroupID), 1)
	if err != nil {
		return err
	}
	return err
}

type DelRoomAuditorGroupRsp struct {
	iRetCode int32
	sMsg     string
}

func (self *DelRoomAuditorGroupRsp) ResetDefault() {
}

func (self *DelRoomAuditorGroupRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *DelRoomAuditorGroupRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 1)
	if err != nil {
		return err
	}
	return err
}

type CreateRoomAuditorGroupReq struct {
	tId        UserId
	sGroupName string
}

func (self *CreateRoomAuditorGroupReq) ResetDefault() {
}

func (self *CreateRoomAuditorGroupReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sGroupName))
	if err != nil {
		return err
	}
	return err
}

func (self *CreateRoomAuditorGroupReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGroupName), 1)
	if err != nil {
		return err
	}
	return err
}

type CreateRoomAuditorGroupRsp struct {
	iRetCode int32
	sMsg     string
}

func (self *CreateRoomAuditorGroupRsp) ResetDefault() {
}

func (self *CreateRoomAuditorGroupRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *CreateRoomAuditorGroupRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 1)
	if err != nil {
		return err
	}
	return err
}

type CancelGlobalMuteReq struct {
	tId          UserId
	lUid         int64
	iMutedAction int32
}

func (self *CancelGlobalMuteReq) ResetDefault() {
}

func (self *CancelGlobalMuteReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iMutedAction))
	if err != nil {
		return err
	}
	return err
}

func (self *CancelGlobalMuteReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMutedAction), 2)
	if err != nil {
		return err
	}
	return err
}

type CancelGlobalMuteRsp struct {
	iRetCode int32
	sMsg     string
}

func (self *CancelGlobalMuteRsp) ResetDefault() {
}

func (self *CancelGlobalMuteRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *CancelGlobalMuteRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 1)
	if err != nil {
		return err
	}
	return err
}

type RoomAuditConf struct {
	iGroupID int32
	vData    []byte
}

func (self *RoomAuditConf) ResetDefault() {
}

func (self *RoomAuditConf) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGroupID))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vData))
	if err != nil {
		return err
	}
	return err
}

func (self *RoomAuditConf) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGroupID), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vData), 1)
	if err != nil {
		return err
	}
	return err
}

type GetAuditorRoleReq struct {
	tId           UserId
	lPresenterUid int64
	lSubcid       int64
	lTid          int64
}

func (self *GetAuditorRoleReq) ResetDefault() {
}

func (self *GetAuditorRoleReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubcid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lTid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAuditorRoleReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubcid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 3)
	if err != nil {
		return err
	}
	return err
}

type SpeakSwitchItem struct {
	iItemID int32
	iValue  int32
}

func (self *SpeakSwitchItem) ResetDefault() {
}

func (self *SpeakSwitchItem) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iItemID))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iValue))
	if err != nil {
		return err
	}
	return err
}

func (self *SpeakSwitchItem) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iItemID), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iValue), 1)
	if err != nil {
		return err
	}
	return err
}

type RoomAuditCommonRsp struct {
	iRetCode int32
	sMsg     string
}

func (self *RoomAuditCommonRsp) ResetDefault() {
}

func (self *RoomAuditCommonRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMsg))
	if err != nil {
		return err
	}
	return err
}

func (self *RoomAuditCommonRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMsg), 1)
	if err != nil {
		return err
	}
	return err
}

type SetRoomAuditConfReq struct {
	tId              UserId
	lTopCid          int64
	lSubCid          int64
	lPresenterUid    int64
	vSpeakSwitchItem []SpeakSwitchItem
}

func (self *SetRoomAuditConfReq) ResetDefault() {
}

func (self *SetRoomAuditConfReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vSpeakSwitchItem))
	if err != nil {
		return err
	}
	return err
}

func (self *SetRoomAuditConfReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopCid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubCid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSpeakSwitchItem), 4)
	if err != nil {
		return err
	}
	return err
}

type GetRoomAuditConfReq struct {
	tId           UserId
	lTopCid       int64
	lSubCid       int64
	lPresenterUid int64
}

func (self *GetRoomAuditConfReq) ResetDefault() {
}

func (self *GetRoomAuditConfReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRoomAuditConfReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopCid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubCid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 3)
	if err != nil {
		return err
	}
	return err
}

type GetRoomAuditConfRsp struct {
	lPresenterUid    int64
	vSpeakSwitchItem []SpeakSwitchItem
}

func (self *GetRoomAuditConfRsp) ResetDefault() {
}

func (self *GetRoomAuditConfRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vSpeakSwitchItem))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRoomAuditConfRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPresenterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSpeakSwitchItem), 1)
	if err != nil {
		return err
	}
	return err
}

type SpeakSwitchConf struct {
	vSpeakSwitchItem []SpeakSwitchItem
}

func (self *SpeakSwitchConf) ResetDefault() {
}

func (self *SpeakSwitchConf) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vSpeakSwitchItem))
	if err != nil {
		return err
	}
	return err
}

func (self *SpeakSwitchConf) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vSpeakSwitchItem), 0)
	if err != nil {
		return err
	}
	return err
}

type GetYYUserInfoReq struct {
	tId   UserId
	lYYID int64
}

func (self *GetYYUserInfoReq) ResetDefault() {
}

func (self *GetYYUserInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lYYID))
	if err != nil {
		return err
	}
	return err
}

func (self *GetYYUserInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYID), 1)
	if err != nil {
		return err
	}
	return err
}

type GetYYUserInfoRsp struct {
	lYYID      int64
	lUid       int64
	sNick      string
	sAvatarUrl string
}

func (self *GetYYUserInfoRsp) ResetDefault() {
}

func (self *GetYYUserInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lYYID))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *GetYYUserInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lYYID), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 3)
	if err != nil {
		return err
	}
	return err
}

type DBUserInfo struct {
	lUid          int64
	sPassport     string
	sAccount      string
	sNick         string
	iSex          int32
	iBirthday     int32
	sArea         string
	sProvince     string
	sCity         string
	sSign         string
	sIntro        string
	iJifen        int32
	sRegisterTime string
	sHdlogo       string
	sSessionCard  string
	lImid         int64
	iLogoIndex    int32
}

func (self *DBUserInfo) ResetDefault() {
}

func (self *DBUserInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sPassport))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sAccount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iSex))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iBirthday))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sArea))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sProvince))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sCity))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sSign))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.sIntro))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iJifen))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.sRegisterTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.sHdlogo))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.sSessionCard))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.lImid))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.iLogoIndex))
	if err != nil {
		return err
	}
	return err
}

func (self *DBUserInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPassport), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAccount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSex), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBirthday), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sArea), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sProvince), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCity), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSign), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIntro), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iJifen), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sRegisterTime), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHdlogo), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSessionCard), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lImid), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLogoIndex), 17)
	if err != nil {
		return err
	}
	return err
}

type GetWebdbUserInfoReq struct {
	lUid        int64
	lImid       int64
	sPassport   string
	sAccount    string
	bCacheFirst bool
}

func (self *GetWebdbUserInfoReq) ResetDefault() {
}

func (self *GetWebdbUserInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lImid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sPassport))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sAccount))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.bCacheFirst))
	if err != nil {
		return err
	}
	return err
}

func (self *GetWebdbUserInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lImid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPassport), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAccount), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bCacheFirst), 4)
	if err != nil {
		return err
	}
	return err
}

type GetWebdbUserInfoRsp struct {
	tUserInfo DBUserInfo
}

func (self *GetWebdbUserInfoRsp) ResetDefault() {
}

func (self *GetWebdbUserInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetWebdbUserInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type UploadLogNotice struct {
	iClientType      int32
	iSampleRatio     int32
	iUploadNetLevel  int32
	iUploadBackupLog int32
	sContent         string
}

func (self *UploadLogNotice) ResetDefault() {
}

func (self *UploadLogNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iClientType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iSampleRatio))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iUploadNetLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iUploadBackupLog))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sContent))
	if err != nil {
		return err
	}
	return err
}

func (self *UploadLogNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iClientType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSampleRatio), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUploadNetLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUploadBackupLog), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sContent), 4)
	if err != nil {
		return err
	}
	return err
}

type TexasPlayerBaseInfo struct {
	lUid        int64
	iPosition   int32
	iBankroll   int32
	iWinGames   int32
	iTotalGames int32
	iStatus     int32
	sNick       string
	sLogoURL    string
}

func (self *TexasPlayerBaseInfo) ResetDefault() {
}

func (self *TexasPlayerBaseInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPosition))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBankroll))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iWinGames))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iTotalGames))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sLogoURL))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPlayerBaseInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPosition), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBankroll), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinGames), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalGames), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL), 7)
	if err != nil {
		return err
	}
	return err
}

type TexasPlayerDetailInfo struct {
	lUid        int64
	iPosition   int32
	iBankroll   int32
	iWinGames   int32
	iTotalGames int32
	iStatus     int32
	sNick       string
	sLogoURL    string
	iTotalBet   int32
	iBetInRound int32
	iCurAction  int32
	vCardInfo   []TexasCardInfo
}

func (self *TexasPlayerDetailInfo) ResetDefault() {
}

func (self *TexasPlayerDetailInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iPosition))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBankroll))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iWinGames))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iTotalGames))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sLogoURL))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iTotalBet))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iBetInRound))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iCurAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.vCardInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPlayerDetailInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPosition), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBankroll), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinGames), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalGames), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalBet), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetInRound), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCurAction), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vCardInfo), 11)
	if err != nil {
		return err
	}
	return err
}

type TexasKickOutReq struct {
	tUserId    UserId
	lDeskID    int64
	lPlayerUid int64
}

func (self *TexasKickOutReq) ResetDefault() {
}

func (self *TexasKickOutReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lPlayerUid))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasKickOutReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPlayerUid), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasKickOutRsp struct {
	iRspCode   int32
	lPlayerUid int64
}

func (self *TexasKickOutRsp) ResetDefault() {
}

func (self *TexasKickOutRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPlayerUid))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasKickOutRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRspCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPlayerUid), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasJoinGameReq struct {
	tId                UserId
	lDeskID            int64
	iPosition          int32
	iBankroll          int32
	iFreeTicketType    int32
	sNick              string
	sLogoURL           string
	iExchangeGameMoney int32
}

func (self *TexasJoinGameReq) ResetDefault() {
}

func (self *TexasJoinGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPosition))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBankroll))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iFreeTicketType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sLogoURL))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iExchangeGameMoney))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasJoinGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPosition), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBankroll), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFreeTicketType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iExchangeGameMoney), 7)
	if err != nil {
		return err
	}
	return err
}

type TexasJoinGameBroadcast struct {
	tPlayerInfo TexasPlayerBaseInfo
}

func (self *TexasJoinGameBroadcast) ResetDefault() {
}

func (self *TexasJoinGameBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tPlayerInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasJoinGameBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tPlayerInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type TexasJoinGameRsp struct {
	iRspCode    int32
	tPlayerInfo TexasPlayerBaseInfo
}

func (self *TexasJoinGameRsp) ResetDefault() {
}

func (self *TexasJoinGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tPlayerInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasJoinGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRspCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tPlayerInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasLeaveGameReq struct {
	tId     UserId
	lDeskId int64
}

func (self *TexasLeaveGameReq) ResetDefault() {
}

func (self *TexasLeaveGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskId))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasLeaveGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskId), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasLeaveGameRsp struct {
	iRspCode int32
	lUid     int64
}

func (self *TexasLeaveGameRsp) ResetDefault() {
}

func (self *TexasLeaveGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasLeaveGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRspCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasPlayerLeaveBroadcast struct {
	lUid    int64
	lDeskId int64
}

func (self *TexasPlayerLeaveBroadcast) ResetDefault() {
}

func (self *TexasPlayerLeaveBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskId))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPlayerLeaveBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskId), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasActionNotice struct {
	lUid         int64
	iValidAction int32
	iMinBets     int32
	iMaxBets     int32
	iCountDown   int32
	iBetInRound  int32
	iBetLeft     int32
}

func (self *TexasActionNotice) ResetDefault() {
}

func (self *TexasActionNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iValidAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iMinBets))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iMaxBets))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iCountDown))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iBetInRound))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iBetLeft))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasActionNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iValidAction), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMinBets), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMaxBets), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCountDown), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetInRound), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetLeft), 6)
	if err != nil {
		return err
	}
	return err
}

type TexasActionReq struct {
	tId         UserId
	lDeskID     int64
	iActionType int32
	iAmount     int32
}

func (self *TexasActionReq) ResetDefault() {
}

func (self *TexasActionReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iActionType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iAmount))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasActionReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActionType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAmount), 3)
	if err != nil {
		return err
	}
	return err
}

type TexasActionRsp struct {
	iRspCode    int32
	lUid        int64
	iActionType int32
	iAmount     int32
	iBetInRound int32
	iBetLeft    int32
	iGameRound  int32
}

func (self *TexasActionRsp) ResetDefault() {
}

func (self *TexasActionRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iActionType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iAmount))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iBetInRound))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iBetLeft))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iGameRound))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasActionRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRspCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActionType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAmount), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetInRound), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetLeft), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameRound), 6)
	if err != nil {
		return err
	}
	return err
}

type TexasRoundOverBroadcast struct {
	iGameRound int32
	vPotList   []int32
}

func (self *TexasRoundOverBroadcast) ResetDefault() {
}

func (self *TexasRoundOverBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameRound))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vPotList))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasRoundOverBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameRound), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPotList), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasGameSettleInfo struct {
	lUid           int64
	iHandCardsType int32
	iBetIn         int32
	iBetOut        int32
	iRank          int32
	vHandCards     []TexasCardInfo
}

func (self *TexasGameSettleInfo) ResetDefault() {
}

func (self *TexasGameSettleInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iHandCardsType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBetIn))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBetOut))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vHandCards))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasGameSettleInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHandCardsType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetIn), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetOut), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRank), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vHandCards), 5)
	if err != nil {
		return err
	}
	return err
}

type TexasGameSettleBroadcast struct {
	vSettleInfoList []TexasGameSettleInfo
}

func (self *TexasGameSettleBroadcast) ResetDefault() {
}

func (self *TexasGameSettleBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vSettleInfoList))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasGameSettleBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vSettleInfoList), 0)
	if err != nil {
		return err
	}
	return err
}

type TexasPlayerCardInfo struct {
	lUid      int64
	vCardInfo []TexasCardInfo
}

func (self *TexasPlayerCardInfo) ResetDefault() {
}

func (self *TexasPlayerCardInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vCardInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPlayerCardInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vCardInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasShowCardBroadcast struct {
	vPlayerCardInfoList []TexasPlayerCardInfo
}

func (self *TexasShowCardBroadcast) ResetDefault() {
}

func (self *TexasShowCardBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vPlayerCardInfoList))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasShowCardBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vPlayerCardInfoList), 0)
	if err != nil {
		return err
	}
	return err
}

type TexasGameOverBroadcast struct {
	lDeskID  int64
	iGameID  int32
	iEndCode int32
}

func (self *TexasGameOverBroadcast) ResetDefault() {
}

func (self *TexasGameOverBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iEndCode))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasGameOverBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lDeskID), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEndCode), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasDealCardsNotice struct {
	lUid     int64
	iCardIdx int32
	iFlag    int32
}

func (self *TexasDealCardsNotice) ResetDefault() {
}

func (self *TexasDealCardsNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCardIdx))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasDealCardsNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCardIdx), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFlag), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasDealCardReq struct {
	tUserId   UserId
	lDeskID   int64
	tCardInfo TexasCardInfo
}

func (self *TexasDealCardReq) ResetDefault() {
}

func (self *TexasDealCardReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tCardInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasDealCardReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tCardInfo), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasDealCardRsp struct {
	iRspCode int32
}

func (self *TexasDealCardRsp) ResetDefault() {
}

func (self *TexasDealCardRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasDealCardRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRspCode), 0)
	if err != nil {
		return err
	}
	return err
}

type TexasSetLiveInfoReq struct {
	tUserId       UserId
	lYYId         int64
	lChannel      int64
	lSubChannel   int64
	iLevel        int32
	iModel        int32
	sNick         string
	sLogoURL      string
	sIntroduction string
	lDeskID       int64
}

func (self *TexasSetLiveInfoReq) ResetDefault() {
}

func (self *TexasSetLiveInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lYYId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iModel))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sLogoURL))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sIntroduction))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasSetLiveInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iModel), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIntroduction), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 9)
	if err != nil {
		return err
	}
	return err
}

type TexasSetLiveInfoRsp struct {
	iRspCode int32
	lPid     int64
	lDeskID  int64
}

func (self *TexasSetLiveInfoRsp) ResetDefault() {
}

func (self *TexasSetLiveInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasSetLiveInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRspCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasLiveInfoBroadcast struct {
	lDeskID       int64
	lPid          int64
	iLevel        int32
	iModel        int32
	iChipType     int32
	sIntroduction string
}

func (self *TexasLiveInfoBroadcast) ResetDefault() {
}

func (self *TexasLiveInfoBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iModel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iChipType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sIntroduction))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasLiveInfoBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lDeskID), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iModel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChipType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIntroduction), 5)
	if err != nil {
		return err
	}
	return err
}

type TexasStartGameReq struct {
	tUserId UserId
	lDeskID int64
}

func (self *TexasStartGameReq) ResetDefault() {
}

func (self *TexasStartGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasStartGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasStartGameRsp struct {
	iRspCode int32
	lDeskID  int64
}

func (self *TexasStartGameRsp) ResetDefault() {
}

func (self *TexasStartGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasStartGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRspCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasStartPlayerInfo struct {
	lUid        int64
	iBankroll   int32
	iWinGames   int32
	iTotalGames int32
	iStatus     int32
	iPosition   int32
	sNick       string
	sLogoUrl    string
}

func (self *TexasStartPlayerInfo) ResetDefault() {
}

func (self *TexasStartPlayerInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBankroll))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iWinGames))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTotalGames))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iPosition))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sLogoUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasStartPlayerInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBankroll), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinGames), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalGames), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPosition), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoUrl), 7)
	if err != nil {
		return err
	}
	return err
}

type TexasCountdownBroadcast struct {
	lDeskID    int64
	iStatus    int32
	iCountdown int32
}

func (self *TexasCountdownBroadcast) ResetDefault() {
}

func (self *TexasCountdownBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCountdown))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasCountdownBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lDeskID), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCountdown), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasNewGameBroadcast struct {
	lDeskID         int64
	iGameID         int32
	iDealerPosition int32
	vPlayerList     []TexasStartPlayerInfo
	iDeskModel      int32
	iGameLevel      int32
	iDealerId       int32
	lPid            int64
}

func (self *TexasNewGameBroadcast) ResetDefault() {
}

func (self *TexasNewGameBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iDealerPosition))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vPlayerList))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iDeskModel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iGameLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iDealerId))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasNewGameBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lDeskID), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDealerPosition), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPlayerList), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDeskModel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameLevel), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDealerId), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 7)
	if err != nil {
		return err
	}
	return err
}

type TexasDelPlayerBroadcast struct {
	lDeskID   int64
	lUid      int64
	iPosition int32
	iDelType  int32
}

func (self *TexasDelPlayerBroadcast) ResetDefault() {
}

func (self *TexasDelPlayerBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPosition))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iDelType))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasDelPlayerBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lDeskID), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPosition), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDelType), 3)
	if err != nil {
		return err
	}
	return err
}

type TexasGetGameInfoReq struct {
	tId         UserId
	lDeskID     int64
	lChannel    int64
	lSubChannel int64
}

func (self *TexasGetGameInfoReq) ResetDefault() {
}

func (self *TexasGetGameInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasGetGameInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 3)
	if err != nil {
		return err
	}
	return err
}

type TexasGetGameInfoRsp struct {
	lPID              int64
	iGameRound        int32
	iGameLevel        int32
	iDealerUID        int32
	iDeskModel        int32
	iUserRole         int32
	iChipType         int32
	vPublicCardInfo   []TexasCardInfo
	vPotList          []int32
	vPlayerDetailInfo []TexasPlayerDetailInfo
	iRspCode          int32
	lDeskID           int64
}

func (self *TexasGetGameInfoRsp) ResetDefault() {
}

func (self *TexasGetGameInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPID))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameRound))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iGameLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iDealerUID))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iDeskModel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iUserRole))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iChipType))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.vPublicCardInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.vPotList))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.vPlayerDetailInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasGetGameInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPID), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameRound), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameLevel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDealerUID), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDeskModel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUserRole), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChipType), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPublicCardInfo), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPotList), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPlayerDetailInfo), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRspCode), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 11)
	if err != nil {
		return err
	}
	return err
}

type TexasGetDeskListReq struct {
	tUserId    UserId
	iGameLevel int32
	iChipType  int32
}

func (self *TexasGetDeskListReq) ResetDefault() {
}

func (self *TexasGetDeskListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iChipType))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasGetDeskListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameLevel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChipType), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasDeskInfo struct {
	lDeskID          int64
	lChannel         int64
	lSubChannel      int64
	lPID             int64
	lYYID            int64
	iGameLevel       int32
	iGameRound       int32
	iDeskModel       int32
	iTotWeight       int32
	iPresenterIncome int32
	iDealerUID       int32
	iChipType        int32
	sNickname        string
	sLiveScreenshot  string
	sHallName        string
	sDeskName        string
	sLogoURL         string
	iIsSetPasswd     int32
	sIntroduction    string
	sLogoURL2        string
	vPlayerBaseInfo  []TexasPlayerBaseInfo
}

func (self *TexasDeskInfo) ResetDefault() {
}

func (self *TexasDeskInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPID))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lYYID))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iGameLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iGameRound))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iDeskModel))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iTotWeight))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iPresenterIncome))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iDealerUID))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iChipType))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.sNickname))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.sLiveScreenshot))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.sHallName))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.sDeskName))
	if err != nil {
		return err
	}
	err = jis.ReadField(16, false, &(self.sLogoURL))
	if err != nil {
		return err
	}
	err = jis.ReadField(17, false, &(self.iIsSetPasswd))
	if err != nil {
		return err
	}
	err = jis.ReadField(18, false, &(self.sIntroduction))
	if err != nil {
		return err
	}
	err = jis.ReadField(19, false, &(self.sLogoURL2))
	if err != nil {
		return err
	}
	err = jis.ReadField(20, false, &(self.vPlayerBaseInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasDeskInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lDeskID), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPID), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYID), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameLevel), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameRound), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDeskModel), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotWeight), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterIncome), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iDealerUID), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChipType), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickname), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLiveScreenshot), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sHallName), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDeskName), 15)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL), 16)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsSetPasswd), 17)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIntroduction), 18)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sLogoURL2), 19)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vPlayerBaseInfo), 20)
	if err != nil {
		return err
	}
	return err
}

type TexasGetDeskListRsp struct {
	vDeskInfo []TexasDeskInfo
}

func (self *TexasGetDeskListRsp) ResetDefault() {
}

func (self *TexasGetDeskListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vDeskInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasGetDeskListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vDeskInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type TexasSpeakerBanReq struct {
	tUserId       UserId
	lUid          int64
	iOperation    int32
	lDeskId       int64
	lChannelId    int64
	lSubChannelId int64
}

func (self *TexasSpeakerBanReq) ResetDefault() {
}

func (self *TexasSpeakerBanReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iOperation))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lDeskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasSpeakerBanReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOperation), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannelId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 5)
	if err != nil {
		return err
	}
	return err
}

type TexasSpeakerBanRsp struct {
	lUid    int64
	iStatus int32
}

func (self *TexasSpeakerBanRsp) ResetDefault() {
}

func (self *TexasSpeakerBanRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasSpeakerBanRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasSpeakerBanBraodcast struct {
	lUid    int64
	iStatus int32
}

func (self *TexasSpeakerBanBraodcast) ResetDefault() {
}

func (self *TexasSpeakerBanBraodcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasSpeakerBanBraodcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasQuickJoinReq struct {
	tUserId    UserId
	iGameLevel int32
	iChipType  int32
}

func (self *TexasQuickJoinReq) ResetDefault() {
}

func (self *TexasQuickJoinReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iChipType))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasQuickJoinReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameLevel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChipType), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasQuickJoinRsp struct {
	lChannel    int64
	lSubchannel int64
	lYYID       int64
	lDeskId     int64
}

func (self *TexasQuickJoinRsp) ResetDefault() {
}

func (self *TexasQuickJoinRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubchannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lYYID))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lDeskId))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasQuickJoinRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubchannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYID), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskId), 3)
	if err != nil {
		return err
	}
	return err
}

type TexasRechargeBankrollReq struct {
	tUserId   UserId
	lDeskID   int64
	iBankroll int32
	iExchange int32
}

func (self *TexasRechargeBankrollReq) ResetDefault() {
}

func (self *TexasRechargeBankrollReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBankroll))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iExchange))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasRechargeBankrollReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBankroll), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iExchange), 3)
	if err != nil {
		return err
	}
	return err
}

type TexasRechargeBankrollBroadcast struct {
	lDeskID   int64
	lUid      int64
	iBankroll int32
	iStatus   int32
}

func (self *TexasRechargeBankrollBroadcast) ResetDefault() {
}

func (self *TexasRechargeBankrollBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBankroll))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasRechargeBankrollBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lDeskID), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBankroll), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 4)
	if err != nil {
		return err
	}
	return err
}

type TexasPlayerReadyReq struct {
	tUserId UserId
	lDeskID int64
	iStatus int32
}

func (self *TexasPlayerReadyReq) ResetDefault() {
}

func (self *TexasPlayerReadyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPlayerReadyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasPlayerReadyRsp struct {
	iRspCode int32
	lUid     int64
	iStatus  int32
}

func (self *TexasPlayerReadyRsp) ResetDefault() {
}

func (self *TexasPlayerReadyRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRspCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPlayerReadyRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRspCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasPlayerHeartBeatReq struct {
	tUserId UserId
	lDeskID int64
}

func (self *TexasPlayerHeartBeatReq) ResetDefault() {
}

func (self *TexasPlayerHeartBeatReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPlayerHeartBeatReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasPresenterHeartBeatReq struct {
	tUserId UserId
	lDeskID int64
}

func (self *TexasPresenterHeartBeatReq) ResetDefault() {
}

func (self *TexasPresenterHeartBeatReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPresenterHeartBeatReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	return err
}

type PokerPair struct {
	iColor  int16
	iNumber int16
}

func (self *PokerPair) ResetDefault() {
}

func (self *PokerPair) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iColor))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iNumber))
	if err != nil {
		return err
	}
	return err
}

func (self *PokerPair) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iColor), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNumber), 1)
	if err != nil {
		return err
	}
	return err
}

type WinPotPair struct {
	first  int32
	second int32
}

func (self *WinPotPair) ResetDefault() {
}

func (self *WinPotPair) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.first))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.second))
	if err != nil {
		return err
	}
	return err
}

func (self *WinPotPair) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.first), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.second), 1)
	if err != nil {
		return err
	}
	return err
}

type PotPair struct {
	first  int32
	second string
}

func (self *PotPair) ResetDefault() {
}

func (self *PotPair) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.first))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.second))
	if err != nil {
		return err
	}
	return err
}

func (self *PotPair) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.first), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.second), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasActionRespPacket struct {
	lUid        int64
	iActionType int32
	iAmount     int32
	iRet        int32
	iGameRound  int32
	iBetInStep  int32
	iBetLeft    int32
}

func (self *TexasActionRespPacket) ResetDefault() {
}

func (self *TexasActionRespPacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iActionType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iAmount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iRet))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iGameRound))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iBetInStep))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iBetLeft))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasActionRespPacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActionType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAmount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRet), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameRound), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetInStep), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetLeft), 6)
	if err != nil {
		return err
	}
	return err
}

type TexasCardInfoNoticePacket struct {
	lUid        int64
	iCardIndex  int16
	iCardType   int16
	iCardNumber int16
	lDeskId     int64
}

func (self *TexasCardInfoNoticePacket) ResetDefault() {
}

func (self *TexasCardInfoNoticePacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCardIndex))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCardType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iCardNumber))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lDeskId))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasCardInfoNoticePacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCardIndex), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCardType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCardNumber), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskId), 4)
	if err != nil {
		return err
	}
	return err
}

type TexasActionNoticePacket struct {
	lUid         int64
	lValidAction int64
	iMinBets     int32
	iMaxBets     int32
	lActionTime  int64
	iBetInStep   int32
	iBetLeft     int32
	lTotalTime   int64
}

func (self *TexasActionNoticePacket) ResetDefault() {
}

func (self *TexasActionNoticePacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lValidAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iMinBets))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iMaxBets))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lActionTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iBetInStep))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iBetLeft))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lTotalTime))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasActionNoticePacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lValidAction), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMinBets), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMaxBets), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lActionTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetInStep), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetLeft), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTotalTime), 7)
	if err != nil {
		return err
	}
	return err
}

type TexasGameResultNotifyPacket struct {
	lUid           int64
	iHandCardsType int32
	iBetIn         int32
	iBetout        int32
	vWinPots       []WinPotPair
	iHandCardsRank int32
	vHandCards     []PokerPair
	lDeskId        int64
}

func (self *TexasGameResultNotifyPacket) ResetDefault() {
}

func (self *TexasGameResultNotifyPacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iHandCardsType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBetIn))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBetout))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vWinPots))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iHandCardsRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.vHandCards))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lDeskId))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasGameResultNotifyPacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHandCardsType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetIn), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetout), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vWinPots), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHandCardsRank), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vHandCards), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskId), 7)
	if err != nil {
		return err
	}
	return err
}

type TexasRoundOverNoticePacket struct {
	lPid       int64
	iGameRound int32
	potList    []PotPair
}

func (self *TexasRoundOverNoticePacket) ResetDefault() {
}

func (self *TexasRoundOverNoticePacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameRound))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.potList))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasRoundOverNoticePacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lPid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameRound), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.potList), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasDealCardsNoticePacket struct {
	lUid     int64
	iCardIdx int64
	iFlag    int32
}

func (self *TexasDealCardsNoticePacket) ResetDefault() {
}

func (self *TexasDealCardsNoticePacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCardIdx))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasDealCardsNoticePacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCardIdx), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFlag), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasPokerGameOverNotifyPacket struct {
	iGameId int32
	iCode   int32
}

func (self *TexasPokerGameOverNotifyPacket) ResetDefault() {
}

func (self *TexasPokerGameOverNotifyPacket) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPokerGameOverNotifyPacket) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCode), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasPokerShowCardAction struct {
	lUid   int64
	vCards []PokerPair
}

func (self *TexasPokerShowCardAction) ResetDefault() {
}

func (self *TexasPokerShowCardAction) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vCards))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPokerShowCardAction) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vCards), 1)
	if err != nil {
		return err
	}
	return err
}

type CheckTexasPokerIsUserInWhiteListReq struct {
	tId    UserId
	typeGo int32
	lTid   int64
	lSid   int64
}

func (self *CheckTexasPokerIsUserInWhiteListReq) ResetDefault() {
}

func (self *CheckTexasPokerIsUserInWhiteListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.typeGo))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *CheckTexasPokerIsUserInWhiteListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.typeGo), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 3)
	if err != nil {
		return err
	}
	return err
}

type CheckTexasPokerIsUserInWhiteListRsp struct {
	iRetCode int32
	lDeskId  int64
}

func (self *CheckTexasPokerIsUserInWhiteListRsp) ResetDefault() {
}

func (self *CheckTexasPokerIsUserInWhiteListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskId))
	if err != nil {
		return err
	}
	return err
}

func (self *CheckTexasPokerIsUserInWhiteListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskId), 1)
	if err != nil {
		return err
	}
	return err
}

type TexasEndLiveReq struct {
	tId         UserId
	lDeskId     int64
	lChannel    int64
	lSubChannel int64
}

func (self *TexasEndLiveReq) ResetDefault() {
}

func (self *TexasEndLiveReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasEndLiveReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 3)
	if err != nil {
		return err
	}
	return err
}

type TexasPlayerStatusBroadcast struct {
	lUid    int64
	lDeskId int64
	iStatus int32
}

func (self *TexasPlayerStatusBroadcast) ResetDefault() {
}

func (self *TexasPlayerStatusBroadcast) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPlayerStatusBroadcast) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStatus), 2)
	if err != nil {
		return err
	}
	return err
}

type TexasPlayerComeBackReq struct {
	tId         UserId
	lDeskID     int64
	lChannel    int64
	lSubChannel int64
}

func (self *TexasPlayerComeBackReq) ResetDefault() {
}

func (self *TexasPlayerComeBackReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasPlayerComeBackReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 3)
	if err != nil {
		return err
	}
	return err
}

type TexasrechargeFreeTicketReq struct {
	tId         UserId
	lDeskID     int64
	lChannel    int64
	lSubChannel int64
	sCDKey      string
}

func (self *TexasrechargeFreeTicketReq) ResetDefault() {
}

func (self *TexasrechargeFreeTicketReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sCDKey))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasrechargeFreeTicketReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sCDKey), 4)
	if err != nil {
		return err
	}
	return err
}

type TexasUserOutReq struct {
	lChannel    int64
	lSubChannel int64
	lDeskID     int64
	vUidList    []int64
}

func (self *TexasUserOutReq) ResetDefault() {
}

func (self *TexasUserOutReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vUidList))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasUserOutReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannel), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUidList), 3)
	if err != nil {
		return err
	}
	return err
}

type TexasTransGameMoneyReq struct {
	tId         UserId
	iItemType   int32
	iItemCount  int32
	lDeskID     int64
	lChannel    int64
	lSubChannel int64
}

func (self *TexasTransGameMoneyReq) ResetDefault() {
}

func (self *TexasTransGameMoneyReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iItemCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lDeskID))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lSubChannel))
	if err != nil {
		return err
	}
	return err
}

func (self *TexasTransGameMoneyReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lDeskID), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lChannel), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannel), 5)
	if err != nil {
		return err
	}
	return err
}

type GameStartInfo struct {
	vGameUnitList []string
	iBetType      int32
	iCid          int32
	sGameName     string
}

func (self *GameStartInfo) ResetDefault() {
}

func (self *GameStartInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameUnitList))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBetType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sGameName))
	if err != nil {
		return err
	}
	return err
}

func (self *GameStartInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameUnitList), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 3)
	if err != nil {
		return err
	}
	return err
}

type GameStartInfoList struct {
	vGameStartInfo []GameStartInfo
}

func (self *GameStartInfoList) ResetDefault() {
}

func (self *GameStartInfoList) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameStartInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GameStartInfoList) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameStartInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GameUnitInfoV1 struct {
	iGameUnitId        int32
	sGameUnitName      string
	iBetOdds           int32
	iBetExchangeAmount int32
}

func (self *GameUnitInfoV1) ResetDefault() {
}

func (self *GameUnitInfoV1) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sGameUnitName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBetOdds))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBetExchangeAmount))
	if err != nil {
		return err
	}
	return err
}

func (self *GameUnitInfoV1) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameUnitId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameUnitName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetOdds), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetExchangeAmount), 3)
	if err != nil {
		return err
	}
	return err
}

type GameNoticeInfo struct {
	iGameId              int32
	iGameStats           int32
	lGameStarterUid      int64
	sGameName            string
	lGameStarttime       int64
	sGameDescription     string
	vGameUnitInfo        []GameUnitInfoV1
	iStarterTotalGames   int32
	iStarterUncloseGames int32
	iStarterCreditValue  int32
	iExchangeCredit      int32
	iBetType             int32
}

func (self *GameNoticeInfo) ResetDefault() {
}

func (self *GameNoticeInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameStats))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lGameStarterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lGameStarttime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sGameDescription))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.vGameUnitInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iStarterTotalGames))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iStarterUncloseGames))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iStarterCreditValue))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iExchangeCredit))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iBetType))
	if err != nil {
		return err
	}
	return err
}

func (self *GameNoticeInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameStats), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGameStarterUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGameStarttime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameDescription), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameUnitInfo), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStarterTotalGames), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStarterUncloseGames), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStarterCreditValue), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iExchangeCredit), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetType), 11)
	if err != nil {
		return err
	}
	return err
}

type GameNoticeInfoList struct {
	vGameNoticeInfo []GameNoticeInfo
}

func (self *GameNoticeInfoList) ResetDefault() {
}

func (self *GameNoticeInfoList) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameNoticeInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GameNoticeInfoList) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameNoticeInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type BetInfoV1 struct {
	iBetId             int32
	iBetMaxAmount      int32
	iBetExchangeAmount int32
	iBetOdds           int32
	iBetType           int32
	sBankerName        string
}

func (self *BetInfoV1) ResetDefault() {
}

func (self *BetInfoV1) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iBetId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBetMaxAmount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBetExchangeAmount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBetOdds))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iBetType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sBankerName))
	if err != nil {
		return err
	}
	return err
}

func (self *BetInfoV1) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iBetId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetMaxAmount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetExchangeAmount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetOdds), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBankerName), 5)
	if err != nil {
		return err
	}
	return err
}

type BetInfoList struct {
	iGameUnitId int32
	vBetInfo    []BetInfoV1
}

func (self *BetInfoList) ResetDefault() {
}

func (self *BetInfoList) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vBetInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *BetInfoList) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameUnitId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vBetInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type MyBetInfo struct {
	iBetId             int32
	sBankerName        string
	iOperationType     int32
	iBetType           int32
	iBetAmount         int32
	iBetExchangeAmount int32
	iBetOdds           int32
	lBetTime           int64
	sBetWinnerName     string
	sGameName          string
}

func (self *MyBetInfo) ResetDefault() {
}

func (self *MyBetInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iBetId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sBankerName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iOperationType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBetType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iBetAmount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iBetExchangeAmount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iBetOdds))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lBetTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sBetWinnerName))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sGameName))
	if err != nil {
		return err
	}
	return err
}

func (self *MyBetInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iBetId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBankerName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOperationType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetAmount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetExchangeAmount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetOdds), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBetTime), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBetWinnerName), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 9)
	if err != nil {
		return err
	}
	return err
}

type GameliveGameSession struct {
	iGameId            int32
	iTopicId           int32
	iShortCid          int32
	iChannelId         int32
	lSubChannelId      int64
	lGameStarterUid    int64
	lGameStartTime     int64
	lGameStopTime      int64
	iGameStats         int32
	sGameName          string
	iStarterPlayTotal  int32
	iStarterBreakTotal int32
	iStarterCredit     int32
	iExchangeCredit    int32
	iBetType           int32
	mGameUnitInfos     map[int32]GameUnitInfoV1
}

func (self *GameliveGameSession) ResetDefault() {
}

func (self *GameliveGameSession) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iShortCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.lGameStarterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.lGameStartTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lGameStopTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iGameStats))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iStarterPlayTotal))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iStarterBreakTotal))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iStarterCredit))
	if err != nil {
		return err
	}
	err = jis.ReadField(13, false, &(self.iExchangeCredit))
	if err != nil {
		return err
	}
	err = jis.ReadField(14, false, &(self.iBetType))
	if err != nil {
		return err
	}
	err = jis.ReadField(15, false, &(self.mGameUnitInfos))
	if err != nil {
		return err
	}
	return err
}

func (self *GameliveGameSession) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTopicId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShortCid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChannelId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGameStarterUid), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGameStartTime), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGameStopTime), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameStats), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sGameName), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStarterPlayTotal), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStarterBreakTotal), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStarterCredit), 12)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iExchangeCredit), 13)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetType), 14)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mGameUnitInfos), 15)
	if err != nil {
		return err
	}
	return err
}

type GameChannelLifeCounter struct {
	lGameStopTime   int64
	iGameStats      int32
	iLifeCounter    int32
	lGameStarterUid int64
}

func (self *GameChannelLifeCounter) ResetDefault() {
}

func (self *GameChannelLifeCounter) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lGameStopTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameStats))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLifeCounter))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lGameStarterUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GameChannelLifeCounter) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lGameStopTime), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameStats), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLifeCounter), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGameStarterUid), 3)
	if err != nil {
		return err
	}
	return err
}

type EndHistoryGame struct {
	iTopicId    int32
	iBreakFlag  int32
	sTopicName  string
	sWinnerName string
}

func (self *EndHistoryGame) ResetDefault() {
}

func (self *EndHistoryGame) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iTopicId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBreakFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sTopicName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sWinnerName))
	if err != nil {
		return err
	}
	return err
}

func (self *EndHistoryGame) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iTopicId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBreakFlag), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTopicName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWinnerName), 3)
	if err != nil {
		return err
	}
	return err
}

type HistoryGameInfo struct {
	sTopicName  string
	iBreakFlag  int32
	sWinnerName string
}

func (self *HistoryGameInfo) ResetDefault() {
}

func (self *HistoryGameInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sTopicName))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBreakFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sWinnerName))
	if err != nil {
		return err
	}
	return err
}

func (self *HistoryGameInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sTopicName), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBreakFlag), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sWinnerName), 2)
	if err != nil {
		return err
	}
	return err
}

type BatchStartGameReq struct {
	tId                UserId
	lTopSid            int64
	lSubSid            int64
	lPid               int64
	vGameStartInfoList []GameStartInfoList
}

func (self *BatchStartGameReq) ResetDefault() {
}

func (self *BatchStartGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vGameStartInfoList))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchStartGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameStartInfoList), 4)
	if err != nil {
		return err
	}
	return err
}

type BatchStartGameRsp struct {
	iCode    int32
	lPid     int64
	vGameIds []int32
}

func (self *BatchStartGameRsp) ResetDefault() {
}

func (self *BatchStartGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vGameIds))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchStartGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameIds), 2)
	if err != nil {
		return err
	}
	return err
}

type ActiveGameReq struct {
	tId      UserId
	lTopSid  int64
	lSubSid  int64
	lPid     int64
	vGameIds []int32
}

func (self *ActiveGameReq) ResetDefault() {
}

func (self *ActiveGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vGameIds))
	if err != nil {
		return err
	}
	return err
}

func (self *ActiveGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameIds), 4)
	if err != nil {
		return err
	}
	return err
}

type ActiveGameRsp struct {
	iCode              int32
	iHeartbeatInterval int32
}

func (self *ActiveGameRsp) ResetDefault() {
}

func (self *ActiveGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iHeartbeatInterval))
	if err != nil {
		return err
	}
	return err
}

func (self *ActiveGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHeartbeatInterval), 1)
	if err != nil {
		return err
	}
	return err
}

type GameHeartbeatReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
	lPid    int64
}

func (self *GameHeartbeatReq) ResetDefault() {
}

func (self *GameHeartbeatReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *GameHeartbeatReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	return err
}

type BetReq struct {
	tId         UserId
	lTopSid     int64
	lSubSid     int64
	lPid        int64
	sBankerName string
	iBetAmount  int32
	iBetOdds    int32
	iGameUnitId int32
	iBetType    int32
	sTokencakey string
}

func (self *BetReq) ResetDefault() {
}

func (self *BetReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sBankerName))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iBetAmount))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iBetOdds))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iGameUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iBetType))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.sTokencakey))
	if err != nil {
		return err
	}
	return err
}

func (self *BetReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBankerName), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetAmount), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetOdds), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameUnitId), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetType), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTokencakey), 9)
	if err != nil {
		return err
	}
	return err
}

type BetRsp struct {
	iCode int32
}

func (self *BetRsp) ResetDefault() {
}

func (self *BetRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *BetRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type BuyBetReq struct {
	tId             UserId
	lTopSid         int64
	lSubSid         int64
	lPid            int64
	iUnitId         int32
	iBetOdds        int32
	sUserName       string
	iExchangeAmount int32
	sTokencakey     string
}

func (self *BuyBetReq) ResetDefault() {
}

func (self *BuyBetReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iBetOdds))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sUserName))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iExchangeAmount))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sTokencakey))
	if err != nil {
		return err
	}
	return err
}

func (self *BuyBetReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetOdds), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUserName), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iExchangeAmount), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sTokencakey), 8)
	if err != nil {
		return err
	}
	return err
}

type BuyBetRsp struct {
	iCode                  int32
	iBetType               int32
	iBetOdds               int32
	iSuccessExchangeAmount int32
	iFailedExchangeAmount  int32
	iNestBestOdds          int32
}

func (self *BuyBetRsp) ResetDefault() {
}

func (self *BuyBetRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBetType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBetOdds))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iSuccessExchangeAmount))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iFailedExchangeAmount))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iNestBestOdds))
	if err != nil {
		return err
	}
	return err
}

func (self *BuyBetRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetOdds), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSuccessExchangeAmount), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFailedExchangeAmount), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iNestBestOdds), 5)
	if err != nil {
		return err
	}
	return err
}

type SuspendGameReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
	lPid    int64
	iGameId int32
}

func (self *SuspendGameReq) ResetDefault() {
}

func (self *SuspendGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *SuspendGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 4)
	if err != nil {
		return err
	}
	return err
}

type SuspendGameRsp struct {
	iCode int32
}

func (self *SuspendGameRsp) ResetDefault() {
}

func (self *SuspendGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *SuspendGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type ResumeGameReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
	lPid    int64
	iGameId int32
}

func (self *ResumeGameReq) ResetDefault() {
}

func (self *ResumeGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *ResumeGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 4)
	if err != nil {
		return err
	}
	return err
}

type ResumeGameRsp struct {
	iCode              int32
	iHeartbeatInterval int32
}

func (self *ResumeGameRsp) ResetDefault() {
}

func (self *ResumeGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iHeartbeatInterval))
	if err != nil {
		return err
	}
	return err
}

func (self *ResumeGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iHeartbeatInterval), 1)
	if err != nil {
		return err
	}
	return err
}

type PresenterEndGameReq struct {
	tId         UserId
	lTopSid     int64
	lSubSid     int64
	lPid        int64
	iGameId     int32
	iGameUnitId int32
	bEndFlag    bool
}

func (self *PresenterEndGameReq) ResetDefault() {
}

func (self *PresenterEndGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iGameUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.bEndFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterEndGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameUnitId), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bEndFlag), 6)
	if err != nil {
		return err
	}
	return err
}

type PresenterEndGameRsp struct {
	iCode          int32
	iGameResult    int32
	iGameId        int32
	iWinGameUnitId int32
	iIncomesType   int32
	iIncomesAmount int32
}

func (self *PresenterEndGameRsp) ResetDefault() {
}

func (self *PresenterEndGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameResult))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iWinGameUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iIncomesType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iIncomesAmount))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterEndGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameResult), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinGameUnitId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIncomesType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIncomesAmount), 5)
	if err != nil {
		return err
	}
	return err
}

type SynCreateGameSessionReq struct {
	tId          UserId
	lTopSid      int64
	lSubSid      int64
	lPid         int64
	vGameSession []GameliveGameSession
}

func (self *SynCreateGameSessionReq) ResetDefault() {
}

func (self *SynCreateGameSessionReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vGameSession))
	if err != nil {
		return err
	}
	return err
}

func (self *SynCreateGameSessionReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameSession), 4)
	if err != nil {
		return err
	}
	return err
}

type SynCreateGameSessionRsp struct {
	iCode int32
}

func (self *SynCreateGameSessionRsp) ResetDefault() {
}

func (self *SynCreateGameSessionRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *SynCreateGameSessionRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type SynEndSessionsReq struct {
	tId     UserId
	iGameId int32
}

func (self *SynEndSessionsReq) ResetDefault() {
}

func (self *SynEndSessionsReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *SynEndSessionsReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 1)
	if err != nil {
		return err
	}
	return err
}

type SynEndSessionsRsp struct {
	iCode int32
}

func (self *SynEndSessionsRsp) ResetDefault() {
}

func (self *SynEndSessionsRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *SynEndSessionsRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type SynSuspendOrResumeGameReq struct {
	tId       UserId
	lTopSid   int64
	lSubSid   int64
	iGameStat int32
}

func (self *SynSuspendOrResumeGameReq) ResetDefault() {
}

func (self *SynSuspendOrResumeGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGameStat))
	if err != nil {
		return err
	}
	return err
}

func (self *SynSuspendOrResumeGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameStat), 3)
	if err != nil {
		return err
	}
	return err
}

type SynGameHeartbeatReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
	lPid    int64
}

func (self *SynGameHeartbeatReq) ResetDefault() {
}

func (self *SynGameHeartbeatReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *SynGameHeartbeatReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	return err
}

type SynGameHeartbeatRsp struct {
	iCode int32
}

func (self *SynGameHeartbeatRsp) ResetDefault() {
}

func (self *SynGameHeartbeatRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *SynGameHeartbeatRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type QueryPackageReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
}

func (self *QueryPackageReq) ResetDefault() {
}

func (self *QueryPackageReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryPackageReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	return err
}

type QueryPackageRsp struct {
	iCode               int32
	iItemWhiteBeanCount int32
	iItemGreenBeanCount int32
}

func (self *QueryPackageRsp) ResetDefault() {
}

func (self *QueryPackageRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iItemWhiteBeanCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iItemGreenBeanCount))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryPackageRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemWhiteBeanCount), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemGreenBeanCount), 2)
	if err != nil {
		return err
	}
	return err
}

type VideoRecordingCodeReq struct {
	tId            UserId
	lTopSid        int64
	lSubSid        int64
	sVideoKeywords string
}

func (self *VideoRecordingCodeReq) ResetDefault() {
}

func (self *VideoRecordingCodeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sVideoKeywords))
	if err != nil {
		return err
	}
	return err
}

func (self *VideoRecordingCodeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVideoKeywords), 3)
	if err != nil {
		return err
	}
	return err
}

type VideoRecordingCodeRsp struct {
	iCode              int32
	sVideoRecodingCode string
}

func (self *VideoRecordingCodeRsp) ResetDefault() {
}

func (self *VideoRecordingCodeRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sVideoRecodingCode))
	if err != nil {
		return err
	}
	return err
}

func (self *VideoRecordingCodeRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sVideoRecodingCode), 1)
	if err != nil {
		return err
	}
	return err
}

type GetGameInfoListReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
	lPid    int64
}

func (self *GetGameInfoListReq) ResetDefault() {
}

func (self *GetGameInfoListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameInfoListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	return err
}

type GetGameInfoListRsp struct {
	vGameNoticeInfoList []GameNoticeInfoList
}

func (self *GetGameInfoListRsp) ResetDefault() {
}

func (self *GetGameInfoListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameNoticeInfoList))
	if err != nil {
		return err
	}
	return err
}

func (self *GetGameInfoListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameNoticeInfoList), 0)
	if err != nil {
		return err
	}
	return err
}

type GetBetListReq struct {
	tId         UserId
	lTopSid     int64
	lSubSid     int64
	lPid        int64
	vGameUnitId []int32
}

func (self *GetBetListReq) ResetDefault() {
}

func (self *GetBetListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vGameUnitId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetBetListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameUnitId), 4)
	if err != nil {
		return err
	}
	return err
}

type GetBetListRsp struct {
	iCode        int32
	vBetInfoList []BetInfoList
}

func (self *GetBetListRsp) ResetDefault() {
}

func (self *GetBetListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vBetInfoList))
	if err != nil {
		return err
	}
	return err
}

func (self *GetBetListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vBetInfoList), 1)
	if err != nil {
		return err
	}
	return err
}

type ListMyInfoReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
	lPid    int64
	iPage   int32
}

func (self *ListMyInfoReq) ResetDefault() {
}

func (self *ListMyInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPage))
	if err != nil {
		return err
	}
	return err
}

func (self *ListMyInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPage), 4)
	if err != nil {
		return err
	}
	return err
}

type ListMyInfotRsp struct {
	iCode       int32
	vMyBetInfo  []MyBetInfo
	lServerTime int64
	iMoreFlag   int32
}

func (self *ListMyInfotRsp) ResetDefault() {
}

func (self *ListMyInfotRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vMyBetInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lServerTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iMoreFlag))
	if err != nil {
		return err
	}
	return err
}

func (self *ListMyInfotRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vMyBetInfo), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lServerTime), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMoreFlag), 3)
	if err != nil {
		return err
	}
	return err
}

type GetBetNumReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
	lPid    int64
	vGameId []int32
}

func (self *GetBetNumReq) ResetDefault() {
}

func (self *GetBetNumReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetBetNumReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameId), 4)
	if err != nil {
		return err
	}
	return err
}

type GetBetNumRsp struct {
	iCode   int32
	iBetNum int32
}

func (self *GetBetNumRsp) ResetDefault() {
}

func (self *GetBetNumRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBetNum))
	if err != nil {
		return err
	}
	return err
}

func (self *GetBetNumRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetNum), 1)
	if err != nil {
		return err
	}
	return err
}

type GetRemainBeanNumReq struct {
	tId      UserId
	lTopSid  int64
	lSubSid  int64
	lPid     int64
	iUnitId  int32
	iBetOdds int32
}

func (self *GetRemainBeanNumReq) ResetDefault() {
}

func (self *GetRemainBeanNumReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iBetOdds))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRemainBeanNumReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetOdds), 5)
	if err != nil {
		return err
	}
	return err
}

type GetRemainBeanNumRsp struct {
	iCode         int32
	iBetType      int32
	iBetRemainNum int32
	iBuyAllNum    int32
}

func (self *GetRemainBeanNumRsp) ResetDefault() {
}

func (self *GetRemainBeanNumRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBetType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBetRemainNum))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBuyAllNum))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRemainBeanNumRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetRemainNum), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBuyAllNum), 3)
	if err != nil {
		return err
	}
	return err
}

type GetHistoryGameReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
}

func (self *GetHistoryGameReq) ResetDefault() {
}

func (self *GetHistoryGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetHistoryGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	return err
}

type GetHistoryGameRsp struct {
	iCode            int32
	vHistoryGameInfo []HistoryGameInfo
}

func (self *GetHistoryGameRsp) ResetDefault() {
}

func (self *GetHistoryGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vHistoryGameInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetHistoryGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vHistoryGameInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type PushUserGuessingReq struct {
	tId      UserId
	vGameIds []int32
}

func (self *PushUserGuessingReq) ResetDefault() {
}

func (self *PushUserGuessingReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vGameIds))
	if err != nil {
		return err
	}
	return err
}

func (self *PushUserGuessingReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameIds), 1)
	if err != nil {
		return err
	}
	return err
}

type PushUserGuessingRsp struct {
	iCode int32
}

func (self *PushUserGuessingRsp) ResetDefault() {
}

func (self *PushUserGuessingRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	return err
}

func (self *PushUserGuessingRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	return err
}

type SynGameSessionUnitInfoReq struct {
	tId       UserId
	lTopSid   int64
	lSubSid   int64
	iGameId   int32
	mUnitInfo map[int32]GameUnitInfoV1
}

func (self *SynGameSessionUnitInfoReq) ResetDefault() {
}

func (self *SynGameSessionUnitInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.mUnitInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *SynGameSessionUnitInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mUnitInfo), 4)
	if err != nil {
		return err
	}
	return err
}

type SynBetNumReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
	iGameId int32
}

func (self *SynBetNumReq) ResetDefault() {
}

func (self *SynBetNumReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *SynBetNumReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 3)
	if err != nil {
		return err
	}
	return err
}

type NoticeGameInfoChangeReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
	iGameId int32
}

func (self *NoticeGameInfoChangeReq) ResetDefault() {
}

func (self *NoticeGameInfoChangeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *NoticeGameInfoChangeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 3)
	if err != nil {
		return err
	}
	return err
}

type BatchGameInfoNotice struct {
	vGameNoticeInfoList []GameNoticeInfoList
}

func (self *BatchGameInfoNotice) ResetDefault() {
}

func (self *BatchGameInfoNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameNoticeInfoList))
	if err != nil {
		return err
	}
	return err
}

func (self *BatchGameInfoNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameNoticeInfoList), 0)
	if err != nil {
		return err
	}
	return err
}

type EndHistoryGameNotice struct {
	vHistoryGameInfo []HistoryGameInfo
}

func (self *EndHistoryGameNotice) ResetDefault() {
}

func (self *EndHistoryGameNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vHistoryGameInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *EndHistoryGameNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vHistoryGameInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GameInfoChangeNotice struct {
	iGameId       int32
	iGameStats    int32
	vGameUnitInfo []GameUnitInfoV1
}

func (self *GameInfoChangeNotice) ResetDefault() {
}

func (self *GameInfoChangeNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameStats))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vGameUnitInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GameInfoChangeNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameStats), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameUnitInfo), 2)
	if err != nil {
		return err
	}
	return err
}

type GameSettlementNotice struct {
	vGameUnitNames []string
	iWinnerUnitId  int32
	iBetIncome     int32
	iBuyIncome     int32
	lGameTime      int64
	vMyInfoList    []MyBetInfo
	iGameId        int32
}

func (self *GameSettlementNotice) ResetDefault() {
}

func (self *GameSettlementNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameUnitNames))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iWinnerUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBetIncome))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBuyIncome))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lGameTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vMyInfoList))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *GameSettlementNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameUnitNames), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWinnerUnitId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetIncome), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBuyIncome), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lGameTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vMyInfoList), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 6)
	if err != nil {
		return err
	}
	return err
}

type PresenterEndGameNotice struct {
	iGameId     int32
	iGameUnitId int32
	iGameResult int32
}

func (self *PresenterEndGameNotice) ResetDefault() {
}

func (self *PresenterEndGameNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameUnitId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iGameResult))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterEndGameNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iGameId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameUnitId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameResult), 2)
	if err != nil {
		return err
	}
	return err
}

type BuyBetNotice struct {
	lBuyUserUid        int64
	iBetType           int32
	iBetExchangeAmount int32
	sBuyUserNick       string
}

func (self *BuyBetNotice) ResetDefault() {
}

func (self *BuyBetNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lBuyUserUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBetType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iBetExchangeAmount))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sBuyUserNick))
	if err != nil {
		return err
	}
	return err
}

func (self *BuyBetNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lBuyUserUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetExchangeAmount), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBuyUserNick), 3)
	if err != nil {
		return err
	}
	return err
}

type GuessAuthInfo struct {
	iWhiteBeanAuth   int32
	iWhiteBeanCredit int32
	iGreenBeanAuth   int32
	iGreenBeanCredit int32
}

func (self *GuessAuthInfo) ResetDefault() {
}

func (self *GuessAuthInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iWhiteBeanAuth))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iWhiteBeanCredit))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iGreenBeanAuth))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGreenBeanCredit))
	if err != nil {
		return err
	}
	return err
}

func (self *GuessAuthInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iWhiteBeanAuth), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWhiteBeanCredit), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGreenBeanAuth), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGreenBeanCredit), 3)
	if err != nil {
		return err
	}
	return err
}

type BetConfInfo struct {
	iBeanType       int32
	iUnitFstOddsFst int32
	iUnitFstBankFst int32
	iUnitFstOddsSec int32
	iUnitFstBankSec int32
	iUnitSecOddsFst int32
	iUnitSecBankFst int32
	iUnitSecOddsSec int32
	iUnitSecBankSec int32
	iUnitThdOddsFst int32
	iUnitThdBankFst int32
	iUnitThdOddsSec int32
	iUnitThdBankSec int32
}

func (self *BetConfInfo) ResetDefault() {
}

func (self *BetConfInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iBeanType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iUnitFstOddsFst))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iUnitFstBankFst))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iUnitFstOddsSec))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iUnitFstBankSec))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iUnitSecOddsFst))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iUnitSecBankFst))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iUnitSecOddsSec))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.iUnitSecBankSec))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iUnitThdOddsFst))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.iUnitThdBankFst))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.iUnitThdOddsSec))
	if err != nil {
		return err
	}
	err = jis.ReadField(12, false, &(self.iUnitThdBankSec))
	if err != nil {
		return err
	}
	return err
}

func (self *BetConfInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iBeanType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitFstOddsFst), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitFstBankFst), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitFstOddsSec), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitFstBankSec), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitSecOddsFst), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitSecBankFst), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitSecOddsSec), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitSecBankSec), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitThdOddsFst), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitThdBankFst), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitThdOddsSec), 11)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUnitThdBankSec), 12)
	if err != nil {
		return err
	}
	return err
}

type BetOddAmount struct {
	iBetOdd    int32
	iBetAmount int32
}

func (self *BetOddAmount) ResetDefault() {
}

func (self *BetOddAmount) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iBetOdd))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iBetAmount))
	if err != nil {
		return err
	}
	return err
}

func (self *BetOddAmount) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iBetOdd), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBetAmount), 1)
	if err != nil {
		return err
	}
	return err
}

type BetVipInfo struct {
	lStarterUid    int64
	lBetUid        int64
	sBetUserNick   string
	vWhiteBetUnits []BetOddAmount
	vGreenBetUnits []BetOddAmount
}

func (self *BetVipInfo) ResetDefault() {
}

func (self *BetVipInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lStarterUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lBetUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sBetUserNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vWhiteBetUnits))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vGreenBetUnits))
	if err != nil {
		return err
	}
	return err
}

func (self *BetVipInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lStarterUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBetUid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sBetUserNick), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vWhiteBetUnits), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGreenBetUnits), 4)
	if err != nil {
		return err
	}
	return err
}

type GuessConfInfo struct {
	iChannelId    int32
	lSubChannelId int64
	lAnchorUid    int64
	lBankerUid    int64
	sNick         string
	vConfInfo     []BetConfInfo
}

func (self *GuessConfInfo) ResetDefault() {
}

func (self *GuessConfInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lAnchorUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lBankerUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vConfInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GuessConfInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAnchorUid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lBankerUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vConfInfo), 5)
	if err != nil {
		return err
	}
	return err
}

type QueryGuessAuthReq struct {
	tId     UserId
	lTopSid int64
	lSubSid int64
	lPid    int64
}

func (self *QueryGuessAuthReq) ResetDefault() {
}

func (self *QueryGuessAuthReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryGuessAuthReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 3)
	if err != nil {
		return err
	}
	return err
}

type QueryGuessAuthRsp struct {
	iCode            int32
	iWhiteBeanAuth   int32
	iWhiteBeanCredit int32
	iGreenBeanAuth   int32
	iGreenBeanCredit int32
}

func (self *QueryGuessAuthRsp) ResetDefault() {
}

func (self *QueryGuessAuthRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iWhiteBeanAuth))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iWhiteBeanCredit))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGreenBeanAuth))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iGreenBeanCredit))
	if err != nil {
		return err
	}
	return err
}

func (self *QueryGuessAuthRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWhiteBeanAuth), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iWhiteBeanCredit), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGreenBeanAuth), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGreenBeanCredit), 4)
	if err != nil {
		return err
	}
	return err
}

type GetBetVipInfoReq struct {
	tId         UserId
	lTopSid     int64
	lSubSid     int64
	lStarterUid int64
}

func (self *GetBetVipInfoReq) ResetDefault() {
}

func (self *GetBetVipInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTopSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSubSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lStarterUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetBetVipInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTopSid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lStarterUid), 3)
	if err != nil {
		return err
	}
	return err
}

type GetBetVipInfoRsp struct {
	tBetVipInfo BetVipInfo
}

func (self *GetBetVipInfoRsp) ResetDefault() {
}

func (self *GetBetVipInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tBetVipInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetBetVipInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tBetVipInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GetAssistantReq struct {
	tId           UserId
	lPid          int64
	lAssistantUid int64
}

func (self *GetAssistantReq) ResetDefault() {
}

func (self *GetAssistantReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lAssistantUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAssistantReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAssistantUid), 2)
	if err != nil {
		return err
	}
	return err
}

type GetAssistantRsp struct {
	iCode         int32
	lAssistantUid int64
}

func (self *GetAssistantRsp) ResetDefault() {
}

func (self *GetAssistantRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lAssistantUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAssistantRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lAssistantUid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetAuthAuditedInfoByUidReq struct {
	tId UserId
}

func (self *GetAuthAuditedInfoByUidReq) ResetDefault() {
}

func (self *GetAuthAuditedInfoByUidReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAuthAuditedInfoByUidReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetAuthAuditedInfoByUidRsp struct {
	iState int32
}

func (self *GetAuthAuditedInfoByUidRsp) ResetDefault() {
}

func (self *GetAuthAuditedInfoByUidRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iState))
	if err != nil {
		return err
	}
	return err
}

func (self *GetAuthAuditedInfoByUidRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iState), 0)
	if err != nil {
		return err
	}
	return err
}

type LiveFavorNotify struct {
	vUids       []int64
	iTotalCount int32
}

func (self *LiveFavorNotify) ResetDefault() {
}

func (self *LiveFavorNotify) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vUids))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iTotalCount))
	if err != nil {
		return err
	}
	return err
}

func (self *LiveFavorNotify) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vUids), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTotalCount), 1)
	if err != nil {
		return err
	}
	return err
}

type ViewerUserInfo struct {
	lUid    int64
	sNick   string
	sAvatar string
	lYYId   int64
}

func (self *ViewerUserInfo) ResetDefault() {
}

func (self *ViewerUserInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sAvatar))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lYYId))
	if err != nil {
		return err
	}
	return err
}

func (self *ViewerUserInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatar), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 3)
	if err != nil {
		return err
	}
	return err
}

type UserEnterNotify struct {
	lTopCid int64
	lSubCid int64
	vUsers  []ViewerUserInfo
}

func (self *UserEnterNotify) ResetDefault() {
}

func (self *UserEnterNotify) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lTopCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vUsers))
	if err != nil {
		return err
	}
	return err
}

func (self *UserEnterNotify) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lTopCid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubCid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUsers), 2)
	if err != nil {
		return err
	}
	return err
}

type UserLeaveNotify struct {
	lTopCid int64
	lSubCid int64
	vUsers  []ViewerUserInfo
}

func (self *UserLeaveNotify) ResetDefault() {
}

func (self *UserLeaveNotify) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lTopCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSubCid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vUsers))
	if err != nil {
		return err
	}
	return err
}

func (self *UserLeaveNotify) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lTopCid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSubCid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUsers), 2)
	if err != nil {
		return err
	}
	return err
}

type PackageWater struct {
	lOpTime      int64
	iOpType      int32
	sUseTypeName string
	iItemType    int32
	iItemCount   int32
}

func (self *PackageWater) ResetDefault() {
}

func (self *PackageWater) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lOpTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iOpType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sUseTypeName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iItemType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iItemCount))
	if err != nil {
		return err
	}
	return err
}

func (self *PackageWater) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lOpTime), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iOpType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sUseTypeName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iItemCount), 4)
	if err != nil {
		return err
	}
	return err
}

type PackageWaterReq struct {
	tId      UserId
	iMonth   int32
	iPageIdx int32
}

func (self *PackageWaterReq) ResetDefault() {
}

func (self *PackageWaterReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMonth))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPageIdx))
	if err != nil {
		return err
	}
	return err
}

func (self *PackageWaterReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMonth), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPageIdx), 2)
	if err != nil {
		return err
	}
	return err
}

type PackageWaterRsp struct {
	iCurMonth    int32
	iMaxPageSize int32
	iEndFlag     int32
	vList        []PackageWater
}

func (self *PackageWaterRsp) ResetDefault() {
}

func (self *PackageWaterRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iCurMonth))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iMaxPageSize))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iEndFlag))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.vList))
	if err != nil {
		return err
	}
	return err
}

func (self *PackageWaterRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iCurMonth), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMaxPageSize), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iEndFlag), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vList), 3)
	if err != nil {
		return err
	}
	return err
}

type GetPresenterAuthChannelReq struct {
	tId        UserId
	vChannelId []int64
}

func (self *GetPresenterAuthChannelReq) ResetDefault() {
}

func (self *GetPresenterAuthChannelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vChannelId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPresenterAuthChannelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vChannelId), 1)
	if err != nil {
		return err
	}
	return err
}

type AuthSubchannelInfo struct {
	lSubchannelId   int64
	sSubchannelName string
}

func (self *AuthSubchannelInfo) ResetDefault() {
}

func (self *AuthSubchannelInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lSubchannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sSubchannelName))
	if err != nil {
		return err
	}
	return err
}

func (self *AuthSubchannelInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lSubchannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sSubchannelName), 1)
	if err != nil {
		return err
	}
	return err
}

type AuthChannelInfo struct {
	lChannelId          int64
	lShortChannelId     int64
	vAuthSubchannelInfo []AuthSubchannelInfo
}

func (self *AuthChannelInfo) ResetDefault() {
}

func (self *AuthChannelInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lShortChannelId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vAuthSubchannelInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *AuthChannelInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lChannelId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lShortChannelId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vAuthSubchannelInfo), 2)
	if err != nil {
		return err
	}
	return err
}

type GetPresenterAuthChannelRsp struct {
	vAuthChannelInfo []AuthChannelInfo
}

func (self *GetPresenterAuthChannelRsp) ResetDefault() {
}

func (self *GetPresenterAuthChannelRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vAuthChannelInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPresenterAuthChannelRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vAuthChannelInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GetLiveHistoryByUidReq struct {
	tId           UserId
	lPresenterUid int64
}

func (self *GetLiveHistoryByUidReq) ResetDefault() {
}

func (self *GetLiveHistoryByUidReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lPresenterUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetLiveHistoryByUidReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterUid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetLiveHistoryByUidRsp struct {
	vGameLiveInfo []GameLiveInfo
}

func (self *GetLiveHistoryByUidRsp) ResetDefault() {
}

func (self *GetLiveHistoryByUidRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameLiveInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetLiveHistoryByUidRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameLiveInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type MLinkMicStat struct {
	iSwitch int32
}

func (self *MLinkMicStat) ResetDefault() {
}

func (self *MLinkMicStat) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSwitch))
	if err != nil {
		return err
	}
	return err
}

func (self *MLinkMicStat) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSwitch), 0)
	if err != nil {
		return err
	}
	return err
}

type MicSeatStat struct {
	iPos           int32
	iVip           int32
	iLocked        int32
	lUid           int64
	iProtectedTime int32
	iInvite        int32
	iSpeaking      int32
	sNick          string
	sIcon          string
	iMute          int32
}

func (self *MicSeatStat) ResetDefault() {
}

func (self *MicSeatStat) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPos))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iVip))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLocked))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iProtectedTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iInvite))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iSpeaking))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.sIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.iMute))
	if err != nil {
		return err
	}
	return err
}

func (self *MicSeatStat) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPos), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVip), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLocked), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iProtectedTime), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iInvite), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSpeaking), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIcon), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iMute), 9)
	if err != nil {
		return err
	}
	return err
}

type MLinkMicStatNotify struct {
	tStat    MLinkMicStat
	vSeats   []MicSeatStat
	iVersion int32
}

func (self *MLinkMicStatNotify) ResetDefault() {
}

func (self *MLinkMicStatNotify) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tStat))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vSeats))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iVersion))
	if err != nil {
		return err
	}
	return err
}

func (self *MLinkMicStatNotify) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tStat), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSeats), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVersion), 2)
	if err != nil {
		return err
	}
	return err
}

type MLinkMicActionReq struct {
	tId     UserId
	iAction int32
	lLiveId int64
	iPos    int32
	lUid    int64
	vUids   []int64
}

func (self *MLinkMicActionReq) ResetDefault() {
}

func (self *MLinkMicActionReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPos))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vUids))
	if err != nil {
		return err
	}
	return err
}

func (self *MLinkMicActionReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAction), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPos), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUids), 5)
	if err != nil {
		return err
	}
	return err
}

type MLinkMicActionRsp struct {
	iAction int32
	lLiveId int64
	iPos    int32
	lUid    int64
}

func (self *MLinkMicActionRsp) ResetDefault() {
}

func (self *MLinkMicActionRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPos))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *MLinkMicActionRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iAction), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPos), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	return err
}

type MLinkMicStatReq struct {
	tId     UserId
	lLiveId int64
}

func (self *MLinkMicStatReq) ResetDefault() {
}

func (self *MLinkMicStatReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	return err
}

func (self *MLinkMicStatReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 1)
	if err != nil {
		return err
	}
	return err
}

type MLinkMicStatRsp struct {
	tStat    MLinkMicStat
	vSeats   []MicSeatStat
	iVersion int32
}

func (self *MLinkMicStatRsp) ResetDefault() {
}

func (self *MLinkMicStatRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tStat))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vSeats))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iVersion))
	if err != nil {
		return err
	}
	return err
}

func (self *MLinkMicStatRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tStat), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSeats), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVersion), 2)
	if err != nil {
		return err
	}
	return err
}

type MVideoLinkMicStat struct {
	iSwitch int32
}

func (self *MVideoLinkMicStat) ResetDefault() {
}

func (self *MVideoLinkMicStat) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iSwitch))
	if err != nil {
		return err
	}
	return err
}

func (self *MVideoLinkMicStat) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iSwitch), 0)
	if err != nil {
		return err
	}
	return err
}

type MVideoMicSeatStat struct {
	iPos        int32
	iState      int32
	iUpdateTime int32
	iActiveTime int32
	lUid        int64
	sNick       string
	sIcon       string
	iCurAction  int32
}

func (self *MVideoMicSeatStat) ResetDefault() {
}

func (self *MVideoMicSeatStat) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iPos))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iState))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iUpdateTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iActiveTime))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.sIcon))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iCurAction))
	if err != nil {
		return err
	}
	return err
}

func (self *MVideoMicSeatStat) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iPos), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iState), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iUpdateTime), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iActiveTime), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIcon), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCurAction), 7)
	if err != nil {
		return err
	}
	return err
}

type MVideoLinkMicStatNotify struct {
	tStat    MVideoLinkMicStat
	vSeats   []MVideoMicSeatStat
	iVersion int32
}

func (self *MVideoLinkMicStatNotify) ResetDefault() {
}

func (self *MVideoLinkMicStatNotify) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tStat))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vSeats))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iVersion))
	if err != nil {
		return err
	}
	return err
}

func (self *MVideoLinkMicStatNotify) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tStat), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSeats), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVersion), 2)
	if err != nil {
		return err
	}
	return err
}

type MVideoLinkMicActionReq struct {
	tId     UserId
	iAction int32
	lLiveId int64
	iPos    int32
	lUid    int64
}

func (self *MVideoLinkMicActionReq) ResetDefault() {
}

func (self *MVideoLinkMicActionReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iPos))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *MVideoLinkMicActionReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iAction), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPos), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 4)
	if err != nil {
		return err
	}
	return err
}

type MVideoLinkMicActionRsp struct {
	iAction int32
	lLiveId int64
	iPos    int32
	lUid    int64
}

func (self *MVideoLinkMicActionRsp) ResetDefault() {
}

func (self *MVideoLinkMicActionRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iAction))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPos))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *MVideoLinkMicActionRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iAction), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPos), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 3)
	if err != nil {
		return err
	}
	return err
}

type MVideoLinkMicStatReq struct {
	tId     UserId
	lLiveId int64
}

func (self *MVideoLinkMicStatReq) ResetDefault() {
}

func (self *MVideoLinkMicStatReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lLiveId))
	if err != nil {
		return err
	}
	return err
}

func (self *MVideoLinkMicStatReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lLiveId), 1)
	if err != nil {
		return err
	}
	return err
}

type MVideoLinkMicStatRsp struct {
	tStat    MVideoLinkMicStat
	vSeats   []MVideoMicSeatStat
	iVersion int32
}

func (self *MVideoLinkMicStatRsp) ResetDefault() {
}

func (self *MVideoLinkMicStatRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tStat))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vSeats))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iVersion))
	if err != nil {
		return err
	}
	return err
}

func (self *MVideoLinkMicStatRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tStat), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vSeats), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVersion), 2)
	if err != nil {
		return err
	}
	return err
}

type GetMobileUpdateInfoReq struct {
	tId UserId
}

func (self *GetMobileUpdateInfoReq) ResetDefault() {
}

func (self *GetMobileUpdateInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobileUpdateInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMobileUpdateInfoRsp struct {
	iIsUpdate     int32
	iIsUpdateType int32
	sInfo         string
	sNewVersion   string
	sAppUrl       string
}

func (self *GetMobileUpdateInfoRsp) ResetDefault() {
}

func (self *GetMobileUpdateInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iIsUpdate))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iIsUpdateType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNewVersion))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sAppUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobileUpdateInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iIsUpdate), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsUpdateType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sInfo), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNewVersion), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAppUrl), 4)
	if err != nil {
		return err
	}
	return err
}

type DecorationInfo struct {
	iAppId    int32
	iViewType int32
	vData     []byte
}

func (self *DecorationInfo) ResetDefault() {
}

func (self *DecorationInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iAppId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iViewType))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.vData))
	if err != nil {
		return err
	}
	return err
}

func (self *DecorationInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iAppId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iViewType), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vData), 2)
	if err != nil {
		return err
	}
	return err
}

type SenderInfo struct {
	lUid      int64
	lImid     int64
	sNickName string
	iGender   int32
}

func (self *SenderInfo) ResetDefault() {
}

func (self *SenderInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lImid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGender))
	if err != nil {
		return err
	}
	return err
}

func (self *SenderInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lImid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGender), 3)
	if err != nil {
		return err
	}
	return err
}

type BulletFormat struct {
	iFontColor      int32
	iFontSize       int32
	iTextSpeed      int32
	iTransitionType int32
	iPopupStyle     int32
}

func (self *BulletFormat) ResetDefault() {
}

func (self *BulletFormat) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iFontColor))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iFontSize))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iTextSpeed))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iTransitionType))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iPopupStyle))
	if err != nil {
		return err
	}
	return err
}

func (self *BulletFormat) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iFontColor), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFontSize), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTextSpeed), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTransitionType), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPopupStyle), 4)
	if err != nil {
		return err
	}
	return err
}

type ContentFormat struct {
	iFontColor  int32
	iFontSize   int32
	iPopupStyle int32
}

func (self *ContentFormat) ResetDefault() {
}

func (self *ContentFormat) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iFontColor))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iFontSize))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iPopupStyle))
	if err != nil {
		return err
	}
	return err
}

func (self *ContentFormat) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iFontColor), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFontSize), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPopupStyle), 2)
	if err != nil {
		return err
	}
	return err
}

type UidNickName struct {
	lUid      int64
	sNickName string
}

func (self *UidNickName) ResetDefault() {
}

func (self *UidNickName) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	return err
}

func (self *UidNickName) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	return err
}

type MessageNotice struct {
	tUserInfo         SenderInfo
	lTid              int64
	lSid              int64
	sContent          string
	iShowMode         int32
	tFormat           ContentFormat
	tBulletFormat     BulletFormat
	iTermType         int32
	vDecorationPrefix []DecorationInfo
	vDecorationSuffix []DecorationInfo
	vAtSomeone        []UidNickName
	lPid              int64
}

func (self *MessageNotice) ResetDefault() {
}

func (self *MessageNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sContent))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iShowMode))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.tFormat))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.tBulletFormat))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iTermType))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.vDecorationPrefix))
	if err != nil {
		return err
	}
	err = jis.ReadField(9, false, &(self.vDecorationSuffix))
	if err != nil {
		return err
	}
	err = jis.ReadField(10, false, &(self.vAtSomeone))
	if err != nil {
		return err
	}
	err = jis.ReadField(11, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *MessageNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sContent), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShowMode), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFormat), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tBulletFormat), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iTermType), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vDecorationPrefix), 8)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vDecorationSuffix), 9)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vAtSomeone), 10)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 11)
	if err != nil {
		return err
	}
	return err
}

type SendMessageReq struct {
	tUserId       UserId
	lTid          int64
	lSid          int64
	sContent      string
	iShowMode     int32
	tFormat       ContentFormat
	tBulletFormat BulletFormat
	vAtSomeone    []UidNickName
	lPid          int64
}

func (self *SendMessageReq) ResetDefault() {
}

func (self *SendMessageReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sContent))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iShowMode))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.tFormat))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.tBulletFormat))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.vAtSomeone))
	if err != nil {
		return err
	}
	err = jis.ReadField(8, false, &(self.lPid))
	if err != nil {
		return err
	}
	return err
}

func (self *SendMessageReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sContent), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iShowMode), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFormat), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tBulletFormat), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vAtSomeone), 7)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPid), 8)
	if err != nil {
		return err
	}
	return err
}

type SendMessageRsp struct {
	iStatus int32
	tNotice MessageNotice
}

func (self *SendMessageRsp) ResetDefault() {
}

func (self *SendMessageRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStatus))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tNotice))
	if err != nil {
		return err
	}
	return err
}

func (self *SendMessageRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStatus), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tNotice), 1)
	if err != nil {
		return err
	}
	return err
}

type Emoticon struct {
	iType    int64
	sIconKey string
	sIconURL string
}

func (self *Emoticon) ResetDefault() {
}

func (self *Emoticon) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sIconKey))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sIconURL))
	if err != nil {
		return err
	}
	return err
}

func (self *Emoticon) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iType), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIconKey), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIconURL), 2)
	if err != nil {
		return err
	}
	return err
}

type SendEmoticonMsgReq struct {
	tBasicReq SendMessageReq
	tEmoticon Emoticon
}

func (self *SendEmoticonMsgReq) ResetDefault() {
}

func (self *SendEmoticonMsgReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tBasicReq))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tEmoticon))
	if err != nil {
		return err
	}
	return err
}

func (self *SendEmoticonMsgReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tBasicReq), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tEmoticon), 1)
	if err != nil {
		return err
	}
	return err
}

type SendEmoticonMsgRsp struct {
	iStatus int32
}

func (self *SendEmoticonMsgRsp) ResetDefault() {
}

func (self *SendEmoticonMsgRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *SendEmoticonMsgRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStatus), 0)
	if err != nil {
		return err
	}
	return err
}

type DecorationInfoReq struct {
	tSendMsgReq SendMessageReq
}

func (self *DecorationInfoReq) ResetDefault() {
}

func (self *DecorationInfoReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tSendMsgReq))
	if err != nil {
		return err
	}
	return err
}

func (self *DecorationInfoReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tSendMsgReq), 0)
	if err != nil {
		return err
	}
	return err
}

type DecorationInfoRsp struct {
	vDecorationPrefix []DecorationInfo
	vDecorationSuffix []DecorationInfo
	tFormat           ContentFormat
	tBulletFormat     BulletFormat
	vForwardChannels  []ChannelPair
	iModifyMask       int32
}

func (self *DecorationInfoRsp) ResetDefault() {
}

func (self *DecorationInfoRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vDecorationPrefix))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vDecorationSuffix))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tFormat))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.tBulletFormat))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.vForwardChannels))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iModifyMask))
	if err != nil {
		return err
	}
	return err
}

func (self *DecorationInfoRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vDecorationPrefix), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vDecorationSuffix), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tFormat), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tBulletFormat), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vForwardChannels), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iModifyMask), 5)
	if err != nil {
		return err
	}
	return err
}

type GetMessageNoticeReq struct {
	tSendMsgReq SendMessageReq
}

func (self *GetMessageNoticeReq) ResetDefault() {
}

func (self *GetMessageNoticeReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tSendMsgReq))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMessageNoticeReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tSendMsgReq), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMessageNoticeRsp struct {
	tNotice MessageNotice
}

func (self *GetMessageNoticeRsp) ResetDefault() {
}

func (self *GetMessageNoticeRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tNotice))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMessageNoticeRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tNotice), 0)
	if err != nil {
		return err
	}
	return err
}

type MsgCommDecoIcon struct {
	sUrl string
}

func (self *MsgCommDecoIcon) ResetDefault() {
}

func (self *MsgCommDecoIcon) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *MsgCommDecoIcon) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sUrl), 0)
	if err != nil {
		return err
	}
	return err
}

type MsgCommDecoText struct {
	sText string
}

func (self *MsgCommDecoText) ResetDefault() {
}

func (self *MsgCommDecoText) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sText))
	if err != nil {
		return err
	}
	return err
}

func (self *MsgCommDecoText) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sText), 0)
	if err != nil {
		return err
	}
	return err
}

type MsgCommDecoChannelRoleInfo struct {
	iLevel int32
}

func (self *MsgCommDecoChannelRoleInfo) ResetDefault() {
}

func (self *MsgCommDecoChannelRoleInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *MsgCommDecoChannelRoleInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iLevel), 0)
	if err != nil {
		return err
	}
	return err
}

type MsgCommDecoGuardInfo struct {
	iLevel int32
}

func (self *MsgCommDecoGuardInfo) ResetDefault() {
}

func (self *MsgCommDecoGuardInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iLevel))
	if err != nil {
		return err
	}
	return err
}

func (self *MsgCommDecoGuardInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iLevel), 0)
	if err != nil {
		return err
	}
	return err
}

type GetDynamicListByNameReq struct {
	tId            UserId
	sListName      string
	bDefaultFilter int32
}

func (self *GetDynamicListByNameReq) ResetDefault() {
}

func (self *GetDynamicListByNameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sListName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.bDefaultFilter))
	if err != nil {
		return err
	}
	return err
}

func (self *GetDynamicListByNameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sListName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bDefaultFilter), 2)
	if err != nil {
		return err
	}
	return err
}

type GetDynamicListByNameRsp struct {
	vGameLiveInfo []GameLiveInfo
	sMessage      string
}

func (self *GetDynamicListByNameRsp) ResetDefault() {
}

func (self *GetDynamicListByNameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameLiveInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *GetDynamicListByNameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameLiveInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMessage), 1)
	if err != nil {
		return err
	}
	return err
}

type GetDynamicListByScriptReq struct {
	sListName      string
	sScript        string
	mpParam        map[string]string
	bDefaultFilter int32
}

func (self *GetDynamicListByScriptReq) ResetDefault() {
}

func (self *GetDynamicListByScriptReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sListName))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sScript))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.mpParam))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.bDefaultFilter))
	if err != nil {
		return err
	}
	return err
}

func (self *GetDynamicListByScriptReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sListName), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sScript), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mpParam), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.bDefaultFilter), 3)
	if err != nil {
		return err
	}
	return err
}

type GetDynamicListByScriptRsp struct {
	vGameLiveInfo []GameLiveInfo
	sMessage      string
}

func (self *GetDynamicListByScriptRsp) ResetDefault() {
}

func (self *GetDynamicListByScriptRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameLiveInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *GetDynamicListByScriptRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameLiveInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMessage), 1)
	if err != nil {
		return err
	}
	return err
}

type PostFavorReq struct {
	tId  UserId
	lUid int64
}

func (self *PostFavorReq) ResetDefault() {
}

func (self *PostFavorReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *PostFavorReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type PostFavorRsp struct {
	iRetCode int32
	sMessage string
}

func (self *PostFavorRsp) ResetDefault() {
}

func (self *PostFavorRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iRetCode))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMessage))
	if err != nil {
		return err
	}
	return err
}

func (self *PostFavorRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iRetCode), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMessage), 1)
	if err != nil {
		return err
	}
	return err
}

type PurpleVipInfo struct {
	lUid        int64
	iIsSuper    int32
	iChargeType int32
	iVipGrade   int32
	sIconUrl    string
}

func (self *PurpleVipInfo) ResetDefault() {
}

func (self *PurpleVipInfo) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iIsSuper))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iChargeType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iVipGrade))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sIconUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *PurpleVipInfo) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iIsSuper), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iChargeType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iVipGrade), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sIconUrl), 4)
	if err != nil {
		return err
	}
	return err
}

type AttendeeCountNotice struct {
	iAttendeeCount int32
}

func (self *AttendeeCountNotice) ResetDefault() {
}

func (self *AttendeeCountNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iAttendeeCount))
	if err != nil {
		return err
	}
	return err
}

func (self *AttendeeCountNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iAttendeeCount), 0)
	if err != nil {
		return err
	}
	return err
}

type FansReportToZhixuReq struct {
	lUid      int64
	lSerial   int64
	iType     int32
	sContent  string
	sNick     string
	vImageUrl []string
}

func (self *FansReportToZhixuReq) ResetDefault() {
}

func (self *FansReportToZhixuReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lSerial))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iType))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sContent))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.sNick))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.vImageUrl))
	if err != nil {
		return err
	}
	return err
}

func (self *FansReportToZhixuReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSerial), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iType), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sContent), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vImageUrl), 5)
	if err != nil {
		return err
	}
	return err
}

type GetPresenterDetailReq struct {
	tId  UserId
	lUid int64
}

func (self *GetPresenterDetailReq) ResetDefault() {
}

func (self *GetPresenterDetailReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPresenterDetailReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetPresenterDetailRsp struct {
	mMiscInfo  map[string]string
	iStartTime int32
}

func (self *GetPresenterDetailRsp) ResetDefault() {
}

func (self *GetPresenterDetailRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.mMiscInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iStartTime))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPresenterDetailRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.mMiscInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iStartTime), 1)
	if err != nil {
		return err
	}
	return err
}

type ActiveNotice struct {
	iUri      int32
	sJsonInfo string
}

func (self *ActiveNotice) ResetDefault() {
}

func (self *ActiveNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iUri))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sJsonInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *ActiveNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iUri), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sJsonInfo), 1)
	if err != nil {
		return err
	}
	return err
}

type Top10RicherEnterNotice struct {
	lUserUid          int64
	lContributionRank int64
	lContribution     int64
	sNick             string
}

func (self *Top10RicherEnterNotice) ResetDefault() {
}

func (self *Top10RicherEnterNotice) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUserUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lContributionRank))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lContribution))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sNick))
	if err != nil {
		return err
	}
	return err
}

func (self *Top10RicherEnterNotice) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUserUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lContributionRank), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lContribution), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNick), 3)
	if err != nil {
		return err
	}
	return err
}

type RobotBoostChatReq struct {
	tId  UserId
	lUid int64
}

func (self *RobotBoostChatReq) ResetDefault() {
}

func (self *RobotBoostChatReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *RobotBoostChatReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetRecentUserListByChannelReq struct {
	tId  UserId
	lTid int64
	lSid int64
}

func (self *GetRecentUserListByChannelReq) ResetDefault() {
}

func (self *GetRecentUserListByChannelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecentUserListByChannelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	return err
}

type GetRecentUserListByChannelRsp struct {
	vViewerUserInfo []ViewerUserInfo
}

func (self *GetRecentUserListByChannelRsp) ResetDefault() {
}

func (self *GetRecentUserListByChannelRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vViewerUserInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecentUserListByChannelRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vViewerUserInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type MobileGameList struct {
	sGameName   string
	iGameId     int32
	iScreen     int32
	sDesc       string
	sPacketName string
}

func (self *MobileGameList) ResetDefault() {
}

func (self *MobileGameList) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sGameName))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iScreen))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sDesc))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.sPacketName))
	if err != nil {
		return err
	}
	return err
}

func (self *MobileGameList) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sGameName), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iScreen), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sDesc), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPacketName), 5)
	if err != nil {
		return err
	}
	return err
}

type GetMobileGameListReq struct {
	tId UserId
}

func (self *GetMobileGameListReq) ResetDefault() {
}

func (self *GetMobileGameListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobileGameListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMobileGameListRsp struct {
	vMobileGameList []MobileGameList
}

func (self *GetMobileGameListRsp) ResetDefault() {
}

func (self *GetMobileGameListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vMobileGameList))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobileGameListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vMobileGameList), 0)
	if err != nil {
		return err
	}
	return err
}

type GetRecentLiveBatchReq struct {
	tId  UserId
	vUid []int64
}

func (self *GetRecentLiveBatchReq) ResetDefault() {
}

func (self *GetRecentLiveBatchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecentLiveBatchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetRecentLiveBatchRsp struct {
	vGameLiveInfo []GameLiveInfo
}

func (self *GetRecentLiveBatchRsp) ResetDefault() {
}

func (self *GetRecentLiveBatchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameLiveInfo))
	if err != nil {
		return err
	}
	return err
}

func (self *GetRecentLiveBatchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameLiveInfo), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMobilePresenterChannelReq struct {
	tId          UserId
	vChannelPair []ChannelPair
}

func (self *GetMobilePresenterChannelReq) ResetDefault() {
}

func (self *GetMobilePresenterChannelReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vChannelPair))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobilePresenterChannelReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vChannelPair), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMobilePresenterChannelRsp struct {
	tChannelPair ChannelPair
}

func (self *GetMobilePresenterChannelRsp) ResetDefault() {
}

func (self *GetMobilePresenterChannelRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tChannelPair))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMobilePresenterChannelRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tChannelPair), 0)
	if err != nil {
		return err
	}
	return err
}

type SetMUserFavorSectionReq struct {
	tId     UserId
	vGameId []int32
	iLogin  int32
}

func (self *SetMUserFavorSectionReq) ResetDefault() {
}

func (self *SetMUserFavorSectionReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.iLogin))
	if err != nil {
		return err
	}
	return err
}

func (self *SetMUserFavorSectionReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vGameId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iLogin), 2)
	if err != nil {
		return err
	}
	return err
}

type SetMUserFavorSectionRsp struct {
	vGameId []int32
}

func (self *SetMUserFavorSectionRsp) ResetDefault() {
}

func (self *SetMUserFavorSectionRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *SetMUserFavorSectionRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMUserFavorSectionReq struct {
	tId  UserId
	lUid int64
}

func (self *GetMUserFavorSectionReq) ResetDefault() {
}

func (self *GetMUserFavorSectionReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMUserFavorSectionReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMUserFavorSectionRsp struct {
	vGameId []int32
}

func (self *GetMUserFavorSectionRsp) ResetDefault() {
}

func (self *GetMUserFavorSectionRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vGameId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMUserFavorSectionRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vGameId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetPresenterConfigReq struct {
	tId      UserId
	mpParams map[string]string
}

func (self *GetPresenterConfigReq) ResetDefault() {
}

func (self *GetPresenterConfigReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.mpParams))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPresenterConfigReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.mpParams), 1)
	if err != nil {
		return err
	}
	return err
}

type GetPresenterConfigRsp struct {
	mpConfig map[string]string
}

func (self *GetPresenterConfigRsp) ResetDefault() {
}

func (self *GetPresenterConfigRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.mpConfig))
	if err != nil {
		return err
	}
	return err
}

func (self *GetPresenterConfigRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.mpConfig), 0)
	if err != nil {
		return err
	}
	return err
}

type GetLiveHotsReq struct {
	tId UserId
}

func (self *GetLiveHotsReq) ResetDefault() {
}

func (self *GetLiveHotsReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	return err
}

func (self *GetLiveHotsReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	return err
}

type GetLiveHotsRsp struct {
	vLiveHotItem []LiveHotItem
}

func (self *GetLiveHotsRsp) ResetDefault() {
}

func (self *GetLiveHotsRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vLiveHotItem))
	if err != nil {
		return err
	}
	return err
}

func (self *GetLiveHotsRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vLiveHotItem), 0)
	if err != nil {
		return err
	}
	return err
}

type GetMyAllCategoryGameReq struct {
	tId  UserId
	sMd5 string
}

func (self *GetMyAllCategoryGameReq) ResetDefault() {
}

func (self *GetMyAllCategoryGameReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sMd5))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMyAllCategoryGameReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sMd5), 1)
	if err != nil {
		return err
	}
	return err
}

type GetMyAllCategoryGameRsp struct {
	vCategoryInfo   []CategoryInfo
	tAllGameMd5Info AllGameMd5Info
}

func (self *GetMyAllCategoryGameRsp) ResetDefault() {
}

func (self *GetMyAllCategoryGameRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vCategoryInfo))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tAllGameMd5Info))
	if err != nil {
		return err
	}
	return err
}

func (self *GetMyAllCategoryGameRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vCategoryInfo), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tAllGameMd5Info), 1)
	if err != nil {
		return err
	}
	return err
}

type IsInReceptionRankListReq struct {
	tId  UserId
	lTid int64
	lSid int64
}

func (self *IsInReceptionRankListReq) ResetDefault() {
}

func (self *IsInReceptionRankListReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lTid))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSid))
	if err != nil {
		return err
	}
	return err
}

func (self *IsInReceptionRankListReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lTid), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSid), 2)
	if err != nil {
		return err
	}
	return err
}

type IsInReceptionRankListRsp struct {
	iStatus int32
}

func (self *IsInReceptionRankListRsp) ResetDefault() {
}

func (self *IsInReceptionRankListRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iStatus))
	if err != nil {
		return err
	}
	return err
}

func (self *IsInReceptionRankListRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iStatus), 0)
	if err != nil {
		return err
	}
	return err
}

type OpenRtmpAddrReq struct {
	sLiveDesc string
	iGameId   int32
	tUserId   UserId
	iBps      int32
}

func (self *OpenRtmpAddrReq) ResetDefault() {
}

func (self *OpenRtmpAddrReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sLiveDesc))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.iGameId))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tUserId))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iBps))
	if err != nil {
		return err
	}
	return err
}

func (self *OpenRtmpAddrReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sLiveDesc), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGameId), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tUserId), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iBps), 3)
	if err != nil {
		return err
	}
	return err
}

type OpenRtmpAddrRsp struct {
	sRtmpAddr string
	sRtmpKey  string
}

func (self *OpenRtmpAddrRsp) ResetDefault() {
}

func (self *OpenRtmpAddrRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.sRtmpAddr))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sRtmpKey))
	if err != nil {
		return err
	}
	return err
}

func (self *OpenRtmpAddrRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.sRtmpAddr), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sRtmpKey), 1)
	if err != nil {
		return err
	}
	return err
}

type UserBase struct {
	lUid              int64
	sNickName         string
	sAvatarUrl        string
	iGender           int32
	lYYId             int64
	iCertified        int32
	iSubscribedCount  int32
	iSubscribeToCount int32
}

func (self *UserBase) ResetDefault() {
}

func (self *UserBase) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.lUid))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sNickName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.sAvatarUrl))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.iGender))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.lYYId))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iCertified))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iSubscribedCount))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.iSubscribeToCount))
	if err != nil {
		return err
	}
	return err
}

func (self *UserBase) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.lUid), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sNickName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sAvatarUrl), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iGender), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lYYId), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iCertified), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubscribedCount), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iSubscribeToCount), 7)
	if err != nil {
		return err
	}
	return err
}

type PresenterBase struct {
	iIsPresenter    int32
	sPresenterName  string
	lSignedChannel  int64
	sPrivateHost    string
	iRecType        int32
	iFreeze         int32
	iPresenterLevel int32
	lPresenterExp   int64
}

func (self *PresenterBase) ResetDefault() {
}

func (self *PresenterBase) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.iIsPresenter))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.sPresenterName))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.lSignedChannel))
	if err != nil {
		return err
	}
	err = jis.ReadField(3, false, &(self.sPrivateHost))
	if err != nil {
		return err
	}
	err = jis.ReadField(4, false, &(self.iRecType))
	if err != nil {
		return err
	}
	err = jis.ReadField(5, false, &(self.iFreeze))
	if err != nil {
		return err
	}
	err = jis.ReadField(6, false, &(self.iPresenterLevel))
	if err != nil {
		return err
	}
	err = jis.ReadField(7, false, &(self.lPresenterExp))
	if err != nil {
		return err
	}
	return err
}

func (self *PresenterBase) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.iIsPresenter), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPresenterName), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lSignedChannel), 2)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.sPrivateHost), 3)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iRecType), 4)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iFreeze), 5)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.iPresenterLevel), 6)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lPresenterExp), 7)
	if err != nil {
		return err
	}
	return err
}

type UserProfile struct {
	tUserBase      UserBase
	tPresenterBase PresenterBase
	tRecentLive    GameLiveInfo
}

func (self *UserProfile) ResetDefault() {
}

func (self *UserProfile) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserBase))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.tPresenterBase))
	if err != nil {
		return err
	}
	err = jis.ReadField(2, false, &(self.tRecentLive))
	if err != nil {
		return err
	}
	return err
}

func (self *UserProfile) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserBase), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tPresenterBase), 1)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.tRecentLive), 2)
	if err != nil {
		return err
	}
	return err
}

type GetUserProfileReq struct {
	tId  UserId
	lUid int64
}

func (self *GetUserProfileReq) ResetDefault() {
}

func (self *GetUserProfileReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.lUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserProfileReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.lUid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetUserProfileRsp struct {
	tUserProfile UserProfile
}

func (self *GetUserProfileRsp) ResetDefault() {
}

func (self *GetUserProfileRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tUserProfile))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserProfileRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tUserProfile), 0)
	if err != nil {
		return err
	}
	return err
}

type GetUserProfileBatchReq struct {
	tId  UserId
	vUid []int64
}

func (self *GetUserProfileBatchReq) ResetDefault() {
}

func (self *GetUserProfileBatchReq) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.tId))
	if err != nil {
		return err
	}
	err = jis.ReadField(1, false, &(self.vUid))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserProfileBatchReq) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.tId), 0)
	if err != nil {
		return err
	}
	err = jos.WriteField(&(self.vUid), 1)
	if err != nil {
		return err
	}
	return err
}

type GetUserProfileBatchRsp struct {
	vUserProfile []UserProfile
}

func (self *GetUserProfileBatchRsp) ResetDefault() {
}

func (self *GetUserProfileBatchRsp) ReadFrom(jis *jce.JceInputStream) (err error) {
	err = jis.ReadField(0, false, &(self.vUserProfile))
	if err != nil {
		return err
	}
	return err
}

func (self *GetUserProfileBatchRsp) WriteTo(jos *jce.JceOutputStream) (err error) {
	err = jos.WriteField(&(self.vUserProfile), 0)
	if err != nil {
		return err
	}
	return err
}
